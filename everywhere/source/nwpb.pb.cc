// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nwpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nwpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NWPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NWPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePasswordRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePasswordRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNWInfoRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNWInfoRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNWInfoRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNWInfoRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAutoParamRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAutoParamRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAutoParamRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAutoParamRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetConfigRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetConfigRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfigRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfigRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfigRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfigRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLogRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLogRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* NWLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NWLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLogRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLogRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSynchRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSynchRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* RebootRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RebootRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeListRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeListRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeListRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeListRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeStatusRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeStatusRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeStatusRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeStatusRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTopologyRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTopologyRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParentNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParentNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeNotificationNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeNotificationNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubscribeNotificationNtf_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeviceBindingRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceBindingRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* RmDeviceBindingRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RmDeviceBindingRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestNodeDataUploadNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestNodeDataUploadNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NmpDataUploadNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NmpDataUploadNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContinueNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContinueNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeRealDataRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeRealDataRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeRealDataRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeRealDataRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCommandToNodeRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCommandToNodeRqst_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SetCommandToNodeRqst_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorTypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeSettingsRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeSettingsRqst_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetNodeSettingsRqst_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetNodeSettingsRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeSettingsRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUpDisconCachedAlarmRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUpDisconCachedAlarmRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUpDisconCachedAlarmRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUpDisconCachedAlarmRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedAlarmData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedAlarmData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeAllNodeDataRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeAllNodeDataRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelAllNodeDataRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelAllNodeDataRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatSubscribeNodeDataRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatSubscribeNodeDataRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatCancelNodeDataRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatCancelNodeDataRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlackWhiteNodeRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackWhiteNodeRqst_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlackWhiteNodeRqst_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetBlackWhiteRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlackWhiteRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlackWhiteRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlackWhiteRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFirmwareRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFirmwareRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFirmwareRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFirmwareRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFirmwareNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFirmwareNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeModuleRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeModuleRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeModuleRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeModuleRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeModuleNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeModuleNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminalPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminalPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminalStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminalStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTerminalStatusRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTerminalStatusRqst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTerminalStatusRsps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTerminalStatusRsps_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminalCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminalCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTerminalCtrlCmdRqst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTerminalCtrlCmdRqst_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Encrypt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceModel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConfigName_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Enable_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReceiveStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecuteStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_nwpb_2eproto() {
  protobuf_AddDesc_nwpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nwpb.proto");
  GOOGLE_CHECK(file != NULL);
  NWPb_descriptor_ = file->message_type(0);
  static const int NWPb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWPb, rqst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWPb, rsps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWPb, ntf_),
  };
  NWPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NWPb_descriptor_,
      NWPb::default_instance_,
      NWPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NWPb));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, content_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, content_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_Error_descriptor_ = Response_descriptor_->enum_type(0);
  Notify_descriptor_ = file->message_type(3);
  static const int Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, content_),
  };
  Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notify_descriptor_,
      Notify::default_instance_,
      Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notify));
  LoginRqst_descriptor_ = file->message_type(4);
  static const int LoginRqst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRqst, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRqst, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRqst, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRqst, data_),
  };
  LoginRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRqst_descriptor_,
      LoginRqst::default_instance_,
      LoginRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRqst));
  LoginRsps_descriptor_ = file->message_type(5);
  static const int LoginRsps_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, nw_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, encrypt_),
  };
  LoginRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRsps_descriptor_,
      LoginRsps::default_instance_,
      LoginRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRsps));
  ChangePasswordRqst_descriptor_ = file->message_type(6);
  static const int ChangePasswordRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRqst, old_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRqst, new_password_),
  };
  ChangePasswordRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePasswordRqst_descriptor_,
      ChangePasswordRqst::default_instance_,
      ChangePasswordRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePasswordRqst));
  HeartbeatRqst_descriptor_ = file->message_type(7);
  static const int HeartbeatRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRqst, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRqst, time_),
  };
  HeartbeatRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRqst_descriptor_,
      HeartbeatRqst::default_instance_,
      HeartbeatRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRqst));
  HeartbeatRsps_descriptor_ = file->message_type(8);
  static const int HeartbeatRsps_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsps, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsps, capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsps, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsps, sessions_),
  };
  HeartbeatRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRsps_descriptor_,
      HeartbeatRsps::default_instance_,
      HeartbeatRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRsps));
  RegisterRqst_descriptor_ = file->message_type(9);
  static const int RegisterRqst_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, nw_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, manufactory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, session_),
  };
  RegisterRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRqst_descriptor_,
      RegisterRqst::default_instance_,
      RegisterRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRqst));
  RegisterRsps_descriptor_ = file->message_type(10);
  static const int RegisterRsps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsps, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsps, expires_),
  };
  RegisterRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRsps_descriptor_,
      RegisterRsps::default_instance_,
      RegisterRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRsps));
  GetNWInfoRqst_descriptor_ = file->message_type(11);
  static const int GetNWInfoRqst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRqst, nw_id_),
  };
  GetNWInfoRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNWInfoRqst_descriptor_,
      GetNWInfoRqst::default_instance_,
      GetNWInfoRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNWInfoRqst));
  GetNWInfoRsps_descriptor_ = file->message_type(12);
  static const int GetNWInfoRsps_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, manufactory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, node_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, _3g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, nw_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, firmware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, gps_),
  };
  GetNWInfoRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNWInfoRsps_descriptor_,
      GetNWInfoRsps::default_instance_,
      GetNWInfoRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNWInfoRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNWInfoRsps));
  SetAutoParamRqst_descriptor_ = file->message_type(13);
  static const int SetAutoParamRqst_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, interval_),
  };
  SetAutoParamRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAutoParamRqst_descriptor_,
      SetAutoParamRqst::default_instance_,
      SetAutoParamRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAutoParamRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAutoParamRqst));
  GetAutoParamRsps_descriptor_ = file->message_type(14);
  static const int GetAutoParamRsps_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, interval_),
  };
  GetAutoParamRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAutoParamRsps_descriptor_,
      GetAutoParamRsps::default_instance_,
      GetAutoParamRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoParamRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAutoParamRsps));
  SetConfigRqst_descriptor_ = file->message_type(15);
  static const int SetConfigRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfigRqst, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfigRqst, config_file_),
  };
  SetConfigRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetConfigRqst_descriptor_,
      SetConfigRqst::default_instance_,
      SetConfigRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfigRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetConfigRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetConfigRqst));
  GetConfigRqst_descriptor_ = file->message_type(16);
  static const int GetConfigRqst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRqst, name_),
  };
  GetConfigRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfigRqst_descriptor_,
      GetConfigRqst::default_instance_,
      GetConfigRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfigRqst));
  GetConfigRsps_descriptor_ = file->message_type(17);
  static const int GetConfigRsps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRsps, config_file_),
  };
  GetConfigRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfigRsps_descriptor_,
      GetConfigRsps::default_instance_,
      GetConfigRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfigRsps));
  QueryLogRqst_descriptor_ = file->message_type(18);
  static const int QueryLogRqst_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRqst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRqst, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRqst, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRqst, start_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRqst, count_),
  };
  QueryLogRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLogRqst_descriptor_,
      QueryLogRqst::default_instance_,
      QueryLogRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLogRqst));
  NWLog_descriptor_ = file->message_type(19);
  static const int NWLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWLog, message_),
  };
  NWLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NWLog_descriptor_,
      NWLog::default_instance_,
      NWLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NWLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NWLog));
  QueryLogRsps_descriptor_ = file->message_type(20);
  static const int QueryLogRsps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRsps, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRsps, log_),
  };
  QueryLogRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLogRsps_descriptor_,
      QueryLogRsps::default_instance_,
      QueryLogRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLogRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLogRsps));
  TimeSynchRqst_descriptor_ = file->message_type(21);
  static const int TimeSynchRqst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSynchRqst, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSynchRqst, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSynchRqst, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSynchRqst, revision_),
  };
  TimeSynchRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSynchRqst_descriptor_,
      TimeSynchRqst::default_instance_,
      TimeSynchRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSynchRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSynchRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSynchRqst));
  RebootRqst_descriptor_ = file->message_type(22);
  static const int RebootRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebootRqst, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebootRqst, delay_),
  };
  RebootRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RebootRqst_descriptor_,
      RebootRqst::default_instance_,
      RebootRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebootRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebootRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RebootRqst));
  GetNodeListRqst_descriptor_ = file->message_type(23);
  static const int GetNodeListRqst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRqst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRqst, start_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRqst, count_),
  };
  GetNodeListRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeListRqst_descriptor_,
      GetNodeListRqst::default_instance_,
      GetNodeListRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeListRqst));
  GetNodeListRsps_descriptor_ = file->message_type(24);
  static const int GetNodeListRsps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRsps, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRsps, node_entry_),
  };
  GetNodeListRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeListRsps_descriptor_,
      GetNodeListRsps::default_instance_,
      GetNodeListRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeListRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeListRsps));
  NodeEntry_descriptor_ = file->message_type(25);
  static const int NodeEntry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, sensor1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, sensor2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, sensor3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, sensor4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, sensor5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, sensor6_),
  };
  NodeEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeEntry_descriptor_,
      NodeEntry::default_instance_,
      NodeEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeEntry));
  GetNodeStatusRqst_descriptor_ = file->message_type(26);
  static const int GetNodeStatusRqst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeStatusRqst, node_id_),
  };
  GetNodeStatusRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeStatusRqst_descriptor_,
      GetNodeStatusRqst::default_instance_,
      GetNodeStatusRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeStatusRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeStatusRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeStatusRqst));
  GetNodeStatusRsps_descriptor_ = file->message_type(27);
  static const int GetNodeStatusRsps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeStatusRsps, node_),
  };
  GetNodeStatusRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeStatusRsps_descriptor_,
      GetNodeStatusRsps::default_instance_,
      GetNodeStatusRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeStatusRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeStatusRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeStatusRsps));
  GetTopologyRsps_descriptor_ = file->message_type(28);
  static const int GetTopologyRsps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopologyRsps, node_),
  };
  GetTopologyRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTopologyRsps_descriptor_,
      GetTopologyRsps::default_instance_,
      GetTopologyRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopologyRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopologyRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTopologyRsps));
  Node_descriptor_ = file->message_type(29);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, l_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, s_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, parent_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  ParentNode_descriptor_ = file->message_type(30);
  static const int ParentNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentNode, l_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentNode, s_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentNode, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentNode, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentNode, priority_),
  };
  ParentNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParentNode_descriptor_,
      ParentNode::default_instance_,
      ParentNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParentNode));
  SubscribeNotificationNtf_descriptor_ = file->message_type(31);
  static const int SubscribeNotificationNtf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, str_msg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, str_msg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, time_),
  };
  SubscribeNotificationNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeNotificationNtf_descriptor_,
      SubscribeNotificationNtf::default_instance_,
      SubscribeNotificationNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeNotificationNtf));
  SubscribeNotificationNtf_MessageType_descriptor_ = SubscribeNotificationNtf_descriptor_->enum_type(0);
  DeviceBindingRqst_descriptor_ = file->message_type(32);
  static const int DeviceBindingRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceBindingRqst, valvectrl_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceBindingRqst, homegw_id_),
  };
  DeviceBindingRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceBindingRqst_descriptor_,
      DeviceBindingRqst::default_instance_,
      DeviceBindingRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceBindingRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceBindingRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceBindingRqst));
  RmDeviceBindingRqst_descriptor_ = file->message_type(33);
  static const int RmDeviceBindingRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDeviceBindingRqst, valvectrl_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDeviceBindingRqst, homegw_id_),
  };
  RmDeviceBindingRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RmDeviceBindingRqst_descriptor_,
      RmDeviceBindingRqst::default_instance_,
      RmDeviceBindingRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDeviceBindingRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDeviceBindingRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RmDeviceBindingRqst));
  RequestNodeDataUploadNtf_descriptor_ = file->message_type(34);
  static const int RequestNodeDataUploadNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNodeDataUploadNtf, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNodeDataUploadNtf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNodeDataUploadNtf, data_),
  };
  RequestNodeDataUploadNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestNodeDataUploadNtf_descriptor_,
      RequestNodeDataUploadNtf::default_instance_,
      RequestNodeDataUploadNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNodeDataUploadNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNodeDataUploadNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestNodeDataUploadNtf));
  SensorData_descriptor_ = file->message_type(35);
  static const int SensorData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, sensor_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, time_),
  };
  SensorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorData_descriptor_,
      SensorData::default_instance_,
      SensorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorData));
  NmpDataUploadNtf_descriptor_ = file->message_type(36);
  static const int NmpDataUploadNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmpDataUploadNtf, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmpDataUploadNtf, nmp_data_),
  };
  NmpDataUploadNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NmpDataUploadNtf_descriptor_,
      NmpDataUploadNtf::default_instance_,
      NmpDataUploadNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmpDataUploadNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NmpDataUploadNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NmpDataUploadNtf));
  ContinueNtf_descriptor_ = file->message_type(37);
  static const int ContinueNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueNtf, seq_),
  };
  ContinueNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContinueNtf_descriptor_,
      ContinueNtf::default_instance_,
      ContinueNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContinueNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContinueNtf));
  GetNodeRealDataRqst_descriptor_ = file->message_type(38);
  static const int GetNodeRealDataRqst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRqst, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRqst, sensor_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRqst, timeout_),
  };
  GetNodeRealDataRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeRealDataRqst_descriptor_,
      GetNodeRealDataRqst::default_instance_,
      GetNodeRealDataRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeRealDataRqst));
  GetNodeRealDataRsps_descriptor_ = file->message_type(39);
  static const int GetNodeRealDataRsps_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRsps, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRsps, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRsps, s_data_),
  };
  GetNodeRealDataRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeRealDataRsps_descriptor_,
      GetNodeRealDataRsps::default_instance_,
      GetNodeRealDataRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRealDataRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeRealDataRsps));
  SetCommandToNodeRqst_descriptor_ = file->message_type(40);
  static const int SetCommandToNodeRqst_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCommandToNodeRqst, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCommandToNodeRqst, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCommandToNodeRqst, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCommandToNodeRqst, node_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCommandToNodeRqst, sensor_data_list_),
  };
  SetCommandToNodeRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCommandToNodeRqst_descriptor_,
      SetCommandToNodeRqst::default_instance_,
      SetCommandToNodeRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCommandToNodeRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCommandToNodeRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCommandToNodeRqst));
  SetCommandToNodeRqst_Command_descriptor_ = SetCommandToNodeRqst_descriptor_->enum_type(0);
  TypeData_descriptor_ = file->message_type(41);
  static const int TypeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeData, data_),
  };
  TypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeData_descriptor_,
      TypeData::default_instance_,
      TypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeData));
  SensorTypeData_descriptor_ = file->message_type(42);
  static const int SensorTypeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTypeData, sensor_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTypeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTypeData, data_),
  };
  SensorTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorTypeData_descriptor_,
      SensorTypeData::default_instance_,
      SensorTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorTypeData));
  GetNodeSettingsRqst_descriptor_ = file->message_type(43);
  static const int GetNodeSettingsRqst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRqst, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRqst, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRqst, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRqst, sensor_no_),
  };
  GetNodeSettingsRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeSettingsRqst_descriptor_,
      GetNodeSettingsRqst::default_instance_,
      GetNodeSettingsRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeSettingsRqst));
  GetNodeSettingsRqst_Command_descriptor_ = GetNodeSettingsRqst_descriptor_->enum_type(0);
  GetNodeSettingsRsps_descriptor_ = file->message_type(44);
  static const int GetNodeSettingsRsps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRsps, node_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRsps, sensor_data_list_),
  };
  GetNodeSettingsRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeSettingsRsps_descriptor_,
      GetNodeSettingsRsps::default_instance_,
      GetNodeSettingsRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeSettingsRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeSettingsRsps));
  GetUpDisconCachedAlarmRqst_descriptor_ = file->message_type(45);
  static const int GetUpDisconCachedAlarmRqst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRqst, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRqst, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRqst, count_),
  };
  GetUpDisconCachedAlarmRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUpDisconCachedAlarmRqst_descriptor_,
      GetUpDisconCachedAlarmRqst::default_instance_,
      GetUpDisconCachedAlarmRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUpDisconCachedAlarmRqst));
  GetUpDisconCachedAlarmRsps_descriptor_ = file->message_type(46);
  static const int GetUpDisconCachedAlarmRsps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRsps, data_),
  };
  GetUpDisconCachedAlarmRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUpDisconCachedAlarmRsps_descriptor_,
      GetUpDisconCachedAlarmRsps::default_instance_,
      GetUpDisconCachedAlarmRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpDisconCachedAlarmRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUpDisconCachedAlarmRsps));
  CachedAlarmData_descriptor_ = file->message_type(47);
  static const int CachedAlarmData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, sensor_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, time_),
  };
  CachedAlarmData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedAlarmData_descriptor_,
      CachedAlarmData::default_instance_,
      CachedAlarmData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlarmData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedAlarmData));
  SubscribeAllNodeDataRqst_descriptor_ = file->message_type(48);
  static const int SubscribeAllNodeDataRqst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAllNodeDataRqst, type_),
  };
  SubscribeAllNodeDataRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeAllNodeDataRqst_descriptor_,
      SubscribeAllNodeDataRqst::default_instance_,
      SubscribeAllNodeDataRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAllNodeDataRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeAllNodeDataRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeAllNodeDataRqst));
  CancelAllNodeDataRqst_descriptor_ = file->message_type(49);
  static const int CancelAllNodeDataRqst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAllNodeDataRqst, type_),
  };
  CancelAllNodeDataRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelAllNodeDataRqst_descriptor_,
      CancelAllNodeDataRqst::default_instance_,
      CancelAllNodeDataRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAllNodeDataRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAllNodeDataRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelAllNodeDataRqst));
  BatSubscribeNodeDataRqst_descriptor_ = file->message_type(50);
  static const int BatSubscribeNodeDataRqst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSubscribeNodeDataRqst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSubscribeNodeDataRqst, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSubscribeNodeDataRqst, node_id_),
  };
  BatSubscribeNodeDataRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatSubscribeNodeDataRqst_descriptor_,
      BatSubscribeNodeDataRqst::default_instance_,
      BatSubscribeNodeDataRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSubscribeNodeDataRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatSubscribeNodeDataRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatSubscribeNodeDataRqst));
  BatCancelNodeDataRqst_descriptor_ = file->message_type(51);
  static const int BatCancelNodeDataRqst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatCancelNodeDataRqst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatCancelNodeDataRqst, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatCancelNodeDataRqst, node_id_),
  };
  BatCancelNodeDataRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatCancelNodeDataRqst_descriptor_,
      BatCancelNodeDataRqst::default_instance_,
      BatCancelNodeDataRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatCancelNodeDataRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatCancelNodeDataRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatCancelNodeDataRqst));
  BlackWhiteNodeRqst_descriptor_ = file->message_type(52);
  static const int BlackWhiteNodeRqst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhiteNodeRqst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhiteNodeRqst, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhiteNodeRqst, node_id_),
  };
  BlackWhiteNodeRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackWhiteNodeRqst_descriptor_,
      BlackWhiteNodeRqst::default_instance_,
      BlackWhiteNodeRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhiteNodeRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhiteNodeRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackWhiteNodeRqst));
  BlackWhiteNodeRqst_Command_descriptor_ = BlackWhiteNodeRqst_descriptor_->enum_type(0);
  GetBlackWhiteRqst_descriptor_ = file->message_type(53);
  static const int GetBlackWhiteRqst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlackWhiteRqst, type_),
  };
  GetBlackWhiteRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlackWhiteRqst_descriptor_,
      GetBlackWhiteRqst::default_instance_,
      GetBlackWhiteRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlackWhiteRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlackWhiteRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlackWhiteRqst));
  GetBlackWhiteRsps_descriptor_ = file->message_type(54);
  static const int GetBlackWhiteRsps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlackWhiteRsps, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlackWhiteRsps, node_id_),
  };
  GetBlackWhiteRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlackWhiteRsps_descriptor_,
      GetBlackWhiteRsps::default_instance_,
      GetBlackWhiteRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlackWhiteRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlackWhiteRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlackWhiteRsps));
  DownloadFirmwareRqst_descriptor_ = file->message_type(55);
  static const int DownloadFirmwareRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareRqst, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareRqst, url_),
  };
  DownloadFirmwareRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFirmwareRqst_descriptor_,
      DownloadFirmwareRqst::default_instance_,
      DownloadFirmwareRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFirmwareRqst));
  DownloadFirmwareRsps_descriptor_ = file->message_type(56);
  static const int DownloadFirmwareRsps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareRsps, receive_status_),
  };
  DownloadFirmwareRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFirmwareRsps_descriptor_,
      DownloadFirmwareRsps::default_instance_,
      DownloadFirmwareRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFirmwareRsps));
  DownloadFirmwareNtf_descriptor_ = file->message_type(57);
  static const int DownloadFirmwareNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareNtf, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareNtf, execute_status_),
  };
  DownloadFirmwareNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFirmwareNtf_descriptor_,
      DownloadFirmwareNtf::default_instance_,
      DownloadFirmwareNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFirmwareNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFirmwareNtf));
  UpgradeModuleRqst_descriptor_ = file->message_type(58);
  static const int UpgradeModuleRqst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleRqst, module_name_),
  };
  UpgradeModuleRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeModuleRqst_descriptor_,
      UpgradeModuleRqst::default_instance_,
      UpgradeModuleRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeModuleRqst));
  UpgradeModuleRsps_descriptor_ = file->message_type(59);
  static const int UpgradeModuleRsps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleRsps, receive_status_),
  };
  UpgradeModuleRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeModuleRsps_descriptor_,
      UpgradeModuleRsps::default_instance_,
      UpgradeModuleRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeModuleRsps));
  UpgradeModuleNtf_descriptor_ = file->message_type(60);
  static const int UpgradeModuleNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleNtf, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleNtf, execute_status_),
  };
  UpgradeModuleNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeModuleNtf_descriptor_,
      UpgradeModuleNtf::default_instance_,
      UpgradeModuleNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeModuleNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeModuleNtf));
  TerminalPort_descriptor_ = file->message_type(61);
  static const int TerminalPort_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalPort, port_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalPort, cmd_type_),
  };
  TerminalPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerminalPort_descriptor_,
      TerminalPort::default_instance_,
      TerminalPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerminalPort));
  TerminalStatus_descriptor_ = file->message_type(62);
  static const int TerminalStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalStatus, port_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalStatus, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalStatus, data_),
  };
  TerminalStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerminalStatus_descriptor_,
      TerminalStatus::default_instance_,
      TerminalStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerminalStatus));
  GetTerminalStatusRqst_descriptor_ = file->message_type(63);
  static const int GetTerminalStatusRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRqst, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRqst, port_),
  };
  GetTerminalStatusRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTerminalStatusRqst_descriptor_,
      GetTerminalStatusRqst::default_instance_,
      GetTerminalStatusRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTerminalStatusRqst));
  GetTerminalStatusRsps_descriptor_ = file->message_type(64);
  static const int GetTerminalStatusRsps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRsps, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRsps, status_),
  };
  GetTerminalStatusRsps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTerminalStatusRsps_descriptor_,
      GetTerminalStatusRsps::default_instance_,
      GetTerminalStatusRsps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRsps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTerminalStatusRsps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTerminalStatusRsps));
  TerminalCmd_descriptor_ = file->message_type(65);
  static const int TerminalCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalCmd, port_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalCmd, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalCmd, data_),
  };
  TerminalCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerminalCmd_descriptor_,
      TerminalCmd::default_instance_,
      TerminalCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerminalCmd));
  SetTerminalCtrlCmdRqst_descriptor_ = file->message_type(66);
  static const int SetTerminalCtrlCmdRqst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTerminalCtrlCmdRqst, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTerminalCtrlCmdRqst, cmd_data_),
  };
  SetTerminalCtrlCmdRqst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTerminalCtrlCmdRqst_descriptor_,
      SetTerminalCtrlCmdRqst::default_instance_,
      SetTerminalCtrlCmdRqst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTerminalCtrlCmdRqst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTerminalCtrlCmdRqst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTerminalCtrlCmdRqst));
  Command_descriptor_ = file->enum_type(0);
  Encrypt_descriptor_ = file->enum_type(1);
  DeviceType_descriptor_ = file->enum_type(2);
  DeviceModel_descriptor_ = file->enum_type(3);
  ConfigName_descriptor_ = file->enum_type(4);
  Enable_descriptor_ = file->enum_type(5);
  NodeType_descriptor_ = file->enum_type(6);
  DataType_descriptor_ = file->enum_type(7);
  LogType_descriptor_ = file->enum_type(8);
  ReceiveStatus_descriptor_ = file->enum_type(9);
  ExecuteStatus_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nwpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NWPb_descriptor_, &NWPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notify_descriptor_, &Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRqst_descriptor_, &LoginRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRsps_descriptor_, &LoginRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePasswordRqst_descriptor_, &ChangePasswordRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRqst_descriptor_, &HeartbeatRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRsps_descriptor_, &HeartbeatRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRqst_descriptor_, &RegisterRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRsps_descriptor_, &RegisterRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNWInfoRqst_descriptor_, &GetNWInfoRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNWInfoRsps_descriptor_, &GetNWInfoRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAutoParamRqst_descriptor_, &SetAutoParamRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAutoParamRsps_descriptor_, &GetAutoParamRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetConfigRqst_descriptor_, &SetConfigRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfigRqst_descriptor_, &GetConfigRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfigRsps_descriptor_, &GetConfigRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLogRqst_descriptor_, &QueryLogRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NWLog_descriptor_, &NWLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLogRsps_descriptor_, &QueryLogRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSynchRqst_descriptor_, &TimeSynchRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RebootRqst_descriptor_, &RebootRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeListRqst_descriptor_, &GetNodeListRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeListRsps_descriptor_, &GetNodeListRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeEntry_descriptor_, &NodeEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeStatusRqst_descriptor_, &GetNodeStatusRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeStatusRsps_descriptor_, &GetNodeStatusRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTopologyRsps_descriptor_, &GetTopologyRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParentNode_descriptor_, &ParentNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeNotificationNtf_descriptor_, &SubscribeNotificationNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceBindingRqst_descriptor_, &DeviceBindingRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RmDeviceBindingRqst_descriptor_, &RmDeviceBindingRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestNodeDataUploadNtf_descriptor_, &RequestNodeDataUploadNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorData_descriptor_, &SensorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NmpDataUploadNtf_descriptor_, &NmpDataUploadNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContinueNtf_descriptor_, &ContinueNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeRealDataRqst_descriptor_, &GetNodeRealDataRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeRealDataRsps_descriptor_, &GetNodeRealDataRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCommandToNodeRqst_descriptor_, &SetCommandToNodeRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeData_descriptor_, &TypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorTypeData_descriptor_, &SensorTypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeSettingsRqst_descriptor_, &GetNodeSettingsRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeSettingsRsps_descriptor_, &GetNodeSettingsRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUpDisconCachedAlarmRqst_descriptor_, &GetUpDisconCachedAlarmRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUpDisconCachedAlarmRsps_descriptor_, &GetUpDisconCachedAlarmRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedAlarmData_descriptor_, &CachedAlarmData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeAllNodeDataRqst_descriptor_, &SubscribeAllNodeDataRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelAllNodeDataRqst_descriptor_, &CancelAllNodeDataRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatSubscribeNodeDataRqst_descriptor_, &BatSubscribeNodeDataRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatCancelNodeDataRqst_descriptor_, &BatCancelNodeDataRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackWhiteNodeRqst_descriptor_, &BlackWhiteNodeRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlackWhiteRqst_descriptor_, &GetBlackWhiteRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlackWhiteRsps_descriptor_, &GetBlackWhiteRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFirmwareRqst_descriptor_, &DownloadFirmwareRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFirmwareRsps_descriptor_, &DownloadFirmwareRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFirmwareNtf_descriptor_, &DownloadFirmwareNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeModuleRqst_descriptor_, &UpgradeModuleRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeModuleRsps_descriptor_, &UpgradeModuleRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeModuleNtf_descriptor_, &UpgradeModuleNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerminalPort_descriptor_, &TerminalPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerminalStatus_descriptor_, &TerminalStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTerminalStatusRqst_descriptor_, &GetTerminalStatusRqst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTerminalStatusRsps_descriptor_, &GetTerminalStatusRsps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerminalCmd_descriptor_, &TerminalCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTerminalCtrlCmdRqst_descriptor_, &SetTerminalCtrlCmdRqst::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nwpb_2eproto() {
  delete NWPb::default_instance_;
  delete NWPb_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Notify::default_instance_;
  delete Notify_reflection_;
  delete LoginRqst::default_instance_;
  delete LoginRqst_reflection_;
  delete LoginRsps::default_instance_;
  delete LoginRsps_reflection_;
  delete ChangePasswordRqst::default_instance_;
  delete ChangePasswordRqst_reflection_;
  delete HeartbeatRqst::default_instance_;
  delete HeartbeatRqst_reflection_;
  delete HeartbeatRsps::default_instance_;
  delete HeartbeatRsps_reflection_;
  delete RegisterRqst::default_instance_;
  delete RegisterRqst_reflection_;
  delete RegisterRsps::default_instance_;
  delete RegisterRsps_reflection_;
  delete GetNWInfoRqst::default_instance_;
  delete GetNWInfoRqst_reflection_;
  delete GetNWInfoRsps::default_instance_;
  delete GetNWInfoRsps_reflection_;
  delete SetAutoParamRqst::default_instance_;
  delete SetAutoParamRqst_reflection_;
  delete GetAutoParamRsps::default_instance_;
  delete GetAutoParamRsps_reflection_;
  delete SetConfigRqst::default_instance_;
  delete SetConfigRqst_reflection_;
  delete GetConfigRqst::default_instance_;
  delete GetConfigRqst_reflection_;
  delete GetConfigRsps::default_instance_;
  delete GetConfigRsps_reflection_;
  delete QueryLogRqst::default_instance_;
  delete QueryLogRqst_reflection_;
  delete NWLog::default_instance_;
  delete NWLog_reflection_;
  delete QueryLogRsps::default_instance_;
  delete QueryLogRsps_reflection_;
  delete TimeSynchRqst::default_instance_;
  delete TimeSynchRqst_reflection_;
  delete RebootRqst::default_instance_;
  delete RebootRqst_reflection_;
  delete GetNodeListRqst::default_instance_;
  delete GetNodeListRqst_reflection_;
  delete GetNodeListRsps::default_instance_;
  delete GetNodeListRsps_reflection_;
  delete NodeEntry::default_instance_;
  delete NodeEntry_reflection_;
  delete GetNodeStatusRqst::default_instance_;
  delete GetNodeStatusRqst_reflection_;
  delete GetNodeStatusRsps::default_instance_;
  delete GetNodeStatusRsps_reflection_;
  delete GetTopologyRsps::default_instance_;
  delete GetTopologyRsps_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete ParentNode::default_instance_;
  delete ParentNode_reflection_;
  delete SubscribeNotificationNtf::default_instance_;
  delete SubscribeNotificationNtf_reflection_;
  delete DeviceBindingRqst::default_instance_;
  delete DeviceBindingRqst_reflection_;
  delete RmDeviceBindingRqst::default_instance_;
  delete RmDeviceBindingRqst_reflection_;
  delete RequestNodeDataUploadNtf::default_instance_;
  delete RequestNodeDataUploadNtf_reflection_;
  delete SensorData::default_instance_;
  delete SensorData_reflection_;
  delete NmpDataUploadNtf::default_instance_;
  delete NmpDataUploadNtf_reflection_;
  delete ContinueNtf::default_instance_;
  delete ContinueNtf_reflection_;
  delete GetNodeRealDataRqst::default_instance_;
  delete GetNodeRealDataRqst_reflection_;
  delete GetNodeRealDataRsps::default_instance_;
  delete GetNodeRealDataRsps_reflection_;
  delete SetCommandToNodeRqst::default_instance_;
  delete SetCommandToNodeRqst_reflection_;
  delete TypeData::default_instance_;
  delete TypeData_reflection_;
  delete SensorTypeData::default_instance_;
  delete SensorTypeData_reflection_;
  delete GetNodeSettingsRqst::default_instance_;
  delete GetNodeSettingsRqst_reflection_;
  delete GetNodeSettingsRsps::default_instance_;
  delete GetNodeSettingsRsps_reflection_;
  delete GetUpDisconCachedAlarmRqst::default_instance_;
  delete GetUpDisconCachedAlarmRqst_reflection_;
  delete GetUpDisconCachedAlarmRsps::default_instance_;
  delete GetUpDisconCachedAlarmRsps_reflection_;
  delete CachedAlarmData::default_instance_;
  delete CachedAlarmData_reflection_;
  delete SubscribeAllNodeDataRqst::default_instance_;
  delete SubscribeAllNodeDataRqst_reflection_;
  delete CancelAllNodeDataRqst::default_instance_;
  delete CancelAllNodeDataRqst_reflection_;
  delete BatSubscribeNodeDataRqst::default_instance_;
  delete BatSubscribeNodeDataRqst_reflection_;
  delete BatCancelNodeDataRqst::default_instance_;
  delete BatCancelNodeDataRqst_reflection_;
  delete BlackWhiteNodeRqst::default_instance_;
  delete BlackWhiteNodeRqst_reflection_;
  delete GetBlackWhiteRqst::default_instance_;
  delete GetBlackWhiteRqst_reflection_;
  delete GetBlackWhiteRsps::default_instance_;
  delete GetBlackWhiteRsps_reflection_;
  delete DownloadFirmwareRqst::default_instance_;
  delete DownloadFirmwareRqst_reflection_;
  delete DownloadFirmwareRsps::default_instance_;
  delete DownloadFirmwareRsps_reflection_;
  delete DownloadFirmwareNtf::default_instance_;
  delete DownloadFirmwareNtf_reflection_;
  delete UpgradeModuleRqst::default_instance_;
  delete UpgradeModuleRqst_reflection_;
  delete UpgradeModuleRsps::default_instance_;
  delete UpgradeModuleRsps_reflection_;
  delete UpgradeModuleNtf::default_instance_;
  delete UpgradeModuleNtf_reflection_;
  delete TerminalPort::default_instance_;
  delete TerminalPort_reflection_;
  delete TerminalStatus::default_instance_;
  delete TerminalStatus_reflection_;
  delete GetTerminalStatusRqst::default_instance_;
  delete GetTerminalStatusRqst_reflection_;
  delete GetTerminalStatusRsps::default_instance_;
  delete GetTerminalStatusRsps_reflection_;
  delete TerminalCmd::default_instance_;
  delete TerminalCmd_reflection_;
  delete SetTerminalCtrlCmdRqst::default_instance_;
  delete SetTerminalCtrlCmdRqst_reflection_;
}

void protobuf_AddDesc_nwpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nnwpb.proto\"M\n\004NWPb\022\026\n\004rqst\030\001 \001(\0132\010.Req"
    "uest\022\027\n\004rsps\030\002 \001(\0132\t.Response\022\024\n\003ntf\030\003 \001"
    "(\0132\007.Notify\"X\n\007Request\022\017\n\007session\030\001 \002(\r\022"
    "\020\n\010sequence\030\002 \002(\r\022\031\n\007command\030\003 \002(\0162\010.Com"
    "mand\022\017\n\007content\030\004 \001(\014\"\242\025\n\010Response\022\017\n\007se"
    "ssion\030\001 \002(\r\022\020\n\010sequence\030\002 \002(\r\022\031\n\007command"
    "\030\003 \002(\0162\010.Command\022\034\n\003err\030\004 \002(\0162\017.Response"
    ".Error\022\017\n\007content\030\005 \001(\014\"\250\024\n\005Error\022\022\n\rNWP"
    "B_ERROR_OK\020\310\001\022\036\n\031NWPB_ERROR_DECRYPT_FAIL"
    "ED\020\245\003\022%\n NWPB_ERROR_USER_PASSWORD_INVALI"
    "D\020\246\003\022#\n\036NWPB_ERROR_USER_INVALID_STATUS\020\247"
    "\003\022\036\n\031NWPB_ERROR_USER_NOT_EXIST\020\250\003\022\036\n\031NWP"
    "B_ERROR_USER_NOT_LOGIN\020\251\003\022(\n#NWPB_ERROR_"
    "UNSUPPORT_SUBSCRIBE_TYPE\020\252\003\022\"\n\035NWPB_ERRO"
    "R_INVALID_TIME_VALUE\020\253\003\022+\n&NWPB_ERROR_UN"
    "SUPPORT_NODELIST_GET_TYPE\020\254\003\022&\n!NWPB_ERR"
    "OR_UNSUPPORT_ENCRYPT_TYPE\020\255\003\022&\n!NWPB_ERR"
    "OR_NODE_UNSUPPORT_COMMAND\020\256\003\022!\n\034NWPB_ERR"
    "OR_INVALID_SENSOR_NO\020\257\003\022\037\n\032NWPB_ERROR_IN"
    "VALID_NODE_ID\020\260\003\022#\n\036NWPB_ERROR_NONE_THRE"
    "SHOLD_DATA\020\261\003\022\"\n\035NWPB_ERROR_USER_ALREADY"
    "_EXIST\020\262\003\022\"\n\035NWPB_ERROR_WRONG_OLD_PASSWO"
    "RD\020\263\003\022#\n\036NWPB_ERROR_USER_ALREADY_LOGOUT\020"
    "\264\003\022(\n#NWPB_ERROR_INVALID_PROTOCOL_VERSIO"
    "N\020\265\003\022&\n!NWPB_ERROR_INVALID_BW_CONFIG_TYP"
    "E\020\266\003\022)\n$NWPB_ERROR_INVALID_BW_CONFIG_COM"
    "MAND\020\267\003\022%\n NWPB_ERROR_USER_DELETE_FORBID"
    "DEN\020\270\003\022%\n NWPB_ERROR_UNSUPPORT_CONFIG_NA"
    "ME\020\271\003\022$\n\037NWPB_ERROR_UNSUPPORT_COMMON_CMD"
    "\020\272\003\022\035\n\030NWPB_ERROR_USERNAME_NULL\020\273\003\022 \n\033NW"
    "PB_ERROR_SENSOR_NOT_EXIST\020\274\003\022%\n NWPB_ERR"
    "OR_INVALID_SEND_INTERVAL\020\275\003\022\"\n\035NWPB_ERRO"
    "R_ZERO_SEND_INTERVAL\020\276\003\022#\n\036NWPB_ERROR_IN"
    "VALID_INPUT_PARAM\020\277\003\022\'\n\"NWPB_ERROR_SEND_"
    "INTERVAL_TOO_SHORT\020\300\003\022&\n!NWPB_ERROR_SEND"
    "_INTERVAL_TOO_LONG\020\301\003\022\035\n\030NWPB_ERROR_INVA"
    "LID_NW_ID\020\302\003\022\037\n\032NWPB_ERROR_SESSION_TIMEO"
    "UT\020\303\003\022!\n\034NWPB_ERROR_SESSION_NOT_EXIST\020\304\003"
    "\022!\n\034NWPB_ERROR_NODE_NOT_REGISTER\020\305\003\022&\n!N"
    "WPB_ERROR_CHOOSE_LONGER_PASSWORD\020\306\003\022\036\n\031N"
    "WPB_ERROR_TOO_MANY_USERS\020\211\004\022\027\n\022NWPB_ERRO"
    "R_KICKOUT\020\212\004\022\034\n\027NWPB_ERROR_USER_DELETED\020"
    "\213\004\022!\n\034NWPB_ERROR_MSG_SERVICE_ERROR\020\214\004\022\'\n"
    "\"NWPB_ERROR_WSN_SERVICE_UNAVAILABLE\020\215\004\022!"
    "\n\034NWPB_ERROR_WSN_SERVICE_ERROR\020\216\004\022&\n!NWP"
    "B_ERROR_DB_SERVICE_UNAVAILABLE\020\217\004\022 \n\033NWP"
    "B_ERROR_DB_SERVICE_ERROR\020\220\004\022(\n#NWPB_ERRO"
    "R_USER_SERVICE_UNAVAILABLE\020\221\004\022\"\n\035NWPB_ER"
    "ROR_USER_SERVICE_ERROR\020\222\004\022\"\n\035NWPB_ERROR_"
    "UNSUPPORT_FUNCTION\020\223\004\022\037\n\032NWPB_ERROR_WSN_"
    "NET_TIMEOUT\020\224\004\022)\n$NWPB_ERROR_WSN_NODE_SE"
    "NSOR_NOT_READY\020\225\004\022*\n%NWPB_ERROR_SET_COMM"
    "AND_IN_PROCESSSING\020\226\004\022.\n)NWPB_ERROR_ONLY"
    "_SUPPORT_SET_ONE_THRESHOLD\020\227\004\022(\n#NWPB_ER"
    "ROR_WSN_NET_OPERATION_FAILED\020\230\004\022\035\n\030NWPB_"
    "ERROR_LOG_XML_ERROR\020\231\004\022#\n\036NWPB_ERROR_XML"
    "_OPERATION_ERROR\020\232\004\022\"\n\035NWPB_ERROR_SERVER"
    "_LOGIC_ERROR\020\233\004\022\036\n\031NWPB_ERROR_NODE_OPERA"
    "TION\020\234\004\022)\n$NWPB_ERROR_WAIT_OTHER_MAIN_OP"
    "ERATION\020\235\004\022 \n\033NWPB_ERROR_MAIN_NODE_FAILE"
    "D\020\236\004\022$\n\037NWPB_ERROR_MAIN_NODE_SET_FAILED\020"
    "\237\004\022%\n NWPB_ERROR_AUTOREG_UNREGISTERING\020\240"
    "\004\022!\n\034NWPB_ERROR_IPC_SERVICE_ERROR\020\241\004\022$\n\037"
    "NWPB_ERROR_WAIT_WIFI_CONNECTING\020\242\004\022)\n$NW"
    "PB_ERROR_GENERAL_OPERATION_TIMEOUT\020\243\004\022%\n"
    " NWPB_ERROR_VWLITE_CONNECT_FAILED\020\244\004\022!\n\034"
    "NWPB_ERROR_VWLITE_DISCONNECT\020\245\004\022#\n\036NWPB_"
    "ERROR_VWLITE_RESPONSE_BAD\020\246\004\022#\n\036NWPB_ERR"
    "OR_DEVICE_BINDING_FAIL\020\247\004\022(\n#NWPB_ERROR_"
    "DEVICE_BINDING_NO_VC_ACK\020\250\004\022(\n#NWPB_ERRO"
    "R_DEVICE_BINDING_NO_GW_ACK\020\251\004\022&\n!NWPB_ER"
    "ROR_DEVICE_RM_BINDING_FAIL\020\252\004\022#\n\036NWPB_ER"
    "ROR_DEVICE_UNKNOW_ERROR\020\253\004\"E\n\006Notify\022\017\n\007"
    "session\030\001 \002(\r\022\031\n\007command\030\002 \002(\0162\010.Command"
    "\022\017\n\007content\030\003 \001(\014\"X\n\tLoginRqst\022\021\n\tuser_n"
    "ame\030\001 \002(\t\022\017\n\007expires\030\002 \002(\r\022\031\n\007encrypt\030\003 "
    "\002(\0162\010.Encrypt\022\014\n\004data\030\004 \002(\014\"x\n\tLoginRsps"
    "\022\017\n\007session\030\001 \002(\r\022\017\n\007expires\030\002 \002(\r\022\r\n\005no"
    "des\030\003 \002(\r\022\020\n\010sessions\030\004 \002(\r\022\r\n\005nw_id\030\005 \002"
    "(\014\022\031\n\007encrypt\030\006 \002(\0162\010.Encrypt\"@\n\022ChangeP"
    "asswordRqst\022\024\n\014old_password\030\001 \002(\t\022\024\n\014new"
    "_password\030\002 \002(\t\".\n\rHeartbeatRqst\022\017\n\007expi"
    "res\030\001 \002(\r\022\014\n\004time\030\002 \002(\004\"U\n\rHeartbeatRsps"
    "\022\017\n\007expires\030\001 \002(\r\022\022\n\ncapability\030\002 \002(\r\022\r\n"
    "\005nodes\030\003 \002(\r\022\020\n\010sessions\030\004 \002(\r\"\212\001\n\014Regis"
    "terRqst\022\031\n\004type\030\001 \002(\0162\013.DeviceType\022\r\n\005nw"
    "_id\030\002 \002(\t\022\023\n\013manufactory\030\003 \002(\t\022\033\n\005model\030"
    "\004 \002(\0162\014.DeviceModel\022\r\n\005nodes\030\005 \002(\r\022\017\n\007se"
    "ssion\030\006 \002(\r\"-\n\014RegisterRsps\022\014\n\004time\030\001 \002("
    "\004\022\017\n\007expires\030\002 \002(\r\"\036\n\rGetNWInfoRqst\022\r\n\005n"
    "w_id\030\001 \002(\014\"\320\001\n\rGetNWInfoRsps\022\023\n\013manufact"
    "ory\030\001 \002(\t\022\033\n\005model\030\002 \002(\0162\014.DeviceModel\022\022"
    "\n\nnode_count\030\003 \002(\r\022\013\n\003_3G\030\004 \002(\t\022\017\n\007stora"
    "ge\030\005 \002(\t\022\r\n\005space\030\006 \002(\r\022\r\n\005nw_id\030\007 \002(\014\022\014"
    "\n\004band\030\010 \002(\t\022\020\n\010firmware\030\t \002(\t\022\020\n\010positi"
    "on\030\n \002(\t\022\013\n\003gps\030\013 \002(\t\"r\n\020SetAutoParamRqs"
    "t\022\016\n\006enable\030\001 \002(\r\022\n\n\002ip\030\002 \002(\r\022\014\n\004port\030\003 "
    "\002(\r\022\020\n\010username\030\004 \002(\t\022\020\n\010password\030\005 \002(\t\022"
    "\020\n\010interval\030\006 \002(\r\"r\n\020GetAutoParamRsps\022\016\n"
    "\006enable\030\001 \002(\r\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\r\022"
    "\020\n\010username\030\004 \002(\t\022\020\n\010password\030\005 \002(\t\022\020\n\010i"
    "nterval\030\006 \002(\r\"\?\n\rSetConfigRqst\022\031\n\004name\030\001"
    " \002(\0162\013.ConfigName\022\023\n\013config_file\030\002 \002(\t\"*"
    "\n\rGetConfigRqst\022\031\n\004name\030\001 \002(\0162\013.ConfigNa"
    "me\"$\n\rGetConfigRsps\022\023\n\013config_file\030\001 \002(\t"
    "\"o\n\014QueryLogRqst\022\026\n\004type\030\001 \002(\0162\010.LogType"
    "\022\022\n\nstart_time\030\002 \002(\004\022\020\n\010end_time\030\003 \002(\004\022\022"
    "\n\nstart_line\030\004 \002(\r\022\r\n\005count\030\005 \002(\r\">\n\005NWL"
    "og\022\014\n\004time\030\001 \002(\004\022\026\n\004type\030\002 \002(\0162\010.LogType"
    "\022\017\n\007message\030\003 \002(\t\"8\n\014QueryLogRsps\022\023\n\013tot"
    "al_count\030\001 \002(\r\022\023\n\003log\030\002 \003(\0132\006.NWLog\"I\n\rT"
    "imeSynchRqst\022\014\n\004time\030\001 \002(\004\022\n\n\002ip\030\002 \002(\t\022\014"
    "\n\004port\030\003 \002(\r\022\020\n\010revision\030\004 \002(\r\"+\n\nReboot"
    "Rqst\022\016\n\006reason\030\001 \002(\t\022\r\n\005delay\030\002 \002(\r\"M\n\017G"
    "etNodeListRqst\022\027\n\004type\030\001 \002(\0162\t.NodeType\022"
    "\022\n\nstart_line\030\002 \002(\r\022\r\n\005count\030\003 \002(\r\"F\n\017Ge"
    "tNodeListRsps\022\023\n\013total_count\030\001 \002(\r\022\036\n\nno"
    "de_entry\030\002 \003(\0132\n.NodeEntry\"\215\001\n\tNodeEntry"
    "\022\n\n\002id\030\001 \002(\014\022\016\n\006status\030\002 \002(\r\022\017\n\007sensor1\030"
    "\003 \002(\r\022\017\n\007sensor2\030\004 \002(\r\022\017\n\007sensor3\030\005 \002(\r\022"
    "\017\n\007sensor4\030\006 \002(\r\022\017\n\007sensor5\030\007 \002(\r\022\017\n\007sen"
    "sor6\030\010 \002(\r\"$\n\021GetNodeStatusRqst\022\017\n\007node_"
    "id\030\001 \002(\014\"-\n\021GetNodeStatusRsps\022\030\n\004node\030\001 "
    "\002(\0132\n.NodeEntry\"&\n\017GetTopologyRsps\022\023\n\004no"
    "de\030\001 \003(\0132\005.Node\"\\\n\004Node\022\014\n\004l_id\030\001 \002(\014\022\014\n"
    "\004s_id\030\002 \002(\t\022\r\n\005level\030\003 \002(\r\022\014\n\004time\030\004 \002(\004"
    "\022\033\n\006parent\030\005 \002(\0132\013.ParentNode\"Y\n\nParentN"
    "ode\022\014\n\004l_id\030\001 \002(\014\022\014\n\004s_id\030\002 \002(\t\022\r\n\005level"
    "\030\003 \002(\r\022\016\n\006status\030\004 \002(\r\022\020\n\010priority\030\005 \002(\r"
    "\"\371\001\n\030SubscribeNotificationNtf\0226\n\007message"
    "\030\001 \002(\0162%.SubscribeNotificationNtf.Messag"
    "eType\022\016\n\006param1\030\002 \002(\r\022\016\n\006param2\030\003 \002(\r\022\020\n"
    "\010str_msg1\030\004 \002(\t\022\020\n\010str_msg2\030\005 \002(\t\022\014\n\004tim"
    "e\030\006 \002(\004\"S\n\013MessageType\022\025\n\021NODE_STATE_CHA"
    "NGE\020\001\022\024\n\020MEMORY_CARD_FULL\020\002\022\027\n\023MEMORY_CA"
    "RD_ANOMALY\020\003\"<\n\021DeviceBindingRqst\022\024\n\014val"
    "vectrl_id\030\001 \002(\t\022\021\n\thomegw_id\030\002 \002(\t\">\n\023Rm"
    "DeviceBindingRqst\022\024\n\014valvectrl_id\030\001 \002(\t\022"
    "\021\n\thomegw_id\030\002 \002(\t\"_\n\030RequestNodeDataUpl"
    "oadNtf\022\017\n\007node_id\030\001 \002(\t\022\027\n\004type\030\002 \002(\0162\t."
    "DataType\022\031\n\004data\030\003 \003(\0132\013.SensorData\"[\n\nS"
    "ensorData\022\021\n\tsensor_no\030\001 \002(\r\022\014\n\004type\030\002 \002"
    "(\r\022\014\n\004data\030\003 \002(\002\022\020\n\010reserved\030\004 \001(\002\022\014\n\004ti"
    "me\030\005 \002(\004\"5\n\020NmpDataUploadNtf\022\017\n\007node_id\030"
    "\001 \002(\t\022\020\n\010nmp_data\030\002 \002(\014\"\032\n\013ContinueNtf\022\013"
    "\n\003seq\030\001 \002(\r\"J\n\023GetNodeRealDataRqst\022\017\n\007no"
    "de_id\030\001 \002(\014\022\021\n\tsensor_no\030\002 \002(\r\022\017\n\007timeou"
    "t\030\003 \002(\r\"\\\n\023GetNodeRealDataRsps\022\017\n\007node_i"
    "d\030\001 \002(\014\022\027\n\004type\030\002 \002(\0162\t.DataType\022\033\n\006s_da"
    "ta\030\003 \003(\0132\013.SensorData\"\373\001\n\024SetCommandToNo"
    "deRqst\022\017\n\007node_id\030\001 \002(\t\022*\n\003cmd\030\002 \002(\0162\035.S"
    "etCommandToNodeRqst.Command\022\020\n\010sub_type\030"
    "\003 \001(\r\022\034\n\tnode_data\030\004 \001(\0132\t.TypeData\022)\n\020s"
    "ensor_data_list\030\005 \003(\0132\017.SensorTypeData\"K"
    "\n\007Command\022\n\n\006ON_OFF\020\001\022\021\n\rSET_THRESHOLD\020\002"
    "\022\020\n\014SET_INTERVAL\020\003\022\017\n\013DATA_SWITCH\020\004\"&\n\010T"
    "ypeData\022\014\n\004type\030\001 \001(\r\022\014\n\004data\030\002 \002(\002\"\?\n\016S"
    "ensorTypeData\022\021\n\tsensor_no\030\001 \002(\r\022\014\n\004type"
    "\030\002 \001(\r\022\014\n\004data\030\003 \002(\002\"\266\001\n\023GetNodeSettings"
    "Rqst\022\017\n\007node_id\030\001 \002(\t\022)\n\003cmd\030\002 \002(\0162\034.Get"
    "NodeSettingsRqst.Command\022\020\n\010sub_type\030\003 \001"
    "(\r\022\021\n\tsensor_no\030\004 \002(\r\">\n\007Command\022\016\n\nGET_"
    "ON_OFF\020\001\022\021\n\rGET_THRESHOLD\020\002\022\020\n\014GET_INTER"
    "VAL\020\003\"^\n\023GetNodeSettingsRsps\022\034\n\tnode_dat"
    "a\030\001 \001(\0132\t.TypeData\022)\n\020sensor_data_list\030\002"
    " \003(\0132\017.SensorTypeData\"Q\n\032GetUpDisconCach"
    "edAlarmRqst\022\022\n\nbegin_time\030\001 \002(\004\022\020\n\010end_t"
    "ime\030\002 \002(\004\022\r\n\005count\030\003 \002(\r\"<\n\032GetUpDisconC"
    "achedAlarmRsps\022\036\n\004data\030\001 \003(\0132\020.CachedAla"
    "rmData\"|\n\017CachedAlarmData\022\017\n\007node_id\030\001 \002"
    "(\014\022\021\n\tsensor_no\030\002 \002(\r\022\027\n\004type\030\003 \002(\0162\t.Da"
    "taType\022\014\n\004data\030\004 \002(\002\022\020\n\010reserved\030\005 \001(\r\022\014"
    "\n\004time\030\006 \002(\004\"3\n\030SubscribeAllNodeDataRqst"
    "\022\027\n\004type\030\001 \002(\0162\t.DataType\"0\n\025CancelAllNo"
    "deDataRqst\022\027\n\004type\030\001 \002(\0162\t.DataType\"S\n\030B"
    "atSubscribeNodeDataRqst\022\027\n\004type\030\001 \002(\0162\t."
    "DataType\022\r\n\005count\030\002 \002(\r\022\017\n\007node_id\030\003 \003(\014"
    "\"P\n\025BatCancelNodeDataRqst\022\027\n\004type\030\001 \002(\0162"
    "\t.DataType\022\r\n\005count\030\002 \002(\r\022\017\n\007node_id\030\003 \003"
    "(\014\"\205\001\n\022BlackWhiteNodeRqst\022\027\n\004type\030\001 \002(\0162"
    "\t.NodeType\022(\n\003cmd\030\002 \002(\0162\033.BlackWhiteNode"
    "Rqst.Command\022\017\n\007node_id\030\003 \003(\t\"\033\n\007Command"
    "\022\007\n\003ADD\020\001\022\007\n\003DEL\020\002\",\n\021GetBlackWhiteRqst\022"
    "\027\n\004type\030\001 \002(\0162\t.NodeType\"3\n\021GetBlackWhit"
    "eRsps\022\r\n\005count\030\001 \002(\r\022\017\n\007node_id\030\002 \003(\t\"4\n"
    "\024DownloadFirmwareRqst\022\017\n\007node_id\030\001 \002(\t\022\013"
    "\n\003url\030\002 \002(\t\">\n\024DownloadFirmwareRsps\022&\n\016r"
    "eceive_status\030\001 \002(\0162\016.ReceiveStatus\"J\n\023D"
    "ownloadFirmwareNtf\022\013\n\003seq\030\001 \002(\r\022&\n\016execu"
    "te_status\030\002 \002(\0162\016.ExecuteStatus\"(\n\021Upgra"
    "deModuleRqst\022\023\n\013module_name\030\001 \002(\t\";\n\021Upg"
    "radeModuleRsps\022&\n\016receive_status\030\001 \002(\0162\016"
    ".ReceiveStatus\"G\n\020UpgradeModuleNtf\022\013\n\003se"
    "q\030\001 \002(\r\022&\n\016execute_status\030\002 \002(\0162\016.Execut"
    "eStatus\"2\n\014TerminalPort\022\020\n\010port_num\030\001 \002("
    "\r\022\020\n\010cmd_type\030\002 \002(\r\"B\n\016TerminalStatus\022\020\n"
    "\010port_num\030\001 \002(\r\022\020\n\010cmd_type\030\002 \002(\r\022\014\n\004dat"
    "a\030\003 \002(\014\"E\n\025GetTerminalStatusRqst\022\017\n\007node"
    "_id\030\001 \002(\t\022\033\n\004port\030\002 \003(\0132\r.TerminalPort\"I"
    "\n\025GetTerminalStatusRsps\022\017\n\007node_id\030\001 \002(\t"
    "\022\037\n\006status\030\002 \003(\0132\017.TerminalStatus\"\?\n\013Ter"
    "minalCmd\022\020\n\010port_num\030\001 \002(\r\022\020\n\010cmd_type\030\002"
    " \002(\r\022\014\n\004data\030\003 \002(\014\"I\n\026SetTerminalCtrlCmd"
    "Rqst\022\017\n\007node_id\030\001 \002(\t\022\036\n\010cmd_data\030\002 \003(\0132"
    "\014.TerminalCmd*\273\006\n\007Command\022\t\n\005LOGIN\020\001\022\n\n\006"
    "LOGOUT\020\002\022\023\n\017CHANGE_PASSWORD\020\003\022\026\n\022CHANGE_"
    "SESSION_KEY\020\004\022\014\n\010HEARBEAT\020\005\022\014\n\010REGISTER\020"
    "\006\022\016\n\nUNREGISTER\020\007\022\016\n\nGET_NWINFO\020\010\022\021\n\rGET"
    "_NODE_LIST\020\t\022\020\n\014GET_TOPOLOGY\020\n\022\022\n\016SET_AU"
    "TO_PARAM\020\013\022\022\n\016GET_AUTO_PARAM\020\014\022\016\n\nTIME_S"
    "YNCH\020\r\022\032\n\026SUBSCRIBE_NOTIFICATION\020\016\022\n\n\006RE"
    "BOOT\020\017\022\016\n\nGET_CONFIG\020\020\022\016\n\nSET_CONFIG\020\021\022\r"
    "\n\tQUERY_LOG\020\022\022\024\n\020BLACK_WHITE_NODE\020\023\022\023\n\017G"
    "ET_BLACK_WHITE\020\024\022\033\n\027SUBSCRIBE_ALL_NODE_D"
    "ATA\020\025\022\030\n\024CANCEL_ALL_NODE_DATA\020\026\022\033\n\027BAT_S"
    "UBSCRIBE_NODE_DATA\020\027\022\030\n\024BAT_CANCEL_NODE_"
    "DATA\020\030\022\034\n\030REQUEST_NODE_DATA_UPLOAD\020\031\022\025\n\021"
    "GET_NODE_REALDATA\020\032\022\036\n\032GET_UP_DISCON_CAC"
    "HED_ALARM\020\033\022\030\n\024GET_NODE_CACHED_DATA\020\034\022\027\n"
    "\023SET_COMMAND_TO_NODE\020\035\022\025\n\021GET_NODE_SETTI"
    "NGS\020\036\022\023\n\017GET_NODE_STATUS\020\037\022\023\n\017NMP_DATA_U"
    "PLOAD\020\"\022\022\n\016DEVICE_BINDING\020#\022\027\n\023GET_TERMI"
    "NAL_STATUS\020$\022\031\n\025SET_TERMINAL_CTRL_CMD\020%\022"
    "\031\n\025REMOVE_DEVICE_BINDING\020&\022\025\n\021DOWNLOAD_F"
    "IRMWARE\020 \022\022\n\016UPGRADE_MODULE\020!\022\014\n\010CONTINU"
    "E\020.*8\n\007Encrypt\022\010\n\004NONE\020\001\022\n\n\006AES_64\020\002\022\013\n\007"
    "AES_128\020\003\022\n\n\006TEA_16\020\004*\024\n\nDeviceType\022\006\n\002N"
    "W\020\001*\025\n\013DeviceModel\022\006\n\002M1\020\001*E\n\nConfigName"
    "\022\007\n\003LAN\020\001\022\010\n\004WLAN\020\002\022\010\n\004WIFI\020\003\022\010\n\004TIME\020\004\022"
    "\007\n\003WSN\020\005\022\007\n\003CAN\020\006*\037\n\006Enable\022\013\n\007DISABLE\020\000"
    "\022\010\n\004ABLE\020\001*-\n\010NodeType\022\t\n\005BLACK\020\001\022\t\n\005WHI"
    "TE\020\002\022\013\n\007UNADDED\020\003*(\n\010DataType\022\007\n\003ALL\020\000\022\010"
    "\n\004REAL\020\001\022\t\n\005ALARM\020\002*K\n\007LogType\022\014\n\010ALL_TY"
    "PE\020\001\022\014\n\010SECURITY\020\002\022\n\n\006DEVICE\020\003\022\n\n\006SYSTEM"
    "\020\004\022\014\n\010BUSINESS\020\005*2\n\rReceiveStatus\022\016\n\nREC"
    "EIVE_OK\020\001\022\021\n\rRECEIVE_ERROR\020\002*W\n\rExecuteS"
    "tatus\022\017\n\013DOWNLOAD_OK\020\001\022\022\n\016DOWNLOAD_ERROR"
    "\020\002\022\021\n\rUPGRADE_ERROR\020\003\022\016\n\nUPGRADE_OK\020\004", 9517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nwpb.proto", &protobuf_RegisterTypes);
  NWPb::default_instance_ = new NWPb();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Notify::default_instance_ = new Notify();
  LoginRqst::default_instance_ = new LoginRqst();
  LoginRsps::default_instance_ = new LoginRsps();
  ChangePasswordRqst::default_instance_ = new ChangePasswordRqst();
  HeartbeatRqst::default_instance_ = new HeartbeatRqst();
  HeartbeatRsps::default_instance_ = new HeartbeatRsps();
  RegisterRqst::default_instance_ = new RegisterRqst();
  RegisterRsps::default_instance_ = new RegisterRsps();
  GetNWInfoRqst::default_instance_ = new GetNWInfoRqst();
  GetNWInfoRsps::default_instance_ = new GetNWInfoRsps();
  SetAutoParamRqst::default_instance_ = new SetAutoParamRqst();
  GetAutoParamRsps::default_instance_ = new GetAutoParamRsps();
  SetConfigRqst::default_instance_ = new SetConfigRqst();
  GetConfigRqst::default_instance_ = new GetConfigRqst();
  GetConfigRsps::default_instance_ = new GetConfigRsps();
  QueryLogRqst::default_instance_ = new QueryLogRqst();
  NWLog::default_instance_ = new NWLog();
  QueryLogRsps::default_instance_ = new QueryLogRsps();
  TimeSynchRqst::default_instance_ = new TimeSynchRqst();
  RebootRqst::default_instance_ = new RebootRqst();
  GetNodeListRqst::default_instance_ = new GetNodeListRqst();
  GetNodeListRsps::default_instance_ = new GetNodeListRsps();
  NodeEntry::default_instance_ = new NodeEntry();
  GetNodeStatusRqst::default_instance_ = new GetNodeStatusRqst();
  GetNodeStatusRsps::default_instance_ = new GetNodeStatusRsps();
  GetTopologyRsps::default_instance_ = new GetTopologyRsps();
  Node::default_instance_ = new Node();
  ParentNode::default_instance_ = new ParentNode();
  SubscribeNotificationNtf::default_instance_ = new SubscribeNotificationNtf();
  DeviceBindingRqst::default_instance_ = new DeviceBindingRqst();
  RmDeviceBindingRqst::default_instance_ = new RmDeviceBindingRqst();
  RequestNodeDataUploadNtf::default_instance_ = new RequestNodeDataUploadNtf();
  SensorData::default_instance_ = new SensorData();
  NmpDataUploadNtf::default_instance_ = new NmpDataUploadNtf();
  ContinueNtf::default_instance_ = new ContinueNtf();
  GetNodeRealDataRqst::default_instance_ = new GetNodeRealDataRqst();
  GetNodeRealDataRsps::default_instance_ = new GetNodeRealDataRsps();
  SetCommandToNodeRqst::default_instance_ = new SetCommandToNodeRqst();
  TypeData::default_instance_ = new TypeData();
  SensorTypeData::default_instance_ = new SensorTypeData();
  GetNodeSettingsRqst::default_instance_ = new GetNodeSettingsRqst();
  GetNodeSettingsRsps::default_instance_ = new GetNodeSettingsRsps();
  GetUpDisconCachedAlarmRqst::default_instance_ = new GetUpDisconCachedAlarmRqst();
  GetUpDisconCachedAlarmRsps::default_instance_ = new GetUpDisconCachedAlarmRsps();
  CachedAlarmData::default_instance_ = new CachedAlarmData();
  SubscribeAllNodeDataRqst::default_instance_ = new SubscribeAllNodeDataRqst();
  CancelAllNodeDataRqst::default_instance_ = new CancelAllNodeDataRqst();
  BatSubscribeNodeDataRqst::default_instance_ = new BatSubscribeNodeDataRqst();
  BatCancelNodeDataRqst::default_instance_ = new BatCancelNodeDataRqst();
  BlackWhiteNodeRqst::default_instance_ = new BlackWhiteNodeRqst();
  GetBlackWhiteRqst::default_instance_ = new GetBlackWhiteRqst();
  GetBlackWhiteRsps::default_instance_ = new GetBlackWhiteRsps();
  DownloadFirmwareRqst::default_instance_ = new DownloadFirmwareRqst();
  DownloadFirmwareRsps::default_instance_ = new DownloadFirmwareRsps();
  DownloadFirmwareNtf::default_instance_ = new DownloadFirmwareNtf();
  UpgradeModuleRqst::default_instance_ = new UpgradeModuleRqst();
  UpgradeModuleRsps::default_instance_ = new UpgradeModuleRsps();
  UpgradeModuleNtf::default_instance_ = new UpgradeModuleNtf();
  TerminalPort::default_instance_ = new TerminalPort();
  TerminalStatus::default_instance_ = new TerminalStatus();
  GetTerminalStatusRqst::default_instance_ = new GetTerminalStatusRqst();
  GetTerminalStatusRsps::default_instance_ = new GetTerminalStatusRsps();
  TerminalCmd::default_instance_ = new TerminalCmd();
  SetTerminalCtrlCmdRqst::default_instance_ = new SetTerminalCtrlCmdRqst();
  NWPb::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Notify::default_instance_->InitAsDefaultInstance();
  LoginRqst::default_instance_->InitAsDefaultInstance();
  LoginRsps::default_instance_->InitAsDefaultInstance();
  ChangePasswordRqst::default_instance_->InitAsDefaultInstance();
  HeartbeatRqst::default_instance_->InitAsDefaultInstance();
  HeartbeatRsps::default_instance_->InitAsDefaultInstance();
  RegisterRqst::default_instance_->InitAsDefaultInstance();
  RegisterRsps::default_instance_->InitAsDefaultInstance();
  GetNWInfoRqst::default_instance_->InitAsDefaultInstance();
  GetNWInfoRsps::default_instance_->InitAsDefaultInstance();
  SetAutoParamRqst::default_instance_->InitAsDefaultInstance();
  GetAutoParamRsps::default_instance_->InitAsDefaultInstance();
  SetConfigRqst::default_instance_->InitAsDefaultInstance();
  GetConfigRqst::default_instance_->InitAsDefaultInstance();
  GetConfigRsps::default_instance_->InitAsDefaultInstance();
  QueryLogRqst::default_instance_->InitAsDefaultInstance();
  NWLog::default_instance_->InitAsDefaultInstance();
  QueryLogRsps::default_instance_->InitAsDefaultInstance();
  TimeSynchRqst::default_instance_->InitAsDefaultInstance();
  RebootRqst::default_instance_->InitAsDefaultInstance();
  GetNodeListRqst::default_instance_->InitAsDefaultInstance();
  GetNodeListRsps::default_instance_->InitAsDefaultInstance();
  NodeEntry::default_instance_->InitAsDefaultInstance();
  GetNodeStatusRqst::default_instance_->InitAsDefaultInstance();
  GetNodeStatusRsps::default_instance_->InitAsDefaultInstance();
  GetTopologyRsps::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  ParentNode::default_instance_->InitAsDefaultInstance();
  SubscribeNotificationNtf::default_instance_->InitAsDefaultInstance();
  DeviceBindingRqst::default_instance_->InitAsDefaultInstance();
  RmDeviceBindingRqst::default_instance_->InitAsDefaultInstance();
  RequestNodeDataUploadNtf::default_instance_->InitAsDefaultInstance();
  SensorData::default_instance_->InitAsDefaultInstance();
  NmpDataUploadNtf::default_instance_->InitAsDefaultInstance();
  ContinueNtf::default_instance_->InitAsDefaultInstance();
  GetNodeRealDataRqst::default_instance_->InitAsDefaultInstance();
  GetNodeRealDataRsps::default_instance_->InitAsDefaultInstance();
  SetCommandToNodeRqst::default_instance_->InitAsDefaultInstance();
  TypeData::default_instance_->InitAsDefaultInstance();
  SensorTypeData::default_instance_->InitAsDefaultInstance();
  GetNodeSettingsRqst::default_instance_->InitAsDefaultInstance();
  GetNodeSettingsRsps::default_instance_->InitAsDefaultInstance();
  GetUpDisconCachedAlarmRqst::default_instance_->InitAsDefaultInstance();
  GetUpDisconCachedAlarmRsps::default_instance_->InitAsDefaultInstance();
  CachedAlarmData::default_instance_->InitAsDefaultInstance();
  SubscribeAllNodeDataRqst::default_instance_->InitAsDefaultInstance();
  CancelAllNodeDataRqst::default_instance_->InitAsDefaultInstance();
  BatSubscribeNodeDataRqst::default_instance_->InitAsDefaultInstance();
  BatCancelNodeDataRqst::default_instance_->InitAsDefaultInstance();
  BlackWhiteNodeRqst::default_instance_->InitAsDefaultInstance();
  GetBlackWhiteRqst::default_instance_->InitAsDefaultInstance();
  GetBlackWhiteRsps::default_instance_->InitAsDefaultInstance();
  DownloadFirmwareRqst::default_instance_->InitAsDefaultInstance();
  DownloadFirmwareRsps::default_instance_->InitAsDefaultInstance();
  DownloadFirmwareNtf::default_instance_->InitAsDefaultInstance();
  UpgradeModuleRqst::default_instance_->InitAsDefaultInstance();
  UpgradeModuleRsps::default_instance_->InitAsDefaultInstance();
  UpgradeModuleNtf::default_instance_->InitAsDefaultInstance();
  TerminalPort::default_instance_->InitAsDefaultInstance();
  TerminalStatus::default_instance_->InitAsDefaultInstance();
  GetTerminalStatusRqst::default_instance_->InitAsDefaultInstance();
  GetTerminalStatusRsps::default_instance_->InitAsDefaultInstance();
  TerminalCmd::default_instance_->InitAsDefaultInstance();
  SetTerminalCtrlCmdRqst::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nwpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nwpb_2eproto {
  StaticDescriptorInitializer_nwpb_2eproto() {
    protobuf_AddDesc_nwpb_2eproto();
  }
} static_descriptor_initializer_nwpb_2eproto_;
const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}
bool Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 46:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Encrypt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Encrypt_descriptor_;
}
bool Encrypt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceModel_descriptor_;
}
bool DeviceModel_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfigName_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigName_descriptor_;
}
bool ConfigName_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Enable_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Enable_descriptor_;
}
bool Enable_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeType_descriptor_;
}
bool NodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogType_descriptor_;
}
bool LogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReceiveStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveStatus_descriptor_;
}
bool ReceiveStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExecuteStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteStatus_descriptor_;
}
bool ExecuteStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NWPb::kRqstFieldNumber;
const int NWPb::kRspsFieldNumber;
const int NWPb::kNtfFieldNumber;
#endif  // !_MSC_VER

NWPb::NWPb()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NWPb)
}

void NWPb::InitAsDefaultInstance() {
  rqst_ = const_cast< ::Request*>(&::Request::default_instance());
  rsps_ = const_cast< ::Response*>(&::Response::default_instance());
  ntf_ = const_cast< ::Notify*>(&::Notify::default_instance());
}

NWPb::NWPb(const NWPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NWPb)
}

void NWPb::SharedCtor() {
  _cached_size_ = 0;
  rqst_ = NULL;
  rsps_ = NULL;
  ntf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NWPb::~NWPb() {
  // @@protoc_insertion_point(destructor:NWPb)
  SharedDtor();
}

void NWPb::SharedDtor() {
  if (this != default_instance_) {
    delete rqst_;
    delete rsps_;
    delete ntf_;
  }
}

void NWPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NWPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NWPb_descriptor_;
}

const NWPb& NWPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

NWPb* NWPb::default_instance_ = NULL;

NWPb* NWPb::New() const {
  return new NWPb;
}

void NWPb::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_rqst()) {
      if (rqst_ != NULL) rqst_->::Request::Clear();
    }
    if (has_rsps()) {
      if (rsps_ != NULL) rsps_->::Response::Clear();
    }
    if (has_ntf()) {
      if (ntf_ != NULL) ntf_->::Notify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NWPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NWPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Request rqst = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rqst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rsps;
        break;
      }

      // optional .Response rsps = 2;
      case 2: {
        if (tag == 18) {
         parse_rsps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ntf;
        break;
      }

      // optional .Notify ntf = 3;
      case 3: {
        if (tag == 26) {
         parse_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ntf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NWPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NWPb)
  return false;
#undef DO_
}

void NWPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NWPb)
  // optional .Request rqst = 1;
  if (has_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rqst(), output);
  }

  // optional .Response rsps = 2;
  if (has_rsps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rsps(), output);
  }

  // optional .Notify ntf = 3;
  if (has_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ntf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NWPb)
}

::google::protobuf::uint8* NWPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NWPb)
  // optional .Request rqst = 1;
  if (has_rqst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rqst(), target);
  }

  // optional .Response rsps = 2;
  if (has_rsps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rsps(), target);
  }

  // optional .Notify ntf = 3;
  if (has_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ntf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NWPb)
  return target;
}

int NWPb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Request rqst = 1;
    if (has_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rqst());
    }

    // optional .Response rsps = 2;
    if (has_rsps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsps());
    }

    // optional .Notify ntf = 3;
    if (has_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ntf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NWPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NWPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NWPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NWPb::MergeFrom(const NWPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rqst()) {
      mutable_rqst()->::Request::MergeFrom(from.rqst());
    }
    if (from.has_rsps()) {
      mutable_rsps()->::Response::MergeFrom(from.rsps());
    }
    if (from.has_ntf()) {
      mutable_ntf()->::Notify::MergeFrom(from.ntf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NWPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NWPb::CopyFrom(const NWPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NWPb::IsInitialized() const {

  if (has_rqst()) {
    if (!this->rqst().IsInitialized()) return false;
  }
  if (has_rsps()) {
    if (!this->rsps().IsInitialized()) return false;
  }
  if (has_ntf()) {
    if (!this->ntf().IsInitialized()) return false;
  }
  return true;
}

void NWPb::Swap(NWPb* other) {
  if (other != this) {
    std::swap(rqst_, other->rqst_);
    std::swap(rsps_, other->rsps_);
    std::swap(ntf_, other->ntf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NWPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NWPb_descriptor_;
  metadata.reflection = NWPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kSessionFieldNumber;
const int Request::kSequenceFieldNumber;
const int Request::kCommandFieldNumber;
const int Request::kContentFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  sequence_ = 0u;
  command_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(session_, sequence_);
    command_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // required uint32 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_command;
        break;
      }

      // required .Command command = 3;
      case 3: {
        if (tag == 24) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Command_IsValid(value)) {
            set_command(static_cast< ::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request)
  // required uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // required uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // required .Command command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->command(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request)
  // required uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // required uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // required .Command command = 3;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->command(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // required uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required .Command command = 3;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(sequence_, other->sequence_);
    std::swap(command_, other->command_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Error_descriptor_;
}
bool Response_Error_IsValid(int value) {
  switch(value) {
    case 200:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_Error Response::NWPB_ERROR_OK;
const Response_Error Response::NWPB_ERROR_DECRYPT_FAILED;
const Response_Error Response::NWPB_ERROR_USER_PASSWORD_INVALID;
const Response_Error Response::NWPB_ERROR_USER_INVALID_STATUS;
const Response_Error Response::NWPB_ERROR_USER_NOT_EXIST;
const Response_Error Response::NWPB_ERROR_USER_NOT_LOGIN;
const Response_Error Response::NWPB_ERROR_UNSUPPORT_SUBSCRIBE_TYPE;
const Response_Error Response::NWPB_ERROR_INVALID_TIME_VALUE;
const Response_Error Response::NWPB_ERROR_UNSUPPORT_NODELIST_GET_TYPE;
const Response_Error Response::NWPB_ERROR_UNSUPPORT_ENCRYPT_TYPE;
const Response_Error Response::NWPB_ERROR_NODE_UNSUPPORT_COMMAND;
const Response_Error Response::NWPB_ERROR_INVALID_SENSOR_NO;
const Response_Error Response::NWPB_ERROR_INVALID_NODE_ID;
const Response_Error Response::NWPB_ERROR_NONE_THRESHOLD_DATA;
const Response_Error Response::NWPB_ERROR_USER_ALREADY_EXIST;
const Response_Error Response::NWPB_ERROR_WRONG_OLD_PASSWORD;
const Response_Error Response::NWPB_ERROR_USER_ALREADY_LOGOUT;
const Response_Error Response::NWPB_ERROR_INVALID_PROTOCOL_VERSION;
const Response_Error Response::NWPB_ERROR_INVALID_BW_CONFIG_TYPE;
const Response_Error Response::NWPB_ERROR_INVALID_BW_CONFIG_COMMAND;
const Response_Error Response::NWPB_ERROR_USER_DELETE_FORBIDDEN;
const Response_Error Response::NWPB_ERROR_UNSUPPORT_CONFIG_NAME;
const Response_Error Response::NWPB_ERROR_UNSUPPORT_COMMON_CMD;
const Response_Error Response::NWPB_ERROR_USERNAME_NULL;
const Response_Error Response::NWPB_ERROR_SENSOR_NOT_EXIST;
const Response_Error Response::NWPB_ERROR_INVALID_SEND_INTERVAL;
const Response_Error Response::NWPB_ERROR_ZERO_SEND_INTERVAL;
const Response_Error Response::NWPB_ERROR_INVALID_INPUT_PARAM;
const Response_Error Response::NWPB_ERROR_SEND_INTERVAL_TOO_SHORT;
const Response_Error Response::NWPB_ERROR_SEND_INTERVAL_TOO_LONG;
const Response_Error Response::NWPB_ERROR_INVALID_NW_ID;
const Response_Error Response::NWPB_ERROR_SESSION_TIMEOUT;
const Response_Error Response::NWPB_ERROR_SESSION_NOT_EXIST;
const Response_Error Response::NWPB_ERROR_NODE_NOT_REGISTER;
const Response_Error Response::NWPB_ERROR_CHOOSE_LONGER_PASSWORD;
const Response_Error Response::NWPB_ERROR_TOO_MANY_USERS;
const Response_Error Response::NWPB_ERROR_KICKOUT;
const Response_Error Response::NWPB_ERROR_USER_DELETED;
const Response_Error Response::NWPB_ERROR_MSG_SERVICE_ERROR;
const Response_Error Response::NWPB_ERROR_WSN_SERVICE_UNAVAILABLE;
const Response_Error Response::NWPB_ERROR_WSN_SERVICE_ERROR;
const Response_Error Response::NWPB_ERROR_DB_SERVICE_UNAVAILABLE;
const Response_Error Response::NWPB_ERROR_DB_SERVICE_ERROR;
const Response_Error Response::NWPB_ERROR_USER_SERVICE_UNAVAILABLE;
const Response_Error Response::NWPB_ERROR_USER_SERVICE_ERROR;
const Response_Error Response::NWPB_ERROR_UNSUPPORT_FUNCTION;
const Response_Error Response::NWPB_ERROR_WSN_NET_TIMEOUT;
const Response_Error Response::NWPB_ERROR_WSN_NODE_SENSOR_NOT_READY;
const Response_Error Response::NWPB_ERROR_SET_COMMAND_IN_PROCESSSING;
const Response_Error Response::NWPB_ERROR_ONLY_SUPPORT_SET_ONE_THRESHOLD;
const Response_Error Response::NWPB_ERROR_WSN_NET_OPERATION_FAILED;
const Response_Error Response::NWPB_ERROR_LOG_XML_ERROR;
const Response_Error Response::NWPB_ERROR_XML_OPERATION_ERROR;
const Response_Error Response::NWPB_ERROR_SERVER_LOGIC_ERROR;
const Response_Error Response::NWPB_ERROR_NODE_OPERATION;
const Response_Error Response::NWPB_ERROR_WAIT_OTHER_MAIN_OPERATION;
const Response_Error Response::NWPB_ERROR_MAIN_NODE_FAILED;
const Response_Error Response::NWPB_ERROR_MAIN_NODE_SET_FAILED;
const Response_Error Response::NWPB_ERROR_AUTOREG_UNREGISTERING;
const Response_Error Response::NWPB_ERROR_IPC_SERVICE_ERROR;
const Response_Error Response::NWPB_ERROR_WAIT_WIFI_CONNECTING;
const Response_Error Response::NWPB_ERROR_GENERAL_OPERATION_TIMEOUT;
const Response_Error Response::NWPB_ERROR_VWLITE_CONNECT_FAILED;
const Response_Error Response::NWPB_ERROR_VWLITE_DISCONNECT;
const Response_Error Response::NWPB_ERROR_VWLITE_RESPONSE_BAD;
const Response_Error Response::NWPB_ERROR_DEVICE_BINDING_FAIL;
const Response_Error Response::NWPB_ERROR_DEVICE_BINDING_NO_VC_ACK;
const Response_Error Response::NWPB_ERROR_DEVICE_BINDING_NO_GW_ACK;
const Response_Error Response::NWPB_ERROR_DEVICE_RM_BINDING_FAIL;
const Response_Error Response::NWPB_ERROR_DEVICE_UNKNOW_ERROR;
const Response_Error Response::Error_MIN;
const Response_Error Response::Error_MAX;
const int Response::Error_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response::kSessionFieldNumber;
const int Response::kSequenceFieldNumber;
const int Response::kCommandFieldNumber;
const int Response::kErrFieldNumber;
const int Response::kContentFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  sequence_ = 0u;
  command_ = 1;
  err_ = 200;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(session_, sequence_);
    command_ = 1;
    err_ = 200;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // required uint32 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_command;
        break;
      }

      // required .Command command = 3;
      case 3: {
        if (tag == 24) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Command_IsValid(value)) {
            set_command(static_cast< ::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_err;
        break;
      }

      // required .Response.Error err = 4;
      case 4: {
        if (tag == 32) {
         parse_err:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Response_Error_IsValid(value)) {
            set_err(static_cast< ::Response_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional bytes content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Response)
  // required uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // required uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // required .Command command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->command(), output);
  }

  // required .Response.Error err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->err(), output);
  }

  // optional bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Response)
  // required uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // required uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // required .Command command = 3;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->command(), target);
  }

  // required .Response.Error err = 4;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->err(), target);
  }

  // optional bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // required uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required .Command command = 3;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // required .Response.Error err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
    }

    // optional bytes content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(sequence_, other->sequence_);
    std::swap(command_, other->command_);
    std::swap(err_, other->err_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Notify::kSessionFieldNumber;
const int Notify::kCommandFieldNumber;
const int Notify::kContentFieldNumber;
#endif  // !_MSC_VER

Notify::Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Notify)
}

void Notify::InitAsDefaultInstance() {
}

Notify::Notify(const Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Notify)
}

void Notify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  command_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notify::~Notify() {
  // @@protoc_insertion_point(destructor:Notify)
  SharedDtor();
}

void Notify::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notify_descriptor_;
}

const Notify& Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

Notify* Notify::default_instance_ = NULL;

Notify* Notify::New() const {
  return new Notify;
}

void Notify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    session_ = 0u;
    command_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command;
        break;
      }

      // required .Command command = 2;
      case 2: {
        if (tag == 16) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Command_IsValid(value)) {
            set_command(static_cast< ::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Notify)
  return false;
#undef DO_
}

void Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Notify)
  // required uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // required .Command command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command(), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Notify)
}

::google::protobuf::uint8* Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Notify)
  // required uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // required .Command command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command(), target);
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Notify)
  return target;
}

int Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // required .Command command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notify::MergeFrom(const Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notify::CopyFrom(const Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Notify::Swap(Notify* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(command_, other->command_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notify_descriptor_;
  metadata.reflection = Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRqst::kUserNameFieldNumber;
const int LoginRqst::kExpiresFieldNumber;
const int LoginRqst::kEncryptFieldNumber;
const int LoginRqst::kDataFieldNumber;
#endif  // !_MSC_VER

LoginRqst::LoginRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRqst)
}

void LoginRqst::InitAsDefaultInstance() {
}

LoginRqst::LoginRqst(const LoginRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginRqst)
}

void LoginRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expires_ = 0u;
  encrypt_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRqst::~LoginRqst() {
  // @@protoc_insertion_point(destructor:LoginRqst)
  SharedDtor();
}

void LoginRqst::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LoginRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRqst_descriptor_;
}

const LoginRqst& LoginRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

LoginRqst* LoginRqst::default_instance_ = NULL;

LoginRqst* LoginRqst::New() const {
  return new LoginRqst;
}

void LoginRqst::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    expires_ = 0u;
    encrypt_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expires;
        break;
      }

      // required uint32 expires = 2;
      case 2: {
        if (tag == 16) {
         parse_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_encrypt;
        break;
      }

      // required .Encrypt encrypt = 3;
      case 3: {
        if (tag == 24) {
         parse_encrypt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Encrypt_IsValid(value)) {
            set_encrypt(static_cast< ::Encrypt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRqst)
  return false;
#undef DO_
}

void LoginRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRqst)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // required uint32 expires = 2;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expires(), output);
  }

  // required .Encrypt encrypt = 3;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encrypt(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRqst)
}

::google::protobuf::uint8* LoginRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRqst)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required uint32 expires = 2;
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expires(), target);
  }

  // required .Encrypt encrypt = 3;
  if (has_encrypt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->encrypt(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRqst)
  return target;
}

int LoginRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required uint32 expires = 2;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }

    // required .Encrypt encrypt = 3;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encrypt());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRqst::MergeFrom(const LoginRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRqst::CopyFrom(const LoginRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginRqst::Swap(LoginRqst* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(expires_, other->expires_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRqst_descriptor_;
  metadata.reflection = LoginRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsps::kSessionFieldNumber;
const int LoginRsps::kExpiresFieldNumber;
const int LoginRsps::kNodesFieldNumber;
const int LoginRsps::kSessionsFieldNumber;
const int LoginRsps::kNwIdFieldNumber;
const int LoginRsps::kEncryptFieldNumber;
#endif  // !_MSC_VER

LoginRsps::LoginRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRsps)
}

void LoginRsps::InitAsDefaultInstance() {
}

LoginRsps::LoginRsps(const LoginRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginRsps)
}

void LoginRsps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_ = 0u;
  expires_ = 0u;
  nodes_ = 0u;
  sessions_ = 0u;
  nw_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsps::~LoginRsps() {
  // @@protoc_insertion_point(destructor:LoginRsps)
  SharedDtor();
}

void LoginRsps::SharedDtor() {
  if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nw_id_;
  }
  if (this != default_instance_) {
  }
}

void LoginRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRsps_descriptor_;
}

const LoginRsps& LoginRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

LoginRsps* LoginRsps::default_instance_ = NULL;

LoginRsps* LoginRsps::New() const {
  return new LoginRsps;
}

void LoginRsps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginRsps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(session_, sessions_);
    if (has_nw_id()) {
      if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nw_id_->clear();
      }
    }
    encrypt_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expires;
        break;
      }

      // required uint32 expires = 2;
      case 2: {
        if (tag == 16) {
         parse_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nodes;
        break;
      }

      // required uint32 nodes = 3;
      case 3: {
        if (tag == 24) {
         parse_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodes_)));
          set_has_nodes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sessions;
        break;
      }

      // required uint32 sessions = 4;
      case 4: {
        if (tag == 32) {
         parse_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
          set_has_sessions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nw_id;
        break;
      }

      // required bytes nw_id = 5;
      case 5: {
        if (tag == 42) {
         parse_nw_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nw_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_encrypt;
        break;
      }

      // required .Encrypt encrypt = 6;
      case 6: {
        if (tag == 48) {
         parse_encrypt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Encrypt_IsValid(value)) {
            set_encrypt(static_cast< ::Encrypt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRsps)
  return false;
#undef DO_
}

void LoginRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRsps)
  // required uint32 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(), output);
  }

  // required uint32 expires = 2;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expires(), output);
  }

  // required uint32 nodes = 3;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nodes(), output);
  }

  // required uint32 sessions = 4;
  if (has_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sessions(), output);
  }

  // required bytes nw_id = 5;
  if (has_nw_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->nw_id(), output);
  }

  // required .Encrypt encrypt = 6;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->encrypt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRsps)
}

::google::protobuf::uint8* LoginRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRsps)
  // required uint32 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session(), target);
  }

  // required uint32 expires = 2;
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expires(), target);
  }

  // required uint32 nodes = 3;
  if (has_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nodes(), target);
  }

  // required uint32 sessions = 4;
  if (has_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sessions(), target);
  }

  // required bytes nw_id = 5;
  if (has_nw_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nw_id(), target);
  }

  // required .Encrypt encrypt = 6;
  if (has_encrypt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->encrypt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRsps)
  return target;
}

int LoginRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // required uint32 expires = 2;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }

    // required uint32 nodes = 3;
    if (has_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodes());
    }

    // required uint32 sessions = 4;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

    // required bytes nw_id = 5;
    if (has_nw_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nw_id());
    }

    // required .Encrypt encrypt = 6;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encrypt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRsps::MergeFrom(const LoginRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_nodes()) {
      set_nodes(from.nodes());
    }
    if (from.has_sessions()) {
      set_sessions(from.sessions());
    }
    if (from.has_nw_id()) {
      set_nw_id(from.nw_id());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsps::CopyFrom(const LoginRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void LoginRsps::Swap(LoginRsps* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(expires_, other->expires_);
    std::swap(nodes_, other->nodes_);
    std::swap(sessions_, other->sessions_);
    std::swap(nw_id_, other->nw_id_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRsps_descriptor_;
  metadata.reflection = LoginRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePasswordRqst::kOldPasswordFieldNumber;
const int ChangePasswordRqst::kNewPasswordFieldNumber;
#endif  // !_MSC_VER

ChangePasswordRqst::ChangePasswordRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangePasswordRqst)
}

void ChangePasswordRqst::InitAsDefaultInstance() {
}

ChangePasswordRqst::ChangePasswordRqst(const ChangePasswordRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangePasswordRqst)
}

void ChangePasswordRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  old_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePasswordRqst::~ChangePasswordRqst() {
  // @@protoc_insertion_point(destructor:ChangePasswordRqst)
  SharedDtor();
}

void ChangePasswordRqst::SharedDtor() {
  if (old_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_password_;
  }
  if (new_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_password_;
  }
  if (this != default_instance_) {
  }
}

void ChangePasswordRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePasswordRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePasswordRqst_descriptor_;
}

const ChangePasswordRqst& ChangePasswordRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

ChangePasswordRqst* ChangePasswordRqst::default_instance_ = NULL;

ChangePasswordRqst* ChangePasswordRqst::New() const {
  return new ChangePasswordRqst;
}

void ChangePasswordRqst::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_old_password()) {
      if (old_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        old_password_->clear();
      }
    }
    if (has_new_password()) {
      if (new_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePasswordRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangePasswordRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string old_password = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_password().data(), this->old_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "old_password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_password;
        break;
      }

      // required string new_password = 2;
      case 2: {
        if (tag == 18) {
         parse_new_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_password().data(), this->new_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangePasswordRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangePasswordRqst)
  return false;
#undef DO_
}

void ChangePasswordRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangePasswordRqst)
  // required string old_password = 1;
  if (has_old_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_password().data(), this->old_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->old_password(), output);
  }

  // required string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangePasswordRqst)
}

::google::protobuf::uint8* ChangePasswordRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangePasswordRqst)
  // required string old_password = 1;
  if (has_old_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_password().data(), this->old_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->old_password(), target);
  }

  // required string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangePasswordRqst)
  return target;
}

int ChangePasswordRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string old_password = 1;
    if (has_old_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_password());
    }

    // required string new_password = 2;
    if (has_new_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePasswordRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePasswordRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePasswordRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePasswordRqst::MergeFrom(const ChangePasswordRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_password()) {
      set_old_password(from.old_password());
    }
    if (from.has_new_password()) {
      set_new_password(from.new_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePasswordRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePasswordRqst::CopyFrom(const ChangePasswordRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangePasswordRqst::Swap(ChangePasswordRqst* other) {
  if (other != this) {
    std::swap(old_password_, other->old_password_);
    std::swap(new_password_, other->new_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePasswordRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePasswordRqst_descriptor_;
  metadata.reflection = ChangePasswordRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRqst::kExpiresFieldNumber;
const int HeartbeatRqst::kTimeFieldNumber;
#endif  // !_MSC_VER

HeartbeatRqst::HeartbeatRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartbeatRqst)
}

void HeartbeatRqst::InitAsDefaultInstance() {
}

HeartbeatRqst::HeartbeatRqst(const HeartbeatRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HeartbeatRqst)
}

void HeartbeatRqst::SharedCtor() {
  _cached_size_ = 0;
  expires_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRqst::~HeartbeatRqst() {
  // @@protoc_insertion_point(destructor:HeartbeatRqst)
  SharedDtor();
}

void HeartbeatRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRqst_descriptor_;
}

const HeartbeatRqst& HeartbeatRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

HeartbeatRqst* HeartbeatRqst::default_instance_ = NULL;

HeartbeatRqst* HeartbeatRqst::New() const {
  return new HeartbeatRqst;
}

void HeartbeatRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeartbeatRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, expires_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartbeatRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 expires = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartbeatRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartbeatRqst)
  return false;
#undef DO_
}

void HeartbeatRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartbeatRqst)
  // required uint32 expires = 1;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expires(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartbeatRqst)
}

::google::protobuf::uint8* HeartbeatRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartbeatRqst)
  // required uint32 expires = 1;
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expires(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartbeatRqst)
  return target;
}

int HeartbeatRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 expires = 1;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRqst::MergeFrom(const HeartbeatRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRqst::CopyFrom(const HeartbeatRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartbeatRqst::Swap(HeartbeatRqst* other) {
  if (other != this) {
    std::swap(expires_, other->expires_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRqst_descriptor_;
  metadata.reflection = HeartbeatRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRsps::kExpiresFieldNumber;
const int HeartbeatRsps::kCapabilityFieldNumber;
const int HeartbeatRsps::kNodesFieldNumber;
const int HeartbeatRsps::kSessionsFieldNumber;
#endif  // !_MSC_VER

HeartbeatRsps::HeartbeatRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartbeatRsps)
}

void HeartbeatRsps::InitAsDefaultInstance() {
}

HeartbeatRsps::HeartbeatRsps(const HeartbeatRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HeartbeatRsps)
}

void HeartbeatRsps::SharedCtor() {
  _cached_size_ = 0;
  expires_ = 0u;
  capability_ = 0u;
  nodes_ = 0u;
  sessions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRsps::~HeartbeatRsps() {
  // @@protoc_insertion_point(destructor:HeartbeatRsps)
  SharedDtor();
}

void HeartbeatRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRsps_descriptor_;
}

const HeartbeatRsps& HeartbeatRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

HeartbeatRsps* HeartbeatRsps::default_instance_ = NULL;

HeartbeatRsps* HeartbeatRsps::New() const {
  return new HeartbeatRsps;
}

void HeartbeatRsps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeartbeatRsps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(expires_, sessions_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartbeatRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 expires = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_capability;
        break;
      }

      // required uint32 capability = 2;
      case 2: {
        if (tag == 16) {
         parse_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capability_)));
          set_has_capability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nodes;
        break;
      }

      // required uint32 nodes = 3;
      case 3: {
        if (tag == 24) {
         parse_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodes_)));
          set_has_nodes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sessions;
        break;
      }

      // required uint32 sessions = 4;
      case 4: {
        if (tag == 32) {
         parse_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
          set_has_sessions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartbeatRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartbeatRsps)
  return false;
#undef DO_
}

void HeartbeatRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartbeatRsps)
  // required uint32 expires = 1;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expires(), output);
  }

  // required uint32 capability = 2;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->capability(), output);
  }

  // required uint32 nodes = 3;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nodes(), output);
  }

  // required uint32 sessions = 4;
  if (has_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sessions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartbeatRsps)
}

::google::protobuf::uint8* HeartbeatRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartbeatRsps)
  // required uint32 expires = 1;
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expires(), target);
  }

  // required uint32 capability = 2;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->capability(), target);
  }

  // required uint32 nodes = 3;
  if (has_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nodes(), target);
  }

  // required uint32 sessions = 4;
  if (has_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sessions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartbeatRsps)
  return target;
}

int HeartbeatRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 expires = 1;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }

    // required uint32 capability = 2;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capability());
    }

    // required uint32 nodes = 3;
    if (has_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodes());
    }

    // required uint32 sessions = 4;
    if (has_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRsps::MergeFrom(const HeartbeatRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_capability()) {
      set_capability(from.capability());
    }
    if (from.has_nodes()) {
      set_nodes(from.nodes());
    }
    if (from.has_sessions()) {
      set_sessions(from.sessions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRsps::CopyFrom(const HeartbeatRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HeartbeatRsps::Swap(HeartbeatRsps* other) {
  if (other != this) {
    std::swap(expires_, other->expires_);
    std::swap(capability_, other->capability_);
    std::swap(nodes_, other->nodes_);
    std::swap(sessions_, other->sessions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRsps_descriptor_;
  metadata.reflection = HeartbeatRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRqst::kTypeFieldNumber;
const int RegisterRqst::kNwIdFieldNumber;
const int RegisterRqst::kManufactoryFieldNumber;
const int RegisterRqst::kModelFieldNumber;
const int RegisterRqst::kNodesFieldNumber;
const int RegisterRqst::kSessionFieldNumber;
#endif  // !_MSC_VER

RegisterRqst::RegisterRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterRqst)
}

void RegisterRqst::InitAsDefaultInstance() {
}

RegisterRqst::RegisterRqst(const RegisterRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterRqst)
}

void RegisterRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  nw_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = 1;
  nodes_ = 0u;
  session_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRqst::~RegisterRqst() {
  // @@protoc_insertion_point(destructor:RegisterRqst)
  SharedDtor();
}

void RegisterRqst::SharedDtor() {
  if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nw_id_;
  }
  if (manufactory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufactory_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRqst_descriptor_;
}

const RegisterRqst& RegisterRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

RegisterRqst* RegisterRqst::default_instance_ = NULL;

RegisterRqst* RegisterRqst::New() const {
  return new RegisterRqst;
}

void RegisterRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegisterRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(nodes_, session_);
    type_ = 1;
    if (has_nw_id()) {
      if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nw_id_->clear();
      }
    }
    if (has_manufactory()) {
      if (manufactory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manufactory_->clear();
      }
    }
    model_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DeviceType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceType_IsValid(value)) {
            set_type(static_cast< ::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nw_id;
        break;
      }

      // required string nw_id = 2;
      case 2: {
        if (tag == 18) {
         parse_nw_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nw_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nw_id().data(), this->nw_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nw_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_manufactory;
        break;
      }

      // required string manufactory = 3;
      case 3: {
        if (tag == 26) {
         parse_manufactory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufactory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufactory().data(), this->manufactory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "manufactory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_model;
        break;
      }

      // required .DeviceModel model = 4;
      case 4: {
        if (tag == 32) {
         parse_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceModel_IsValid(value)) {
            set_model(static_cast< ::DeviceModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nodes;
        break;
      }

      // required uint32 nodes = 5;
      case 5: {
        if (tag == 40) {
         parse_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodes_)));
          set_has_nodes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_session;
        break;
      }

      // required uint32 session = 6;
      case 6: {
        if (tag == 48) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterRqst)
  return false;
#undef DO_
}

void RegisterRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterRqst)
  // required .DeviceType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string nw_id = 2;
  if (has_nw_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nw_id().data(), this->nw_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nw_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nw_id(), output);
  }

  // required string manufactory = 3;
  if (has_manufactory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufactory().data(), this->manufactory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufactory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufactory(), output);
  }

  // required .DeviceModel model = 4;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->model(), output);
  }

  // required uint32 nodes = 5;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nodes(), output);
  }

  // required uint32 session = 6;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterRqst)
}

::google::protobuf::uint8* RegisterRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRqst)
  // required .DeviceType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string nw_id = 2;
  if (has_nw_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nw_id().data(), this->nw_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nw_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nw_id(), target);
  }

  // required string manufactory = 3;
  if (has_manufactory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufactory().data(), this->manufactory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufactory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->manufactory(), target);
  }

  // required .DeviceModel model = 4;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->model(), target);
  }

  // required uint32 nodes = 5;
  if (has_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nodes(), target);
  }

  // required uint32 session = 6;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRqst)
  return target;
}

int RegisterRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DeviceType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string nw_id = 2;
    if (has_nw_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nw_id());
    }

    // required string manufactory = 3;
    if (has_manufactory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufactory());
    }

    // required .DeviceModel model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model());
    }

    // required uint32 nodes = 5;
    if (has_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodes());
    }

    // required uint32 session = 6;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRqst::MergeFrom(const RegisterRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nw_id()) {
      set_nw_id(from.nw_id());
    }
    if (from.has_manufactory()) {
      set_manufactory(from.manufactory());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_nodes()) {
      set_nodes(from.nodes());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRqst::CopyFrom(const RegisterRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RegisterRqst::Swap(RegisterRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(nw_id_, other->nw_id_);
    std::swap(manufactory_, other->manufactory_);
    std::swap(model_, other->model_);
    std::swap(nodes_, other->nodes_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRqst_descriptor_;
  metadata.reflection = RegisterRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRsps::kTimeFieldNumber;
const int RegisterRsps::kExpiresFieldNumber;
#endif  // !_MSC_VER

RegisterRsps::RegisterRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterRsps)
}

void RegisterRsps::InitAsDefaultInstance() {
}

RegisterRsps::RegisterRsps(const RegisterRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterRsps)
}

void RegisterRsps::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  expires_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRsps::~RegisterRsps() {
  // @@protoc_insertion_point(destructor:RegisterRsps)
  SharedDtor();
}

void RegisterRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRsps_descriptor_;
}

const RegisterRsps& RegisterRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

RegisterRsps* RegisterRsps::default_instance_ = NULL;

RegisterRsps* RegisterRsps::New() const {
  return new RegisterRsps;
}

void RegisterRsps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegisterRsps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, expires_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expires;
        break;
      }

      // required uint32 expires = 2;
      case 2: {
        if (tag == 16) {
         parse_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterRsps)
  return false;
#undef DO_
}

void RegisterRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterRsps)
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required uint32 expires = 2;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expires(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterRsps)
}

::google::protobuf::uint8* RegisterRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRsps)
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required uint32 expires = 2;
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expires(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRsps)
  return target;
}

int RegisterRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required uint32 expires = 2;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRsps::MergeFrom(const RegisterRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_expires()) {
      set_expires(from.expires());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRsps::CopyFrom(const RegisterRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegisterRsps::Swap(RegisterRsps* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(expires_, other->expires_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRsps_descriptor_;
  metadata.reflection = RegisterRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNWInfoRqst::kNwIdFieldNumber;
#endif  // !_MSC_VER

GetNWInfoRqst::GetNWInfoRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNWInfoRqst)
}

void GetNWInfoRqst::InitAsDefaultInstance() {
}

GetNWInfoRqst::GetNWInfoRqst(const GetNWInfoRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNWInfoRqst)
}

void GetNWInfoRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nw_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNWInfoRqst::~GetNWInfoRqst() {
  // @@protoc_insertion_point(destructor:GetNWInfoRqst)
  SharedDtor();
}

void GetNWInfoRqst::SharedDtor() {
  if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nw_id_;
  }
  if (this != default_instance_) {
  }
}

void GetNWInfoRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNWInfoRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNWInfoRqst_descriptor_;
}

const GetNWInfoRqst& GetNWInfoRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNWInfoRqst* GetNWInfoRqst::default_instance_ = NULL;

GetNWInfoRqst* GetNWInfoRqst::New() const {
  return new GetNWInfoRqst;
}

void GetNWInfoRqst::Clear() {
  if (has_nw_id()) {
    if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nw_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNWInfoRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNWInfoRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes nw_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nw_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNWInfoRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNWInfoRqst)
  return false;
#undef DO_
}

void GetNWInfoRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNWInfoRqst)
  // required bytes nw_id = 1;
  if (has_nw_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nw_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNWInfoRqst)
}

::google::protobuf::uint8* GetNWInfoRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNWInfoRqst)
  // required bytes nw_id = 1;
  if (has_nw_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nw_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNWInfoRqst)
  return target;
}

int GetNWInfoRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes nw_id = 1;
    if (has_nw_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nw_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNWInfoRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNWInfoRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNWInfoRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNWInfoRqst::MergeFrom(const GetNWInfoRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nw_id()) {
      set_nw_id(from.nw_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNWInfoRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNWInfoRqst::CopyFrom(const GetNWInfoRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNWInfoRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetNWInfoRqst::Swap(GetNWInfoRqst* other) {
  if (other != this) {
    std::swap(nw_id_, other->nw_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNWInfoRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNWInfoRqst_descriptor_;
  metadata.reflection = GetNWInfoRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNWInfoRsps::kManufactoryFieldNumber;
const int GetNWInfoRsps::kModelFieldNumber;
const int GetNWInfoRsps::kNodeCountFieldNumber;
const int GetNWInfoRsps::k3GFieldNumber;
const int GetNWInfoRsps::kStorageFieldNumber;
const int GetNWInfoRsps::kSpaceFieldNumber;
const int GetNWInfoRsps::kNwIdFieldNumber;
const int GetNWInfoRsps::kBandFieldNumber;
const int GetNWInfoRsps::kFirmwareFieldNumber;
const int GetNWInfoRsps::kPositionFieldNumber;
const int GetNWInfoRsps::kGpsFieldNumber;
#endif  // !_MSC_VER

GetNWInfoRsps::GetNWInfoRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNWInfoRsps)
}

void GetNWInfoRsps::InitAsDefaultInstance() {
}

GetNWInfoRsps::GetNWInfoRsps(const GetNWInfoRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNWInfoRsps)
}

void GetNWInfoRsps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  manufactory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = 1;
  node_count_ = 0u;
  _3g_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_ = 0u;
  nw_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNWInfoRsps::~GetNWInfoRsps() {
  // @@protoc_insertion_point(destructor:GetNWInfoRsps)
  SharedDtor();
}

void GetNWInfoRsps::SharedDtor() {
  if (manufactory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufactory_;
  }
  if (_3g_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete _3g_;
  }
  if (storage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storage_;
  }
  if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nw_id_;
  }
  if (band_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete band_;
  }
  if (firmware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firmware_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (gps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gps_;
  }
  if (this != default_instance_) {
  }
}

void GetNWInfoRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNWInfoRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNWInfoRsps_descriptor_;
}

const GetNWInfoRsps& GetNWInfoRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNWInfoRsps* GetNWInfoRsps::default_instance_ = NULL;

GetNWInfoRsps* GetNWInfoRsps::New() const {
  return new GetNWInfoRsps;
}

void GetNWInfoRsps::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_manufactory()) {
      if (manufactory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manufactory_->clear();
      }
    }
    model_ = 1;
    node_count_ = 0u;
    if (has__3g()) {
      if (_3g_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        _3g_->clear();
      }
    }
    if (has_storage()) {
      if (storage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        storage_->clear();
      }
    }
    space_ = 0u;
    if (has_nw_id()) {
      if (nw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nw_id_->clear();
      }
    }
    if (has_band()) {
      if (band_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        band_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_firmware()) {
      if (firmware_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firmware_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_gps()) {
      if (gps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gps_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNWInfoRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNWInfoRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string manufactory = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufactory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufactory().data(), this->manufactory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "manufactory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_model;
        break;
      }

      // required .DeviceModel model = 2;
      case 2: {
        if (tag == 16) {
         parse_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceModel_IsValid(value)) {
            set_model(static_cast< ::DeviceModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_node_count;
        break;
      }

      // required uint32 node_count = 3;
      case 3: {
        if (tag == 24) {
         parse_node_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_count_)));
          set_has_node_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse__3G;
        break;
      }

      // required string _3G = 4;
      case 4: {
        if (tag == 34) {
         parse__3G:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__3g()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_3g().data(), this->_3g().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_3g");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_storage;
        break;
      }

      // required string storage = 5;
      case 5: {
        if (tag == 42) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storage().data(), this->storage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_space;
        break;
      }

      // required uint32 space = 6;
      case 6: {
        if (tag == 48) {
         parse_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &space_)));
          set_has_space();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_nw_id;
        break;
      }

      // required bytes nw_id = 7;
      case 7: {
        if (tag == 58) {
         parse_nw_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nw_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_band;
        break;
      }

      // required string band = 8;
      case 8: {
        if (tag == 66) {
         parse_band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "band");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_firmware;
        break;
      }

      // required string firmware = 9;
      case 9: {
        if (tag == 74) {
         parse_firmware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firmware().data(), this->firmware().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firmware");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_position;
        break;
      }

      // required string position = 10;
      case 10: {
        if (tag == 82) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_gps;
        break;
      }

      // required string gps = 11;
      case 11: {
        if (tag == 90) {
         parse_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gps().data(), this->gps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNWInfoRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNWInfoRsps)
  return false;
#undef DO_
}

void GetNWInfoRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNWInfoRsps)
  // required string manufactory = 1;
  if (has_manufactory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufactory().data(), this->manufactory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufactory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufactory(), output);
  }

  // required .DeviceModel model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->model(), output);
  }

  // required uint32 node_count = 3;
  if (has_node_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->node_count(), output);
  }

  // required string _3G = 4;
  if (has__3g()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_3g().data(), this->_3g().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_3g");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->_3g(), output);
  }

  // required string storage = 5;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage().data(), this->storage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->storage(), output);
  }

  // required uint32 space = 6;
  if (has_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->space(), output);
  }

  // required bytes nw_id = 7;
  if (has_nw_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->nw_id(), output);
  }

  // required string band = 8;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "band");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->band(), output);
  }

  // required string firmware = 9;
  if (has_firmware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmware().data(), this->firmware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firmware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->firmware(), output);
  }

  // required string position = 10;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->position(), output);
  }

  // required string gps = 11;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps().data(), this->gps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNWInfoRsps)
}

::google::protobuf::uint8* GetNWInfoRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNWInfoRsps)
  // required string manufactory = 1;
  if (has_manufactory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufactory().data(), this->manufactory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufactory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->manufactory(), target);
  }

  // required .DeviceModel model = 2;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->model(), target);
  }

  // required uint32 node_count = 3;
  if (has_node_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->node_count(), target);
  }

  // required string _3G = 4;
  if (has__3g()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_3g().data(), this->_3g().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_3g");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->_3g(), target);
  }

  // required string storage = 5;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage().data(), this->storage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->storage(), target);
  }

  // required uint32 space = 6;
  if (has_space()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->space(), target);
  }

  // required bytes nw_id = 7;
  if (has_nw_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->nw_id(), target);
  }

  // required string band = 8;
  if (has_band()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "band");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->band(), target);
  }

  // required string firmware = 9;
  if (has_firmware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmware().data(), this->firmware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firmware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->firmware(), target);
  }

  // required string position = 10;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->position(), target);
  }

  // required string gps = 11;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gps().data(), this->gps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNWInfoRsps)
  return target;
}

int GetNWInfoRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string manufactory = 1;
    if (has_manufactory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufactory());
    }

    // required .DeviceModel model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model());
    }

    // required uint32 node_count = 3;
    if (has_node_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_count());
    }

    // required string _3G = 4;
    if (has__3g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->_3g());
    }

    // required string storage = 5;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage());
    }

    // required uint32 space = 6;
    if (has_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->space());
    }

    // required bytes nw_id = 7;
    if (has_nw_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nw_id());
    }

    // required string band = 8;
    if (has_band()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->band());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string firmware = 9;
    if (has_firmware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firmware());
    }

    // required string position = 10;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // required string gps = 11;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNWInfoRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNWInfoRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNWInfoRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNWInfoRsps::MergeFrom(const GetNWInfoRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manufactory()) {
      set_manufactory(from.manufactory());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_node_count()) {
      set_node_count(from.node_count());
    }
    if (from.has__3g()) {
      set__3g(from._3g());
    }
    if (from.has_storage()) {
      set_storage(from.storage());
    }
    if (from.has_space()) {
      set_space(from.space());
    }
    if (from.has_nw_id()) {
      set_nw_id(from.nw_id());
    }
    if (from.has_band()) {
      set_band(from.band());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_firmware()) {
      set_firmware(from.firmware());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_gps()) {
      set_gps(from.gps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNWInfoRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNWInfoRsps::CopyFrom(const GetNWInfoRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNWInfoRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void GetNWInfoRsps::Swap(GetNWInfoRsps* other) {
  if (other != this) {
    std::swap(manufactory_, other->manufactory_);
    std::swap(model_, other->model_);
    std::swap(node_count_, other->node_count_);
    std::swap(_3g_, other->_3g_);
    std::swap(storage_, other->storage_);
    std::swap(space_, other->space_);
    std::swap(nw_id_, other->nw_id_);
    std::swap(band_, other->band_);
    std::swap(firmware_, other->firmware_);
    std::swap(position_, other->position_);
    std::swap(gps_, other->gps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNWInfoRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNWInfoRsps_descriptor_;
  metadata.reflection = GetNWInfoRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetAutoParamRqst::kEnableFieldNumber;
const int SetAutoParamRqst::kIpFieldNumber;
const int SetAutoParamRqst::kPortFieldNumber;
const int SetAutoParamRqst::kUsernameFieldNumber;
const int SetAutoParamRqst::kPasswordFieldNumber;
const int SetAutoParamRqst::kIntervalFieldNumber;
#endif  // !_MSC_VER

SetAutoParamRqst::SetAutoParamRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetAutoParamRqst)
}

void SetAutoParamRqst::InitAsDefaultInstance() {
}

SetAutoParamRqst::SetAutoParamRqst(const SetAutoParamRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetAutoParamRqst)
}

void SetAutoParamRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enable_ = 0u;
  ip_ = 0u;
  port_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAutoParamRqst::~SetAutoParamRqst() {
  // @@protoc_insertion_point(destructor:SetAutoParamRqst)
  SharedDtor();
}

void SetAutoParamRqst::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SetAutoParamRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAutoParamRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAutoParamRqst_descriptor_;
}

const SetAutoParamRqst& SetAutoParamRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SetAutoParamRqst* SetAutoParamRqst::default_instance_ = NULL;

SetAutoParamRqst* SetAutoParamRqst::New() const {
  return new SetAutoParamRqst;
}

void SetAutoParamRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetAutoParamRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(enable_, ip_);
    ZR_(port_, interval_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAutoParamRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetAutoParamRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ip;
        break;
      }

      // required uint32 ip = 2;
      case 2: {
        if (tag == 16) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // required string username = 4;
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // required string password = 5;
      case 5: {
        if (tag == 42) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_interval;
        break;
      }

      // required uint32 interval = 6;
      case 6: {
        if (tag == 48) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetAutoParamRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetAutoParamRqst)
  return false;
#undef DO_
}

void SetAutoParamRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetAutoParamRqst)
  // required uint32 enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enable(), output);
  }

  // required uint32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // required uint32 interval = 6;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetAutoParamRqst)
}

::google::protobuf::uint8* SetAutoParamRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetAutoParamRqst)
  // required uint32 enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enable(), target);
  }

  // required uint32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // required uint32 interval = 6;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetAutoParamRqst)
  return target;
}

int SetAutoParamRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 enable = 1;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable());
    }

    // required uint32 ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 interval = 6;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAutoParamRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAutoParamRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAutoParamRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAutoParamRqst::MergeFrom(const SetAutoParamRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAutoParamRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAutoParamRqst::CopyFrom(const SetAutoParamRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAutoParamRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SetAutoParamRqst::Swap(SetAutoParamRqst* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAutoParamRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAutoParamRqst_descriptor_;
  metadata.reflection = SetAutoParamRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAutoParamRsps::kEnableFieldNumber;
const int GetAutoParamRsps::kIpFieldNumber;
const int GetAutoParamRsps::kPortFieldNumber;
const int GetAutoParamRsps::kUsernameFieldNumber;
const int GetAutoParamRsps::kPasswordFieldNumber;
const int GetAutoParamRsps::kIntervalFieldNumber;
#endif  // !_MSC_VER

GetAutoParamRsps::GetAutoParamRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetAutoParamRsps)
}

void GetAutoParamRsps::InitAsDefaultInstance() {
}

GetAutoParamRsps::GetAutoParamRsps(const GetAutoParamRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetAutoParamRsps)
}

void GetAutoParamRsps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enable_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAutoParamRsps::~GetAutoParamRsps() {
  // @@protoc_insertion_point(destructor:GetAutoParamRsps)
  SharedDtor();
}

void GetAutoParamRsps::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GetAutoParamRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAutoParamRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAutoParamRsps_descriptor_;
}

const GetAutoParamRsps& GetAutoParamRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetAutoParamRsps* GetAutoParamRsps::default_instance_ = NULL;

GetAutoParamRsps* GetAutoParamRsps::New() const {
  return new GetAutoParamRsps;
}

void GetAutoParamRsps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetAutoParamRsps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(enable_, port_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    interval_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAutoParamRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetAutoParamRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // required string username = 4;
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // required string password = 5;
      case 5: {
        if (tag == 42) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_interval;
        break;
      }

      // required uint32 interval = 6;
      case 6: {
        if (tag == 48) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetAutoParamRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetAutoParamRsps)
  return false;
#undef DO_
}

void GetAutoParamRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetAutoParamRsps)
  // required uint32 enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enable(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // required uint32 interval = 6;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetAutoParamRsps)
}

::google::protobuf::uint8* GetAutoParamRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetAutoParamRsps)
  // required uint32 enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enable(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // required uint32 interval = 6;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetAutoParamRsps)
  return target;
}

int GetAutoParamRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 enable = 1;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 interval = 6;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAutoParamRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAutoParamRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAutoParamRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAutoParamRsps::MergeFrom(const GetAutoParamRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAutoParamRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoParamRsps::CopyFrom(const GetAutoParamRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoParamRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GetAutoParamRsps::Swap(GetAutoParamRsps* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAutoParamRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAutoParamRsps_descriptor_;
  metadata.reflection = GetAutoParamRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetConfigRqst::kNameFieldNumber;
const int SetConfigRqst::kConfigFileFieldNumber;
#endif  // !_MSC_VER

SetConfigRqst::SetConfigRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetConfigRqst)
}

void SetConfigRqst::InitAsDefaultInstance() {
}

SetConfigRqst::SetConfigRqst(const SetConfigRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetConfigRqst)
}

void SetConfigRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = 1;
  config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetConfigRqst::~SetConfigRqst() {
  // @@protoc_insertion_point(destructor:SetConfigRqst)
  SharedDtor();
}

void SetConfigRqst::SharedDtor() {
  if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_file_;
  }
  if (this != default_instance_) {
  }
}

void SetConfigRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetConfigRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetConfigRqst_descriptor_;
}

const SetConfigRqst& SetConfigRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SetConfigRqst* SetConfigRqst::default_instance_ = NULL;

SetConfigRqst* SetConfigRqst::New() const {
  return new SetConfigRqst;
}

void SetConfigRqst::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    name_ = 1;
    if (has_config_file()) {
      if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        config_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetConfigRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetConfigRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigName name = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ConfigName_IsValid(value)) {
            set_name(static_cast< ::ConfigName >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config_file;
        break;
      }

      // required string config_file = 2;
      case 2: {
        if (tag == 18) {
         parse_config_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file().data(), this->config_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetConfigRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetConfigRqst)
  return false;
#undef DO_
}

void SetConfigRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetConfigRqst)
  // required .ConfigName name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // required string config_file = 2;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetConfigRqst)
}

::google::protobuf::uint8* SetConfigRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetConfigRqst)
  // required .ConfigName name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }

  // required string config_file = 2;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetConfigRqst)
  return target;
}

int SetConfigRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigName name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
    }

    // required string config_file = 2;
    if (has_config_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetConfigRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetConfigRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetConfigRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetConfigRqst::MergeFrom(const SetConfigRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_config_file()) {
      set_config_file(from.config_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetConfigRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetConfigRqst::CopyFrom(const SetConfigRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetConfigRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetConfigRqst::Swap(SetConfigRqst* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(config_file_, other->config_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetConfigRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetConfigRqst_descriptor_;
  metadata.reflection = SetConfigRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetConfigRqst::kNameFieldNumber;
#endif  // !_MSC_VER

GetConfigRqst::GetConfigRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetConfigRqst)
}

void GetConfigRqst::InitAsDefaultInstance() {
}

GetConfigRqst::GetConfigRqst(const GetConfigRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetConfigRqst)
}

void GetConfigRqst::SharedCtor() {
  _cached_size_ = 0;
  name_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfigRqst::~GetConfigRqst() {
  // @@protoc_insertion_point(destructor:GetConfigRqst)
  SharedDtor();
}

void GetConfigRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfigRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfigRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfigRqst_descriptor_;
}

const GetConfigRqst& GetConfigRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetConfigRqst* GetConfigRqst::default_instance_ = NULL;

GetConfigRqst* GetConfigRqst::New() const {
  return new GetConfigRqst;
}

void GetConfigRqst::Clear() {
  name_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfigRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetConfigRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigName name = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ConfigName_IsValid(value)) {
            set_name(static_cast< ::ConfigName >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetConfigRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetConfigRqst)
  return false;
#undef DO_
}

void GetConfigRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetConfigRqst)
  // required .ConfigName name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetConfigRqst)
}

::google::protobuf::uint8* GetConfigRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetConfigRqst)
  // required .ConfigName name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetConfigRqst)
  return target;
}

int GetConfigRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigName name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfigRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfigRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfigRqst::MergeFrom(const GetConfigRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfigRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigRqst::CopyFrom(const GetConfigRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetConfigRqst::Swap(GetConfigRqst* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfigRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfigRqst_descriptor_;
  metadata.reflection = GetConfigRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetConfigRsps::kConfigFileFieldNumber;
#endif  // !_MSC_VER

GetConfigRsps::GetConfigRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetConfigRsps)
}

void GetConfigRsps::InitAsDefaultInstance() {
}

GetConfigRsps::GetConfigRsps(const GetConfigRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetConfigRsps)
}

void GetConfigRsps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfigRsps::~GetConfigRsps() {
  // @@protoc_insertion_point(destructor:GetConfigRsps)
  SharedDtor();
}

void GetConfigRsps::SharedDtor() {
  if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_file_;
  }
  if (this != default_instance_) {
  }
}

void GetConfigRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfigRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfigRsps_descriptor_;
}

const GetConfigRsps& GetConfigRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetConfigRsps* GetConfigRsps::default_instance_ = NULL;

GetConfigRsps* GetConfigRsps::New() const {
  return new GetConfigRsps;
}

void GetConfigRsps::Clear() {
  if (has_config_file()) {
    if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      config_file_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfigRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetConfigRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string config_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file().data(), this->config_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetConfigRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetConfigRsps)
  return false;
#undef DO_
}

void GetConfigRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetConfigRsps)
  // required string config_file = 1;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetConfigRsps)
}

::google::protobuf::uint8* GetConfigRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetConfigRsps)
  // required string config_file = 1;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetConfigRsps)
  return target;
}

int GetConfigRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string config_file = 1;
    if (has_config_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfigRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfigRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfigRsps::MergeFrom(const GetConfigRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_file()) {
      set_config_file(from.config_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfigRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigRsps::CopyFrom(const GetConfigRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetConfigRsps::Swap(GetConfigRsps* other) {
  if (other != this) {
    std::swap(config_file_, other->config_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfigRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfigRsps_descriptor_;
  metadata.reflection = GetConfigRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLogRqst::kTypeFieldNumber;
const int QueryLogRqst::kStartTimeFieldNumber;
const int QueryLogRqst::kEndTimeFieldNumber;
const int QueryLogRqst::kStartLineFieldNumber;
const int QueryLogRqst::kCountFieldNumber;
#endif  // !_MSC_VER

QueryLogRqst::QueryLogRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryLogRqst)
}

void QueryLogRqst::InitAsDefaultInstance() {
}

QueryLogRqst::QueryLogRqst(const QueryLogRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryLogRqst)
}

void QueryLogRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  start_line_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLogRqst::~QueryLogRqst() {
  // @@protoc_insertion_point(destructor:QueryLogRqst)
  SharedDtor();
}

void QueryLogRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryLogRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLogRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLogRqst_descriptor_;
}

const QueryLogRqst& QueryLogRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

QueryLogRqst* QueryLogRqst::default_instance_ = NULL;

QueryLogRqst* QueryLogRqst::New() const {
  return new QueryLogRqst;
}

void QueryLogRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryLogRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(start_line_, count_);
    type_ = 1;
    start_time_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLogRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryLogRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogType_IsValid(value)) {
            set_type(static_cast< ::LogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // required uint64 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // required uint64 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_line;
        break;
      }

      // required uint32 start_line = 4;
      case 4: {
        if (tag == 32) {
         parse_start_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_line_)));
          set_has_start_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required uint32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryLogRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryLogRqst)
  return false;
#undef DO_
}

void QueryLogRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryLogRqst)
  // required .LogType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_time(), output);
  }

  // required uint64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }

  // required uint32 start_line = 4;
  if (has_start_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_line(), output);
  }

  // required uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryLogRqst)
}

::google::protobuf::uint8* QueryLogRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryLogRqst)
  // required .LogType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_time(), target);
  }

  // required uint64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }

  // required uint32 start_line = 4;
  if (has_start_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_line(), target);
  }

  // required uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryLogRqst)
  return target;
}

int QueryLogRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // required uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // required uint32 start_line = 4;
    if (has_start_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_line());
    }

    // required uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLogRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLogRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLogRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLogRqst::MergeFrom(const QueryLogRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_start_line()) {
      set_start_line(from.start_line());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLogRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLogRqst::CopyFrom(const QueryLogRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLogRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void QueryLogRqst::Swap(QueryLogRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(start_line_, other->start_line_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLogRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLogRqst_descriptor_;
  metadata.reflection = QueryLogRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NWLog::kTimeFieldNumber;
const int NWLog::kTypeFieldNumber;
const int NWLog::kMessageFieldNumber;
#endif  // !_MSC_VER

NWLog::NWLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NWLog)
}

void NWLog::InitAsDefaultInstance() {
}

NWLog::NWLog(const NWLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NWLog)
}

void NWLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NWLog::~NWLog() {
  // @@protoc_insertion_point(destructor:NWLog)
  SharedDtor();
}

void NWLog::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void NWLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NWLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NWLog_descriptor_;
}

const NWLog& NWLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

NWLog* NWLog::default_instance_ = NULL;

NWLog* NWLog::New() const {
  return new NWLog;
}

void NWLog::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    time_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NWLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NWLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .LogType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogType_IsValid(value)) {
            set_type(static_cast< ::LogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NWLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NWLog)
  return false;
#undef DO_
}

void NWLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NWLog)
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required .LogType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NWLog)
}

::google::protobuf::uint8* NWLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NWLog)
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required .LogType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NWLog)
  return target;
}

int NWLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required .LogType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NWLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NWLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NWLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NWLog::MergeFrom(const NWLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NWLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NWLog::CopyFrom(const NWLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NWLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NWLog::Swap(NWLog* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NWLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NWLog_descriptor_;
  metadata.reflection = NWLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLogRsps::kTotalCountFieldNumber;
const int QueryLogRsps::kLogFieldNumber;
#endif  // !_MSC_VER

QueryLogRsps::QueryLogRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryLogRsps)
}

void QueryLogRsps::InitAsDefaultInstance() {
}

QueryLogRsps::QueryLogRsps(const QueryLogRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryLogRsps)
}

void QueryLogRsps::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLogRsps::~QueryLogRsps() {
  // @@protoc_insertion_point(destructor:QueryLogRsps)
  SharedDtor();
}

void QueryLogRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryLogRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLogRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLogRsps_descriptor_;
}

const QueryLogRsps& QueryLogRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

QueryLogRsps* QueryLogRsps::default_instance_ = NULL;

QueryLogRsps* QueryLogRsps::New() const {
  return new QueryLogRsps;
}

void QueryLogRsps::Clear() {
  total_count_ = 0u;
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLogRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryLogRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }

      // repeated .NWLog log = 2;
      case 2: {
        if (tag == 18) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_log;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryLogRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryLogRsps)
  return false;
#undef DO_
}

void QueryLogRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryLogRsps)
  // required uint32 total_count = 1;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_count(), output);
  }

  // repeated .NWLog log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryLogRsps)
}

::google::protobuf::uint8* QueryLogRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryLogRsps)
  // required uint32 total_count = 1;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_count(), target);
  }

  // repeated .NWLog log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryLogRsps)
  return target;
}

int QueryLogRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 total_count = 1;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

  }
  // repeated .NWLog log = 2;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLogRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLogRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLogRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLogRsps::MergeFrom(const QueryLogRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLogRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLogRsps::CopyFrom(const QueryLogRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLogRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->log())) return false;
  return true;
}

void QueryLogRsps::Swap(QueryLogRsps* other) {
  if (other != this) {
    std::swap(total_count_, other->total_count_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLogRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLogRsps_descriptor_;
  metadata.reflection = QueryLogRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSynchRqst::kTimeFieldNumber;
const int TimeSynchRqst::kIpFieldNumber;
const int TimeSynchRqst::kPortFieldNumber;
const int TimeSynchRqst::kRevisionFieldNumber;
#endif  // !_MSC_VER

TimeSynchRqst::TimeSynchRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeSynchRqst)
}

void TimeSynchRqst::InitAsDefaultInstance() {
}

TimeSynchRqst::TimeSynchRqst(const TimeSynchRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TimeSynchRqst)
}

void TimeSynchRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSynchRqst::~TimeSynchRqst() {
  // @@protoc_insertion_point(destructor:TimeSynchRqst)
  SharedDtor();
}

void TimeSynchRqst::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void TimeSynchRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSynchRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSynchRqst_descriptor_;
}

const TimeSynchRqst& TimeSynchRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

TimeSynchRqst* TimeSynchRqst::default_instance_ = NULL;

TimeSynchRqst* TimeSynchRqst::New() const {
  return new TimeSynchRqst;
}

void TimeSynchRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeSynchRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(port_, revision_);
    time_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSynchRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TimeSynchRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_revision;
        break;
      }

      // required uint32 revision = 4;
      case 4: {
        if (tag == 32) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeSynchRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeSynchRqst)
  return false;
#undef DO_
}

void TimeSynchRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeSynchRqst)
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required uint32 revision = 4;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->revision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TimeSynchRqst)
}

::google::protobuf::uint8* TimeSynchRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimeSynchRqst)
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required uint32 revision = 4;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->revision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeSynchRqst)
  return target;
}

int TimeSynchRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint32 revision = 4;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSynchRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSynchRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSynchRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSynchRqst::MergeFrom(const TimeSynchRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSynchRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSynchRqst::CopyFrom(const TimeSynchRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSynchRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TimeSynchRqst::Swap(TimeSynchRqst* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSynchRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSynchRqst_descriptor_;
  metadata.reflection = TimeSynchRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RebootRqst::kReasonFieldNumber;
const int RebootRqst::kDelayFieldNumber;
#endif  // !_MSC_VER

RebootRqst::RebootRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RebootRqst)
}

void RebootRqst::InitAsDefaultInstance() {
}

RebootRqst::RebootRqst(const RebootRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RebootRqst)
}

void RebootRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RebootRqst::~RebootRqst() {
  // @@protoc_insertion_point(destructor:RebootRqst)
  SharedDtor();
}

void RebootRqst::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void RebootRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RebootRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RebootRqst_descriptor_;
}

const RebootRqst& RebootRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

RebootRqst* RebootRqst::default_instance_ = NULL;

RebootRqst* RebootRqst::New() const {
  return new RebootRqst;
}

void RebootRqst::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RebootRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RebootRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // required uint32 delay = 2;
      case 2: {
        if (tag == 16) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RebootRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RebootRqst)
  return false;
#undef DO_
}

void RebootRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RebootRqst)
  // required string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // required uint32 delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RebootRqst)
}

::google::protobuf::uint8* RebootRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RebootRqst)
  // required string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // required uint32 delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RebootRqst)
  return target;
}

int RebootRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // required uint32 delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RebootRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RebootRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RebootRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RebootRqst::MergeFrom(const RebootRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RebootRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebootRqst::CopyFrom(const RebootRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebootRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RebootRqst::Swap(RebootRqst* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RebootRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RebootRqst_descriptor_;
  metadata.reflection = RebootRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeListRqst::kTypeFieldNumber;
const int GetNodeListRqst::kStartLineFieldNumber;
const int GetNodeListRqst::kCountFieldNumber;
#endif  // !_MSC_VER

GetNodeListRqst::GetNodeListRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeListRqst)
}

void GetNodeListRqst::InitAsDefaultInstance() {
}

GetNodeListRqst::GetNodeListRqst(const GetNodeListRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeListRqst)
}

void GetNodeListRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  start_line_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeListRqst::~GetNodeListRqst() {
  // @@protoc_insertion_point(destructor:GetNodeListRqst)
  SharedDtor();
}

void GetNodeListRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNodeListRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeListRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeListRqst_descriptor_;
}

const GetNodeListRqst& GetNodeListRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeListRqst* GetNodeListRqst::default_instance_ = NULL;

GetNodeListRqst* GetNodeListRqst::New() const {
  return new GetNodeListRqst;
}

void GetNodeListRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetNodeListRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_line_, count_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeListRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeListRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeType_IsValid(value)) {
            set_type(static_cast< ::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_line;
        break;
      }

      // required uint32 start_line = 2;
      case 2: {
        if (tag == 16) {
         parse_start_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_line_)));
          set_has_start_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeListRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeListRqst)
  return false;
#undef DO_
}

void GetNodeListRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeListRqst)
  // required .NodeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 start_line = 2;
  if (has_start_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_line(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeListRqst)
}

::google::protobuf::uint8* GetNodeListRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeListRqst)
  // required .NodeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 start_line = 2;
  if (has_start_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_line(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeListRqst)
  return target;
}

int GetNodeListRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 start_line = 2;
    if (has_start_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_line());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeListRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeListRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeListRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeListRqst::MergeFrom(const GetNodeListRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_line()) {
      set_start_line(from.start_line());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeListRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeListRqst::CopyFrom(const GetNodeListRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeListRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetNodeListRqst::Swap(GetNodeListRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(start_line_, other->start_line_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeListRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeListRqst_descriptor_;
  metadata.reflection = GetNodeListRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeListRsps::kTotalCountFieldNumber;
const int GetNodeListRsps::kNodeEntryFieldNumber;
#endif  // !_MSC_VER

GetNodeListRsps::GetNodeListRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeListRsps)
}

void GetNodeListRsps::InitAsDefaultInstance() {
}

GetNodeListRsps::GetNodeListRsps(const GetNodeListRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeListRsps)
}

void GetNodeListRsps::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeListRsps::~GetNodeListRsps() {
  // @@protoc_insertion_point(destructor:GetNodeListRsps)
  SharedDtor();
}

void GetNodeListRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNodeListRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeListRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeListRsps_descriptor_;
}

const GetNodeListRsps& GetNodeListRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeListRsps* GetNodeListRsps::default_instance_ = NULL;

GetNodeListRsps* GetNodeListRsps::New() const {
  return new GetNodeListRsps;
}

void GetNodeListRsps::Clear() {
  total_count_ = 0u;
  node_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeListRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeListRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_entry;
        break;
      }

      // repeated .NodeEntry node_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_node_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeListRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeListRsps)
  return false;
#undef DO_
}

void GetNodeListRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeListRsps)
  // required uint32 total_count = 1;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_count(), output);
  }

  // repeated .NodeEntry node_entry = 2;
  for (int i = 0; i < this->node_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node_entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeListRsps)
}

::google::protobuf::uint8* GetNodeListRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeListRsps)
  // required uint32 total_count = 1;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_count(), target);
  }

  // repeated .NodeEntry node_entry = 2;
  for (int i = 0; i < this->node_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node_entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeListRsps)
  return target;
}

int GetNodeListRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 total_count = 1;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

  }
  // repeated .NodeEntry node_entry = 2;
  total_size += 1 * this->node_entry_size();
  for (int i = 0; i < this->node_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeListRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeListRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeListRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeListRsps::MergeFrom(const GetNodeListRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_entry_.MergeFrom(from.node_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeListRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeListRsps::CopyFrom(const GetNodeListRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeListRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->node_entry())) return false;
  return true;
}

void GetNodeListRsps::Swap(GetNodeListRsps* other) {
  if (other != this) {
    std::swap(total_count_, other->total_count_);
    node_entry_.Swap(&other->node_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeListRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeListRsps_descriptor_;
  metadata.reflection = GetNodeListRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeEntry::kIdFieldNumber;
const int NodeEntry::kStatusFieldNumber;
const int NodeEntry::kSensor1FieldNumber;
const int NodeEntry::kSensor2FieldNumber;
const int NodeEntry::kSensor3FieldNumber;
const int NodeEntry::kSensor4FieldNumber;
const int NodeEntry::kSensor5FieldNumber;
const int NodeEntry::kSensor6FieldNumber;
#endif  // !_MSC_VER

NodeEntry::NodeEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeEntry)
}

void NodeEntry::InitAsDefaultInstance() {
}

NodeEntry::NodeEntry(const NodeEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeEntry)
}

void NodeEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  sensor1_ = 0u;
  sensor2_ = 0u;
  sensor3_ = 0u;
  sensor4_ = 0u;
  sensor5_ = 0u;
  sensor6_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeEntry::~NodeEntry() {
  // @@protoc_insertion_point(destructor:NodeEntry)
  SharedDtor();
}

void NodeEntry::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void NodeEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeEntry_descriptor_;
}

const NodeEntry& NodeEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

NodeEntry* NodeEntry::default_instance_ = NULL;

NodeEntry* NodeEntry::New() const {
  return new NodeEntry;
}

void NodeEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NodeEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(status_, sensor6_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sensor1;
        break;
      }

      // required uint32 sensor1 = 3;
      case 3: {
        if (tag == 24) {
         parse_sensor1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor1_)));
          set_has_sensor1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sensor2;
        break;
      }

      // required uint32 sensor2 = 4;
      case 4: {
        if (tag == 32) {
         parse_sensor2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor2_)));
          set_has_sensor2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sensor3;
        break;
      }

      // required uint32 sensor3 = 5;
      case 5: {
        if (tag == 40) {
         parse_sensor3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor3_)));
          set_has_sensor3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sensor4;
        break;
      }

      // required uint32 sensor4 = 6;
      case 6: {
        if (tag == 48) {
         parse_sensor4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor4_)));
          set_has_sensor4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sensor5;
        break;
      }

      // required uint32 sensor5 = 7;
      case 7: {
        if (tag == 56) {
         parse_sensor5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor5_)));
          set_has_sensor5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sensor6;
        break;
      }

      // required uint32 sensor6 = 8;
      case 8: {
        if (tag == 64) {
         parse_sensor6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor6_)));
          set_has_sensor6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeEntry)
  return false;
#undef DO_
}

void NodeEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeEntry)
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 sensor1 = 3;
  if (has_sensor1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor1(), output);
  }

  // required uint32 sensor2 = 4;
  if (has_sensor2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sensor2(), output);
  }

  // required uint32 sensor3 = 5;
  if (has_sensor3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sensor3(), output);
  }

  // required uint32 sensor4 = 6;
  if (has_sensor4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sensor4(), output);
  }

  // required uint32 sensor5 = 7;
  if (has_sensor5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sensor5(), output);
  }

  // required uint32 sensor6 = 8;
  if (has_sensor6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sensor6(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeEntry)
}

::google::protobuf::uint8* NodeEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeEntry)
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 sensor1 = 3;
  if (has_sensor1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor1(), target);
  }

  // required uint32 sensor2 = 4;
  if (has_sensor2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sensor2(), target);
  }

  // required uint32 sensor3 = 5;
  if (has_sensor3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sensor3(), target);
  }

  // required uint32 sensor4 = 6;
  if (has_sensor4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sensor4(), target);
  }

  // required uint32 sensor5 = 7;
  if (has_sensor5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sensor5(), target);
  }

  // required uint32 sensor6 = 8;
  if (has_sensor6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sensor6(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeEntry)
  return target;
}

int NodeEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 sensor1 = 3;
    if (has_sensor1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor1());
    }

    // required uint32 sensor2 = 4;
    if (has_sensor2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor2());
    }

    // required uint32 sensor3 = 5;
    if (has_sensor3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor3());
    }

    // required uint32 sensor4 = 6;
    if (has_sensor4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor4());
    }

    // required uint32 sensor5 = 7;
    if (has_sensor5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor5());
    }

    // required uint32 sensor6 = 8;
    if (has_sensor6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor6());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeEntry::MergeFrom(const NodeEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sensor1()) {
      set_sensor1(from.sensor1());
    }
    if (from.has_sensor2()) {
      set_sensor2(from.sensor2());
    }
    if (from.has_sensor3()) {
      set_sensor3(from.sensor3());
    }
    if (from.has_sensor4()) {
      set_sensor4(from.sensor4());
    }
    if (from.has_sensor5()) {
      set_sensor5(from.sensor5());
    }
    if (from.has_sensor6()) {
      set_sensor6(from.sensor6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeEntry::CopyFrom(const NodeEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void NodeEntry::Swap(NodeEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(sensor1_, other->sensor1_);
    std::swap(sensor2_, other->sensor2_);
    std::swap(sensor3_, other->sensor3_);
    std::swap(sensor4_, other->sensor4_);
    std::swap(sensor5_, other->sensor5_);
    std::swap(sensor6_, other->sensor6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeEntry_descriptor_;
  metadata.reflection = NodeEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeStatusRqst::kNodeIdFieldNumber;
#endif  // !_MSC_VER

GetNodeStatusRqst::GetNodeStatusRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeStatusRqst)
}

void GetNodeStatusRqst::InitAsDefaultInstance() {
}

GetNodeStatusRqst::GetNodeStatusRqst(const GetNodeStatusRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeStatusRqst)
}

void GetNodeStatusRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeStatusRqst::~GetNodeStatusRqst() {
  // @@protoc_insertion_point(destructor:GetNodeStatusRqst)
  SharedDtor();
}

void GetNodeStatusRqst::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void GetNodeStatusRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeStatusRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeStatusRqst_descriptor_;
}

const GetNodeStatusRqst& GetNodeStatusRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeStatusRqst* GetNodeStatusRqst::default_instance_ = NULL;

GetNodeStatusRqst* GetNodeStatusRqst::New() const {
  return new GetNodeStatusRqst;
}

void GetNodeStatusRqst::Clear() {
  if (has_node_id()) {
    if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      node_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeStatusRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeStatusRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeStatusRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeStatusRqst)
  return false;
#undef DO_
}

void GetNodeStatusRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeStatusRqst)
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeStatusRqst)
}

::google::protobuf::uint8* GetNodeStatusRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeStatusRqst)
  // required bytes node_id = 1;
  if (has_node_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeStatusRqst)
  return target;
}

int GetNodeStatusRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeStatusRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeStatusRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeStatusRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeStatusRqst::MergeFrom(const GetNodeStatusRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeStatusRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeStatusRqst::CopyFrom(const GetNodeStatusRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeStatusRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetNodeStatusRqst::Swap(GetNodeStatusRqst* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeStatusRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeStatusRqst_descriptor_;
  metadata.reflection = GetNodeStatusRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeStatusRsps::kNodeFieldNumber;
#endif  // !_MSC_VER

GetNodeStatusRsps::GetNodeStatusRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeStatusRsps)
}

void GetNodeStatusRsps::InitAsDefaultInstance() {
  node_ = const_cast< ::NodeEntry*>(&::NodeEntry::default_instance());
}

GetNodeStatusRsps::GetNodeStatusRsps(const GetNodeStatusRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeStatusRsps)
}

void GetNodeStatusRsps::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeStatusRsps::~GetNodeStatusRsps() {
  // @@protoc_insertion_point(destructor:GetNodeStatusRsps)
  SharedDtor();
}

void GetNodeStatusRsps::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void GetNodeStatusRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeStatusRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeStatusRsps_descriptor_;
}

const GetNodeStatusRsps& GetNodeStatusRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeStatusRsps* GetNodeStatusRsps::default_instance_ = NULL;

GetNodeStatusRsps* GetNodeStatusRsps::New() const {
  return new GetNodeStatusRsps;
}

void GetNodeStatusRsps::Clear() {
  if (has_node()) {
    if (node_ != NULL) node_->::NodeEntry::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeStatusRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeStatusRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeEntry node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeStatusRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeStatusRsps)
  return false;
#undef DO_
}

void GetNodeStatusRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeStatusRsps)
  // required .NodeEntry node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeStatusRsps)
}

::google::protobuf::uint8* GetNodeStatusRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeStatusRsps)
  // required .NodeEntry node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeStatusRsps)
  return target;
}

int GetNodeStatusRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeEntry node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeStatusRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeStatusRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeStatusRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeStatusRsps::MergeFrom(const GetNodeStatusRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::NodeEntry::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeStatusRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeStatusRsps::CopyFrom(const GetNodeStatusRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeStatusRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void GetNodeStatusRsps::Swap(GetNodeStatusRsps* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeStatusRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeStatusRsps_descriptor_;
  metadata.reflection = GetNodeStatusRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTopologyRsps::kNodeFieldNumber;
#endif  // !_MSC_VER

GetTopologyRsps::GetTopologyRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetTopologyRsps)
}

void GetTopologyRsps::InitAsDefaultInstance() {
}

GetTopologyRsps::GetTopologyRsps(const GetTopologyRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetTopologyRsps)
}

void GetTopologyRsps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTopologyRsps::~GetTopologyRsps() {
  // @@protoc_insertion_point(destructor:GetTopologyRsps)
  SharedDtor();
}

void GetTopologyRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTopologyRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTopologyRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTopologyRsps_descriptor_;
}

const GetTopologyRsps& GetTopologyRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetTopologyRsps* GetTopologyRsps::default_instance_ = NULL;

GetTopologyRsps* GetTopologyRsps::New() const {
  return new GetTopologyRsps;
}

void GetTopologyRsps::Clear() {
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTopologyRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetTopologyRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Node node = 1;
      case 1: {
        if (tag == 10) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetTopologyRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetTopologyRsps)
  return false;
#undef DO_
}

void GetTopologyRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetTopologyRsps)
  // repeated .Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetTopologyRsps)
}

::google::protobuf::uint8* GetTopologyRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetTopologyRsps)
  // repeated .Node node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetTopologyRsps)
  return target;
}

int GetTopologyRsps::ByteSize() const {
  int total_size = 0;

  // repeated .Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopologyRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTopologyRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTopologyRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTopologyRsps::MergeFrom(const GetTopologyRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTopologyRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopologyRsps::CopyFrom(const GetTopologyRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopologyRsps::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void GetTopologyRsps::Swap(GetTopologyRsps* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTopologyRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTopologyRsps_descriptor_;
  metadata.reflection = GetTopologyRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kLIdFieldNumber;
const int Node::kSIdFieldNumber;
const int Node::kLevelFieldNumber;
const int Node::kTimeFieldNumber;
const int Node::kParentFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Node)
}

void Node::InitAsDefaultInstance() {
  parent_ = const_cast< ::ParentNode*>(&::ParentNode::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  l_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (l_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l_id_;
  }
  if (s_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_id_;
  }
  if (this != default_instance_) {
    delete parent_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_l_id()) {
      if (l_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        l_id_->clear();
      }
    }
    if (has_s_id()) {
      if (s_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_id_->clear();
      }
    }
    level_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    if (has_parent()) {
      if (parent_ != NULL) parent_->::ParentNode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes l_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_l_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s_id;
        break;
      }

      // required string s_id = 2;
      case 2: {
        if (tag == 18) {
         parse_s_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s_id().data(), this->s_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_parent;
        break;
      }

      // required .ParentNode parent = 5;
      case 5: {
        if (tag == 42) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Node)
  // required bytes l_id = 1;
  if (has_l_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->l_id(), output);
  }

  // required string s_id = 2;
  if (has_s_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_id().data(), this->s_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // required .ParentNode parent = 5;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Node)
  // required bytes l_id = 1;
  if (has_l_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->l_id(), target);
  }

  // required string s_id = 2;
  if (has_s_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_id().data(), this->s_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // required .ParentNode parent = 5;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Node)
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes l_id = 1;
    if (has_l_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->l_id());
    }

    // required string s_id = 2;
    if (has_s_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required .ParentNode parent = 5;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_l_id()) {
      set_l_id(from.l_id());
    }
    if (from.has_s_id()) {
      set_s_id(from.s_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_parent()) {
      mutable_parent()->::ParentNode::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(l_id_, other->l_id_);
    std::swap(s_id_, other->s_id_);
    std::swap(level_, other->level_);
    std::swap(time_, other->time_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParentNode::kLIdFieldNumber;
const int ParentNode::kSIdFieldNumber;
const int ParentNode::kLevelFieldNumber;
const int ParentNode::kStatusFieldNumber;
const int ParentNode::kPriorityFieldNumber;
#endif  // !_MSC_VER

ParentNode::ParentNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ParentNode)
}

void ParentNode::InitAsDefaultInstance() {
}

ParentNode::ParentNode(const ParentNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ParentNode)
}

void ParentNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  l_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  status_ = 0u;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParentNode::~ParentNode() {
  // @@protoc_insertion_point(destructor:ParentNode)
  SharedDtor();
}

void ParentNode::SharedDtor() {
  if (l_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l_id_;
  }
  if (s_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_id_;
  }
  if (this != default_instance_) {
  }
}

void ParentNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParentNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParentNode_descriptor_;
}

const ParentNode& ParentNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

ParentNode* ParentNode::default_instance_ = NULL;

ParentNode* ParentNode::New() const {
  return new ParentNode;
}

void ParentNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ParentNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(level_, priority_);
    if (has_l_id()) {
      if (l_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        l_id_->clear();
      }
    }
    if (has_s_id()) {
      if (s_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParentNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ParentNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes l_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_l_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s_id;
        break;
      }

      // required string s_id = 2;
      case 2: {
        if (tag == 18) {
         parse_s_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s_id().data(), this->s_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }

      // required uint32 priority = 5;
      case 5: {
        if (tag == 40) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ParentNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ParentNode)
  return false;
#undef DO_
}

void ParentNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ParentNode)
  // required bytes l_id = 1;
  if (has_l_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->l_id(), output);
  }

  // required string s_id = 2;
  if (has_s_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_id().data(), this->s_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // required uint32 priority = 5;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ParentNode)
}

::google::protobuf::uint8* ParentNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentNode)
  // required bytes l_id = 1;
  if (has_l_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->l_id(), target);
  }

  // required string s_id = 2;
  if (has_s_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_id().data(), this->s_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // required uint32 priority = 5;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentNode)
  return target;
}

int ParentNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes l_id = 1;
    if (has_l_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->l_id());
    }

    // required string s_id = 2;
    if (has_s_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 priority = 5;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParentNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParentNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParentNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParentNode::MergeFrom(const ParentNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_l_id()) {
      set_l_id(from.l_id());
    }
    if (from.has_s_id()) {
      set_s_id(from.s_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParentNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentNode::CopyFrom(const ParentNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ParentNode::Swap(ParentNode* other) {
  if (other != this) {
    std::swap(l_id_, other->l_id_);
    std::swap(s_id_, other->s_id_);
    std::swap(level_, other->level_);
    std::swap(status_, other->status_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParentNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParentNode_descriptor_;
  metadata.reflection = ParentNode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SubscribeNotificationNtf_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeNotificationNtf_MessageType_descriptor_;
}
bool SubscribeNotificationNtf_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SubscribeNotificationNtf_MessageType SubscribeNotificationNtf::NODE_STATE_CHANGE;
const SubscribeNotificationNtf_MessageType SubscribeNotificationNtf::MEMORY_CARD_FULL;
const SubscribeNotificationNtf_MessageType SubscribeNotificationNtf::MEMORY_CARD_ANOMALY;
const SubscribeNotificationNtf_MessageType SubscribeNotificationNtf::MessageType_MIN;
const SubscribeNotificationNtf_MessageType SubscribeNotificationNtf::MessageType_MAX;
const int SubscribeNotificationNtf::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SubscribeNotificationNtf::kMessageFieldNumber;
const int SubscribeNotificationNtf::kParam1FieldNumber;
const int SubscribeNotificationNtf::kParam2FieldNumber;
const int SubscribeNotificationNtf::kStrMsg1FieldNumber;
const int SubscribeNotificationNtf::kStrMsg2FieldNumber;
const int SubscribeNotificationNtf::kTimeFieldNumber;
#endif  // !_MSC_VER

SubscribeNotificationNtf::SubscribeNotificationNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubscribeNotificationNtf)
}

void SubscribeNotificationNtf::InitAsDefaultInstance() {
}

SubscribeNotificationNtf::SubscribeNotificationNtf(const SubscribeNotificationNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SubscribeNotificationNtf)
}

void SubscribeNotificationNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = 1;
  param1_ = 0u;
  param2_ = 0u;
  str_msg1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_msg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeNotificationNtf::~SubscribeNotificationNtf() {
  // @@protoc_insertion_point(destructor:SubscribeNotificationNtf)
  SharedDtor();
}

void SubscribeNotificationNtf::SharedDtor() {
  if (str_msg1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_msg1_;
  }
  if (str_msg2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_msg2_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeNotificationNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeNotificationNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeNotificationNtf_descriptor_;
}

const SubscribeNotificationNtf& SubscribeNotificationNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SubscribeNotificationNtf* SubscribeNotificationNtf::default_instance_ = NULL;

SubscribeNotificationNtf* SubscribeNotificationNtf::New() const {
  return new SubscribeNotificationNtf;
}

void SubscribeNotificationNtf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubscribeNotificationNtf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(time_, param2_);
    message_ = 1;
    param1_ = 0u;
    if (has_str_msg1()) {
      if (str_msg1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_msg1_->clear();
      }
    }
    if (has_str_msg2()) {
      if (str_msg2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_msg2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeNotificationNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubscribeNotificationNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SubscribeNotificationNtf.MessageType message = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubscribeNotificationNtf_MessageType_IsValid(value)) {
            set_message(static_cast< ::SubscribeNotificationNtf_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param1;
        break;
      }

      // required uint32 param1 = 2;
      case 2: {
        if (tag == 16) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }

      // required uint32 param2 = 3;
      case 3: {
        if (tag == 24) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_str_msg1;
        break;
      }

      // required string str_msg1 = 4;
      case 4: {
        if (tag == 34) {
         parse_str_msg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_msg1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_msg1().data(), this->str_msg1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_msg1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_str_msg2;
        break;
      }

      // required string str_msg2 = 5;
      case 5: {
        if (tag == 42) {
         parse_str_msg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_msg2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_msg2().data(), this->str_msg2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_msg2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // required uint64 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubscribeNotificationNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubscribeNotificationNtf)
  return false;
#undef DO_
}

void SubscribeNotificationNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubscribeNotificationNtf)
  // required .SubscribeNotificationNtf.MessageType message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message(), output);
  }

  // required uint32 param1 = 2;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param1(), output);
  }

  // required uint32 param2 = 3;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param2(), output);
  }

  // required string str_msg1 = 4;
  if (has_str_msg1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_msg1().data(), this->str_msg1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_msg1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str_msg1(), output);
  }

  // required string str_msg2 = 5;
  if (has_str_msg2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_msg2().data(), this->str_msg2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_msg2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->str_msg2(), output);
  }

  // required uint64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubscribeNotificationNtf)
}

::google::protobuf::uint8* SubscribeNotificationNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscribeNotificationNtf)
  // required .SubscribeNotificationNtf.MessageType message = 1;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message(), target);
  }

  // required uint32 param1 = 2;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param1(), target);
  }

  // required uint32 param2 = 3;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param2(), target);
  }

  // required string str_msg1 = 4;
  if (has_str_msg1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_msg1().data(), this->str_msg1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_msg1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_msg1(), target);
  }

  // required string str_msg2 = 5;
  if (has_str_msg2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_msg2().data(), this->str_msg2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_msg2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str_msg2(), target);
  }

  // required uint64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscribeNotificationNtf)
  return target;
}

int SubscribeNotificationNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SubscribeNotificationNtf.MessageType message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message());
    }

    // required uint32 param1 = 2;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // required uint32 param2 = 3;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

    // required string str_msg1 = 4;
    if (has_str_msg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_msg1());
    }

    // required string str_msg2 = 5;
    if (has_str_msg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_msg2());
    }

    // required uint64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeNotificationNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeNotificationNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeNotificationNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeNotificationNtf::MergeFrom(const SubscribeNotificationNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_str_msg1()) {
      set_str_msg1(from.str_msg1());
    }
    if (from.has_str_msg2()) {
      set_str_msg2(from.str_msg2());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeNotificationNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeNotificationNtf::CopyFrom(const SubscribeNotificationNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeNotificationNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SubscribeNotificationNtf::Swap(SubscribeNotificationNtf* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(str_msg1_, other->str_msg1_);
    std::swap(str_msg2_, other->str_msg2_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeNotificationNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeNotificationNtf_descriptor_;
  metadata.reflection = SubscribeNotificationNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceBindingRqst::kValvectrlIdFieldNumber;
const int DeviceBindingRqst::kHomegwIdFieldNumber;
#endif  // !_MSC_VER

DeviceBindingRqst::DeviceBindingRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceBindingRqst)
}

void DeviceBindingRqst::InitAsDefaultInstance() {
}

DeviceBindingRqst::DeviceBindingRqst(const DeviceBindingRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceBindingRqst)
}

void DeviceBindingRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  valvectrl_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homegw_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceBindingRqst::~DeviceBindingRqst() {
  // @@protoc_insertion_point(destructor:DeviceBindingRqst)
  SharedDtor();
}

void DeviceBindingRqst::SharedDtor() {
  if (valvectrl_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete valvectrl_id_;
  }
  if (homegw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete homegw_id_;
  }
  if (this != default_instance_) {
  }
}

void DeviceBindingRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceBindingRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceBindingRqst_descriptor_;
}

const DeviceBindingRqst& DeviceBindingRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

DeviceBindingRqst* DeviceBindingRqst::default_instance_ = NULL;

DeviceBindingRqst* DeviceBindingRqst::New() const {
  return new DeviceBindingRqst;
}

void DeviceBindingRqst::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_valvectrl_id()) {
      if (valvectrl_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        valvectrl_id_->clear();
      }
    }
    if (has_homegw_id()) {
      if (homegw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        homegw_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceBindingRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceBindingRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string valvectrl_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valvectrl_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->valvectrl_id().data(), this->valvectrl_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "valvectrl_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_homegw_id;
        break;
      }

      // required string homegw_id = 2;
      case 2: {
        if (tag == 18) {
         parse_homegw_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_homegw_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->homegw_id().data(), this->homegw_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "homegw_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceBindingRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceBindingRqst)
  return false;
#undef DO_
}

void DeviceBindingRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceBindingRqst)
  // required string valvectrl_id = 1;
  if (has_valvectrl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valvectrl_id().data(), this->valvectrl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "valvectrl_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->valvectrl_id(), output);
  }

  // required string homegw_id = 2;
  if (has_homegw_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homegw_id().data(), this->homegw_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homegw_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->homegw_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceBindingRqst)
}

::google::protobuf::uint8* DeviceBindingRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceBindingRqst)
  // required string valvectrl_id = 1;
  if (has_valvectrl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valvectrl_id().data(), this->valvectrl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "valvectrl_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->valvectrl_id(), target);
  }

  // required string homegw_id = 2;
  if (has_homegw_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homegw_id().data(), this->homegw_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homegw_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->homegw_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceBindingRqst)
  return target;
}

int DeviceBindingRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string valvectrl_id = 1;
    if (has_valvectrl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valvectrl_id());
    }

    // required string homegw_id = 2;
    if (has_homegw_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->homegw_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceBindingRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceBindingRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceBindingRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceBindingRqst::MergeFrom(const DeviceBindingRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valvectrl_id()) {
      set_valvectrl_id(from.valvectrl_id());
    }
    if (from.has_homegw_id()) {
      set_homegw_id(from.homegw_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceBindingRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceBindingRqst::CopyFrom(const DeviceBindingRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceBindingRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeviceBindingRqst::Swap(DeviceBindingRqst* other) {
  if (other != this) {
    std::swap(valvectrl_id_, other->valvectrl_id_);
    std::swap(homegw_id_, other->homegw_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceBindingRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceBindingRqst_descriptor_;
  metadata.reflection = DeviceBindingRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RmDeviceBindingRqst::kValvectrlIdFieldNumber;
const int RmDeviceBindingRqst::kHomegwIdFieldNumber;
#endif  // !_MSC_VER

RmDeviceBindingRqst::RmDeviceBindingRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RmDeviceBindingRqst)
}

void RmDeviceBindingRqst::InitAsDefaultInstance() {
}

RmDeviceBindingRqst::RmDeviceBindingRqst(const RmDeviceBindingRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RmDeviceBindingRqst)
}

void RmDeviceBindingRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  valvectrl_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homegw_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RmDeviceBindingRqst::~RmDeviceBindingRqst() {
  // @@protoc_insertion_point(destructor:RmDeviceBindingRqst)
  SharedDtor();
}

void RmDeviceBindingRqst::SharedDtor() {
  if (valvectrl_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete valvectrl_id_;
  }
  if (homegw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete homegw_id_;
  }
  if (this != default_instance_) {
  }
}

void RmDeviceBindingRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RmDeviceBindingRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmDeviceBindingRqst_descriptor_;
}

const RmDeviceBindingRqst& RmDeviceBindingRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

RmDeviceBindingRqst* RmDeviceBindingRqst::default_instance_ = NULL;

RmDeviceBindingRqst* RmDeviceBindingRqst::New() const {
  return new RmDeviceBindingRqst;
}

void RmDeviceBindingRqst::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_valvectrl_id()) {
      if (valvectrl_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        valvectrl_id_->clear();
      }
    }
    if (has_homegw_id()) {
      if (homegw_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        homegw_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RmDeviceBindingRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RmDeviceBindingRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string valvectrl_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valvectrl_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->valvectrl_id().data(), this->valvectrl_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "valvectrl_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_homegw_id;
        break;
      }

      // required string homegw_id = 2;
      case 2: {
        if (tag == 18) {
         parse_homegw_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_homegw_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->homegw_id().data(), this->homegw_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "homegw_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RmDeviceBindingRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RmDeviceBindingRqst)
  return false;
#undef DO_
}

void RmDeviceBindingRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RmDeviceBindingRqst)
  // required string valvectrl_id = 1;
  if (has_valvectrl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valvectrl_id().data(), this->valvectrl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "valvectrl_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->valvectrl_id(), output);
  }

  // required string homegw_id = 2;
  if (has_homegw_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homegw_id().data(), this->homegw_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homegw_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->homegw_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RmDeviceBindingRqst)
}

::google::protobuf::uint8* RmDeviceBindingRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RmDeviceBindingRqst)
  // required string valvectrl_id = 1;
  if (has_valvectrl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valvectrl_id().data(), this->valvectrl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "valvectrl_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->valvectrl_id(), target);
  }

  // required string homegw_id = 2;
  if (has_homegw_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->homegw_id().data(), this->homegw_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homegw_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->homegw_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RmDeviceBindingRqst)
  return target;
}

int RmDeviceBindingRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string valvectrl_id = 1;
    if (has_valvectrl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valvectrl_id());
    }

    // required string homegw_id = 2;
    if (has_homegw_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->homegw_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RmDeviceBindingRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RmDeviceBindingRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RmDeviceBindingRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RmDeviceBindingRqst::MergeFrom(const RmDeviceBindingRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valvectrl_id()) {
      set_valvectrl_id(from.valvectrl_id());
    }
    if (from.has_homegw_id()) {
      set_homegw_id(from.homegw_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RmDeviceBindingRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RmDeviceBindingRqst::CopyFrom(const RmDeviceBindingRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmDeviceBindingRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RmDeviceBindingRqst::Swap(RmDeviceBindingRqst* other) {
  if (other != this) {
    std::swap(valvectrl_id_, other->valvectrl_id_);
    std::swap(homegw_id_, other->homegw_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RmDeviceBindingRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RmDeviceBindingRqst_descriptor_;
  metadata.reflection = RmDeviceBindingRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestNodeDataUploadNtf::kNodeIdFieldNumber;
const int RequestNodeDataUploadNtf::kTypeFieldNumber;
const int RequestNodeDataUploadNtf::kDataFieldNumber;
#endif  // !_MSC_VER

RequestNodeDataUploadNtf::RequestNodeDataUploadNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestNodeDataUploadNtf)
}

void RequestNodeDataUploadNtf::InitAsDefaultInstance() {
}

RequestNodeDataUploadNtf::RequestNodeDataUploadNtf(const RequestNodeDataUploadNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RequestNodeDataUploadNtf)
}

void RequestNodeDataUploadNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNodeDataUploadNtf::~RequestNodeDataUploadNtf() {
  // @@protoc_insertion_point(destructor:RequestNodeDataUploadNtf)
  SharedDtor();
}

void RequestNodeDataUploadNtf::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void RequestNodeDataUploadNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNodeDataUploadNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestNodeDataUploadNtf_descriptor_;
}

const RequestNodeDataUploadNtf& RequestNodeDataUploadNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

RequestNodeDataUploadNtf* RequestNodeDataUploadNtf::default_instance_ = NULL;

RequestNodeDataUploadNtf* RequestNodeDataUploadNtf::New() const {
  return new RequestNodeDataUploadNtf;
}

void RequestNodeDataUploadNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
    type_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestNodeDataUploadNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestNodeDataUploadNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .DataType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataType_IsValid(value)) {
            set_type(static_cast< ::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .SensorData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestNodeDataUploadNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestNodeDataUploadNtf)
  return false;
#undef DO_
}

void RequestNodeDataUploadNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestNodeDataUploadNtf)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // required .DataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .SensorData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestNodeDataUploadNtf)
}

::google::protobuf::uint8* RequestNodeDataUploadNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestNodeDataUploadNtf)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // required .DataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .SensorData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestNodeDataUploadNtf)
  return target;
}

int RequestNodeDataUploadNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

    // required .DataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .SensorData data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNodeDataUploadNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestNodeDataUploadNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestNodeDataUploadNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestNodeDataUploadNtf::MergeFrom(const RequestNodeDataUploadNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestNodeDataUploadNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNodeDataUploadNtf::CopyFrom(const RequestNodeDataUploadNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNodeDataUploadNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestNodeDataUploadNtf::Swap(RequestNodeDataUploadNtf* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestNodeDataUploadNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestNodeDataUploadNtf_descriptor_;
  metadata.reflection = RequestNodeDataUploadNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorData::kSensorNoFieldNumber;
const int SensorData::kTypeFieldNumber;
const int SensorData::kDataFieldNumber;
const int SensorData::kReservedFieldNumber;
const int SensorData::kTimeFieldNumber;
#endif  // !_MSC_VER

SensorData::SensorData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorData)
}

void SensorData::InitAsDefaultInstance() {
}

SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorData)
}

void SensorData::SharedCtor() {
  _cached_size_ = 0;
  sensor_no_ = 0u;
  type_ = 0u;
  data_ = 0;
  reserved_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorData_descriptor_;
}

const SensorData& SensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SensorData* SensorData::default_instance_ = NULL;

SensorData* SensorData::New() const {
  return new SensorData;
}

void SensorData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SensorData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sensor_no_, time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sensor_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_no_)));
          set_has_sensor_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_data;
        break;
      }

      // required float data = 3;
      case 3: {
        if (tag == 29) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_reserved;
        break;
      }

      // optional float reserved = 4;
      case 4: {
        if (tag == 37) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // required uint64 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorData)
  return false;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorData)
  // required uint32 sensor_no = 1;
  if (has_sensor_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor_no(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required float data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->data(), output);
  }

  // optional float reserved = 4;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->reserved(), output);
  }

  // required uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SensorData)
}

::google::protobuf::uint8* SensorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorData)
  // required uint32 sensor_no = 1;
  if (has_sensor_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor_no(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required float data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->data(), target);
  }

  // optional float reserved = 4;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->reserved(), target);
  }

  // required uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorData)
  return target;
}

int SensorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sensor_no = 1;
    if (has_sensor_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_no());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required float data = 3;
    if (has_data()) {
      total_size += 1 + 4;
    }

    // optional float reserved = 4;
    if (has_reserved()) {
      total_size += 1 + 4;
    }

    // required uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_no()) {
      set_sensor_no(from.sensor_no());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other != this) {
    std::swap(sensor_no_, other->sensor_no_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(reserved_, other->reserved_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorData_descriptor_;
  metadata.reflection = SensorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NmpDataUploadNtf::kNodeIdFieldNumber;
const int NmpDataUploadNtf::kNmpDataFieldNumber;
#endif  // !_MSC_VER

NmpDataUploadNtf::NmpDataUploadNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NmpDataUploadNtf)
}

void NmpDataUploadNtf::InitAsDefaultInstance() {
}

NmpDataUploadNtf::NmpDataUploadNtf(const NmpDataUploadNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NmpDataUploadNtf)
}

void NmpDataUploadNtf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nmp_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NmpDataUploadNtf::~NmpDataUploadNtf() {
  // @@protoc_insertion_point(destructor:NmpDataUploadNtf)
  SharedDtor();
}

void NmpDataUploadNtf::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (nmp_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nmp_data_;
  }
  if (this != default_instance_) {
  }
}

void NmpDataUploadNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NmpDataUploadNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NmpDataUploadNtf_descriptor_;
}

const NmpDataUploadNtf& NmpDataUploadNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

NmpDataUploadNtf* NmpDataUploadNtf::default_instance_ = NULL;

NmpDataUploadNtf* NmpDataUploadNtf::New() const {
  return new NmpDataUploadNtf;
}

void NmpDataUploadNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
    if (has_nmp_data()) {
      if (nmp_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nmp_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NmpDataUploadNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NmpDataUploadNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nmp_data;
        break;
      }

      // required bytes nmp_data = 2;
      case 2: {
        if (tag == 18) {
         parse_nmp_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nmp_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NmpDataUploadNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NmpDataUploadNtf)
  return false;
#undef DO_
}

void NmpDataUploadNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NmpDataUploadNtf)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // required bytes nmp_data = 2;
  if (has_nmp_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nmp_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NmpDataUploadNtf)
}

::google::protobuf::uint8* NmpDataUploadNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NmpDataUploadNtf)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // required bytes nmp_data = 2;
  if (has_nmp_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nmp_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NmpDataUploadNtf)
  return target;
}

int NmpDataUploadNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

    // required bytes nmp_data = 2;
    if (has_nmp_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nmp_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NmpDataUploadNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NmpDataUploadNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NmpDataUploadNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NmpDataUploadNtf::MergeFrom(const NmpDataUploadNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_nmp_data()) {
      set_nmp_data(from.nmp_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NmpDataUploadNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NmpDataUploadNtf::CopyFrom(const NmpDataUploadNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NmpDataUploadNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NmpDataUploadNtf::Swap(NmpDataUploadNtf* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(nmp_data_, other->nmp_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NmpDataUploadNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NmpDataUploadNtf_descriptor_;
  metadata.reflection = NmpDataUploadNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContinueNtf::kSeqFieldNumber;
#endif  // !_MSC_VER

ContinueNtf::ContinueNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContinueNtf)
}

void ContinueNtf::InitAsDefaultInstance() {
}

ContinueNtf::ContinueNtf(const ContinueNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContinueNtf)
}

void ContinueNtf::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContinueNtf::~ContinueNtf() {
  // @@protoc_insertion_point(destructor:ContinueNtf)
  SharedDtor();
}

void ContinueNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContinueNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContinueNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContinueNtf_descriptor_;
}

const ContinueNtf& ContinueNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

ContinueNtf* ContinueNtf::default_instance_ = NULL;

ContinueNtf* ContinueNtf::New() const {
  return new ContinueNtf;
}

void ContinueNtf::Clear() {
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContinueNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContinueNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContinueNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContinueNtf)
  return false;
#undef DO_
}

void ContinueNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContinueNtf)
  // required uint32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContinueNtf)
}

::google::protobuf::uint8* ContinueNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContinueNtf)
  // required uint32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContinueNtf)
  return target;
}

int ContinueNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContinueNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContinueNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContinueNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContinueNtf::MergeFrom(const ContinueNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContinueNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueNtf::CopyFrom(const ContinueNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContinueNtf::Swap(ContinueNtf* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContinueNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContinueNtf_descriptor_;
  metadata.reflection = ContinueNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeRealDataRqst::kNodeIdFieldNumber;
const int GetNodeRealDataRqst::kSensorNoFieldNumber;
const int GetNodeRealDataRqst::kTimeoutFieldNumber;
#endif  // !_MSC_VER

GetNodeRealDataRqst::GetNodeRealDataRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeRealDataRqst)
}

void GetNodeRealDataRqst::InitAsDefaultInstance() {
}

GetNodeRealDataRqst::GetNodeRealDataRqst(const GetNodeRealDataRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeRealDataRqst)
}

void GetNodeRealDataRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_no_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeRealDataRqst::~GetNodeRealDataRqst() {
  // @@protoc_insertion_point(destructor:GetNodeRealDataRqst)
  SharedDtor();
}

void GetNodeRealDataRqst::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void GetNodeRealDataRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeRealDataRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeRealDataRqst_descriptor_;
}

const GetNodeRealDataRqst& GetNodeRealDataRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeRealDataRqst* GetNodeRealDataRqst::default_instance_ = NULL;

GetNodeRealDataRqst* GetNodeRealDataRqst::New() const {
  return new GetNodeRealDataRqst;
}

void GetNodeRealDataRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetNodeRealDataRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sensor_no_, timeout_);
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeRealDataRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeRealDataRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sensor_no;
        break;
      }

      // required uint32 sensor_no = 2;
      case 2: {
        if (tag == 16) {
         parse_sensor_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_no_)));
          set_has_sensor_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }

      // required uint32 timeout = 3;
      case 3: {
        if (tag == 24) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeRealDataRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeRealDataRqst)
  return false;
#undef DO_
}

void GetNodeRealDataRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeRealDataRqst)
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node_id(), output);
  }

  // required uint32 sensor_no = 2;
  if (has_sensor_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sensor_no(), output);
  }

  // required uint32 timeout = 3;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeRealDataRqst)
}

::google::protobuf::uint8* GetNodeRealDataRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeRealDataRqst)
  // required bytes node_id = 1;
  if (has_node_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_id(), target);
  }

  // required uint32 sensor_no = 2;
  if (has_sensor_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sensor_no(), target);
  }

  // required uint32 timeout = 3;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeRealDataRqst)
  return target;
}

int GetNodeRealDataRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required uint32 sensor_no = 2;
    if (has_sensor_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_no());
    }

    // required uint32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeRealDataRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeRealDataRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeRealDataRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeRealDataRqst::MergeFrom(const GetNodeRealDataRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_sensor_no()) {
      set_sensor_no(from.sensor_no());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeRealDataRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeRealDataRqst::CopyFrom(const GetNodeRealDataRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeRealDataRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetNodeRealDataRqst::Swap(GetNodeRealDataRqst* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(sensor_no_, other->sensor_no_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeRealDataRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeRealDataRqst_descriptor_;
  metadata.reflection = GetNodeRealDataRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeRealDataRsps::kNodeIdFieldNumber;
const int GetNodeRealDataRsps::kTypeFieldNumber;
const int GetNodeRealDataRsps::kSDataFieldNumber;
#endif  // !_MSC_VER

GetNodeRealDataRsps::GetNodeRealDataRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeRealDataRsps)
}

void GetNodeRealDataRsps::InitAsDefaultInstance() {
}

GetNodeRealDataRsps::GetNodeRealDataRsps(const GetNodeRealDataRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeRealDataRsps)
}

void GetNodeRealDataRsps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeRealDataRsps::~GetNodeRealDataRsps() {
  // @@protoc_insertion_point(destructor:GetNodeRealDataRsps)
  SharedDtor();
}

void GetNodeRealDataRsps::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void GetNodeRealDataRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeRealDataRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeRealDataRsps_descriptor_;
}

const GetNodeRealDataRsps& GetNodeRealDataRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeRealDataRsps* GetNodeRealDataRsps::default_instance_ = NULL;

GetNodeRealDataRsps* GetNodeRealDataRsps::New() const {
  return new GetNodeRealDataRsps;
}

void GetNodeRealDataRsps::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
    type_ = 0;
  }
  s_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeRealDataRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeRealDataRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .DataType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataType_IsValid(value)) {
            set_type(static_cast< ::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s_data;
        break;
      }

      // repeated .SensorData s_data = 3;
      case 3: {
        if (tag == 26) {
         parse_s_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_s_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeRealDataRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeRealDataRsps)
  return false;
#undef DO_
}

void GetNodeRealDataRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeRealDataRsps)
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node_id(), output);
  }

  // required .DataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .SensorData s_data = 3;
  for (int i = 0; i < this->s_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->s_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeRealDataRsps)
}

::google::protobuf::uint8* GetNodeRealDataRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeRealDataRsps)
  // required bytes node_id = 1;
  if (has_node_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_id(), target);
  }

  // required .DataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .SensorData s_data = 3;
  for (int i = 0; i < this->s_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->s_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeRealDataRsps)
  return target;
}

int GetNodeRealDataRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required .DataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .SensorData s_data = 3;
  total_size += 1 * this->s_data_size();
  for (int i = 0; i < this->s_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->s_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeRealDataRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeRealDataRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeRealDataRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeRealDataRsps::MergeFrom(const GetNodeRealDataRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  s_data_.MergeFrom(from.s_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeRealDataRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeRealDataRsps::CopyFrom(const GetNodeRealDataRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeRealDataRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->s_data())) return false;
  return true;
}

void GetNodeRealDataRsps::Swap(GetNodeRealDataRsps* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(type_, other->type_);
    s_data_.Swap(&other->s_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeRealDataRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeRealDataRsps_descriptor_;
  metadata.reflection = GetNodeRealDataRsps_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SetCommandToNodeRqst_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCommandToNodeRqst_Command_descriptor_;
}
bool SetCommandToNodeRqst_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SetCommandToNodeRqst_Command SetCommandToNodeRqst::ON_OFF;
const SetCommandToNodeRqst_Command SetCommandToNodeRqst::SET_THRESHOLD;
const SetCommandToNodeRqst_Command SetCommandToNodeRqst::SET_INTERVAL;
const SetCommandToNodeRqst_Command SetCommandToNodeRqst::DATA_SWITCH;
const SetCommandToNodeRqst_Command SetCommandToNodeRqst::Command_MIN;
const SetCommandToNodeRqst_Command SetCommandToNodeRqst::Command_MAX;
const int SetCommandToNodeRqst::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SetCommandToNodeRqst::kNodeIdFieldNumber;
const int SetCommandToNodeRqst::kCmdFieldNumber;
const int SetCommandToNodeRqst::kSubTypeFieldNumber;
const int SetCommandToNodeRqst::kNodeDataFieldNumber;
const int SetCommandToNodeRqst::kSensorDataListFieldNumber;
#endif  // !_MSC_VER

SetCommandToNodeRqst::SetCommandToNodeRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetCommandToNodeRqst)
}

void SetCommandToNodeRqst::InitAsDefaultInstance() {
  node_data_ = const_cast< ::TypeData*>(&::TypeData::default_instance());
}

SetCommandToNodeRqst::SetCommandToNodeRqst(const SetCommandToNodeRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetCommandToNodeRqst)
}

void SetCommandToNodeRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 1;
  sub_type_ = 0u;
  node_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCommandToNodeRqst::~SetCommandToNodeRqst() {
  // @@protoc_insertion_point(destructor:SetCommandToNodeRqst)
  SharedDtor();
}

void SetCommandToNodeRqst::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
    delete node_data_;
  }
}

void SetCommandToNodeRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCommandToNodeRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCommandToNodeRqst_descriptor_;
}

const SetCommandToNodeRqst& SetCommandToNodeRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SetCommandToNodeRqst* SetCommandToNodeRqst::default_instance_ = NULL;

SetCommandToNodeRqst* SetCommandToNodeRqst::New() const {
  return new SetCommandToNodeRqst;
}

void SetCommandToNodeRqst::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
    cmd_ = 1;
    sub_type_ = 0u;
    if (has_node_data()) {
      if (node_data_ != NULL) node_data_->::TypeData::Clear();
    }
  }
  sensor_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCommandToNodeRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetCommandToNodeRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .SetCommandToNodeRqst.Command cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SetCommandToNodeRqst_Command_IsValid(value)) {
            set_cmd(static_cast< ::SetCommandToNodeRqst_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_node_data;
        break;
      }

      // optional .TypeData node_data = 4;
      case 4: {
        if (tag == 34) {
         parse_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sensor_data_list;
        break;
      }

      // repeated .SensorTypeData sensor_data_list = 5;
      case 5: {
        if (tag == 42) {
         parse_sensor_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor_data_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sensor_data_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetCommandToNodeRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetCommandToNodeRqst)
  return false;
#undef DO_
}

void SetCommandToNodeRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetCommandToNodeRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // required .SetCommandToNodeRqst.Command cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional uint32 sub_type = 3;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_type(), output);
  }

  // optional .TypeData node_data = 4;
  if (has_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node_data(), output);
  }

  // repeated .SensorTypeData sensor_data_list = 5;
  for (int i = 0; i < this->sensor_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensor_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetCommandToNodeRqst)
}

::google::protobuf::uint8* SetCommandToNodeRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetCommandToNodeRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // required .SetCommandToNodeRqst.Command cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional uint32 sub_type = 3;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_type(), target);
  }

  // optional .TypeData node_data = 4;
  if (has_node_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->node_data(), target);
  }

  // repeated .SensorTypeData sensor_data_list = 5;
  for (int i = 0; i < this->sensor_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sensor_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetCommandToNodeRqst)
  return target;
}

int SetCommandToNodeRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

    // required .SetCommandToNodeRqst.Command cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 sub_type = 3;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

    // optional .TypeData node_data = 4;
    if (has_node_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_data());
    }

  }
  // repeated .SensorTypeData sensor_data_list = 5;
  total_size += 1 * this->sensor_data_list_size();
  for (int i = 0; i < this->sensor_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCommandToNodeRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCommandToNodeRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCommandToNodeRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCommandToNodeRqst::MergeFrom(const SetCommandToNodeRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensor_data_list_.MergeFrom(from.sensor_data_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_node_data()) {
      mutable_node_data()->::TypeData::MergeFrom(from.node_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCommandToNodeRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCommandToNodeRqst::CopyFrom(const SetCommandToNodeRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCommandToNodeRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_node_data()) {
    if (!this->node_data().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sensor_data_list())) return false;
  return true;
}

void SetCommandToNodeRqst::Swap(SetCommandToNodeRqst* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(node_data_, other->node_data_);
    sensor_data_list_.Swap(&other->sensor_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCommandToNodeRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCommandToNodeRqst_descriptor_;
  metadata.reflection = SetCommandToNodeRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TypeData::kTypeFieldNumber;
const int TypeData::kDataFieldNumber;
#endif  // !_MSC_VER

TypeData::TypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TypeData)
}

void TypeData::InitAsDefaultInstance() {
}

TypeData::TypeData(const TypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TypeData)
}

void TypeData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeData::~TypeData() {
  // @@protoc_insertion_point(destructor:TypeData)
  SharedDtor();
}

void TypeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeData_descriptor_;
}

const TypeData& TypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

TypeData* TypeData::default_instance_ = NULL;

TypeData* TypeData::New() const {
  return new TypeData;
}

void TypeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TypeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, data_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        break;
      }

      // required float data = 2;
      case 2: {
        if (tag == 21) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TypeData)
  return false;
#undef DO_
}

void TypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TypeData)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required float data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TypeData)
}

::google::protobuf::uint8* TypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TypeData)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required float data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TypeData)
  return target;
}

int TypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required float data = 2;
    if (has_data()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeData::MergeFrom(const TypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeData::CopyFrom(const TypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void TypeData::Swap(TypeData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeData_descriptor_;
  metadata.reflection = TypeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorTypeData::kSensorNoFieldNumber;
const int SensorTypeData::kTypeFieldNumber;
const int SensorTypeData::kDataFieldNumber;
#endif  // !_MSC_VER

SensorTypeData::SensorTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorTypeData)
}

void SensorTypeData::InitAsDefaultInstance() {
}

SensorTypeData::SensorTypeData(const SensorTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorTypeData)
}

void SensorTypeData::SharedCtor() {
  _cached_size_ = 0;
  sensor_no_ = 0u;
  type_ = 0u;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorTypeData::~SensorTypeData() {
  // @@protoc_insertion_point(destructor:SensorTypeData)
  SharedDtor();
}

void SensorTypeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorTypeData_descriptor_;
}

const SensorTypeData& SensorTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SensorTypeData* SensorTypeData::default_instance_ = NULL;

SensorTypeData* SensorTypeData::New() const {
  return new SensorTypeData;
}

void SensorTypeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SensorTypeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sensor_no_, data_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorTypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sensor_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_no_)));
          set_has_sensor_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_data;
        break;
      }

      // required float data = 3;
      case 3: {
        if (tag == 29) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorTypeData)
  return false;
#undef DO_
}

void SensorTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorTypeData)
  // required uint32 sensor_no = 1;
  if (has_sensor_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor_no(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required float data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SensorTypeData)
}

::google::protobuf::uint8* SensorTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorTypeData)
  // required uint32 sensor_no = 1;
  if (has_sensor_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor_no(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required float data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorTypeData)
  return target;
}

int SensorTypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sensor_no = 1;
    if (has_sensor_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_no());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required float data = 3;
    if (has_data()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorTypeData::MergeFrom(const SensorTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_no()) {
      set_sensor_no(from.sensor_no());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorTypeData::CopyFrom(const SensorTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorTypeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void SensorTypeData::Swap(SensorTypeData* other) {
  if (other != this) {
    std::swap(sensor_no_, other->sensor_no_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorTypeData_descriptor_;
  metadata.reflection = SensorTypeData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetNodeSettingsRqst_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeSettingsRqst_Command_descriptor_;
}
bool GetNodeSettingsRqst_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetNodeSettingsRqst_Command GetNodeSettingsRqst::GET_ON_OFF;
const GetNodeSettingsRqst_Command GetNodeSettingsRqst::GET_THRESHOLD;
const GetNodeSettingsRqst_Command GetNodeSettingsRqst::GET_INTERVAL;
const GetNodeSettingsRqst_Command GetNodeSettingsRqst::Command_MIN;
const GetNodeSettingsRqst_Command GetNodeSettingsRqst::Command_MAX;
const int GetNodeSettingsRqst::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetNodeSettingsRqst::kNodeIdFieldNumber;
const int GetNodeSettingsRqst::kCmdFieldNumber;
const int GetNodeSettingsRqst::kSubTypeFieldNumber;
const int GetNodeSettingsRqst::kSensorNoFieldNumber;
#endif  // !_MSC_VER

GetNodeSettingsRqst::GetNodeSettingsRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeSettingsRqst)
}

void GetNodeSettingsRqst::InitAsDefaultInstance() {
}

GetNodeSettingsRqst::GetNodeSettingsRqst(const GetNodeSettingsRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeSettingsRqst)
}

void GetNodeSettingsRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 1;
  sub_type_ = 0u;
  sensor_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeSettingsRqst::~GetNodeSettingsRqst() {
  // @@protoc_insertion_point(destructor:GetNodeSettingsRqst)
  SharedDtor();
}

void GetNodeSettingsRqst::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void GetNodeSettingsRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeSettingsRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeSettingsRqst_descriptor_;
}

const GetNodeSettingsRqst& GetNodeSettingsRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeSettingsRqst* GetNodeSettingsRqst::default_instance_ = NULL;

GetNodeSettingsRqst* GetNodeSettingsRqst::New() const {
  return new GetNodeSettingsRqst;
}

void GetNodeSettingsRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetNodeSettingsRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sub_type_, sensor_no_);
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
    cmd_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeSettingsRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeSettingsRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .GetNodeSettingsRqst.Command cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GetNodeSettingsRqst_Command_IsValid(value)) {
            set_cmd(static_cast< ::GetNodeSettingsRqst_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sensor_no;
        break;
      }

      // required uint32 sensor_no = 4;
      case 4: {
        if (tag == 32) {
         parse_sensor_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_no_)));
          set_has_sensor_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeSettingsRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeSettingsRqst)
  return false;
#undef DO_
}

void GetNodeSettingsRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeSettingsRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // required .GetNodeSettingsRqst.Command cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional uint32 sub_type = 3;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_type(), output);
  }

  // required uint32 sensor_no = 4;
  if (has_sensor_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sensor_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeSettingsRqst)
}

::google::protobuf::uint8* GetNodeSettingsRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeSettingsRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // required .GetNodeSettingsRqst.Command cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional uint32 sub_type = 3;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_type(), target);
  }

  // required uint32 sensor_no = 4;
  if (has_sensor_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sensor_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeSettingsRqst)
  return target;
}

int GetNodeSettingsRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

    // required .GetNodeSettingsRqst.Command cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 sub_type = 3;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

    // required uint32 sensor_no = 4;
    if (has_sensor_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeSettingsRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeSettingsRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeSettingsRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeSettingsRqst::MergeFrom(const GetNodeSettingsRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_sensor_no()) {
      set_sensor_no(from.sensor_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeSettingsRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSettingsRqst::CopyFrom(const GetNodeSettingsRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSettingsRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void GetNodeSettingsRqst::Swap(GetNodeSettingsRqst* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(sensor_no_, other->sensor_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeSettingsRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeSettingsRqst_descriptor_;
  metadata.reflection = GetNodeSettingsRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeSettingsRsps::kNodeDataFieldNumber;
const int GetNodeSettingsRsps::kSensorDataListFieldNumber;
#endif  // !_MSC_VER

GetNodeSettingsRsps::GetNodeSettingsRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetNodeSettingsRsps)
}

void GetNodeSettingsRsps::InitAsDefaultInstance() {
  node_data_ = const_cast< ::TypeData*>(&::TypeData::default_instance());
}

GetNodeSettingsRsps::GetNodeSettingsRsps(const GetNodeSettingsRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetNodeSettingsRsps)
}

void GetNodeSettingsRsps::SharedCtor() {
  _cached_size_ = 0;
  node_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeSettingsRsps::~GetNodeSettingsRsps() {
  // @@protoc_insertion_point(destructor:GetNodeSettingsRsps)
  SharedDtor();
}

void GetNodeSettingsRsps::SharedDtor() {
  if (this != default_instance_) {
    delete node_data_;
  }
}

void GetNodeSettingsRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeSettingsRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeSettingsRsps_descriptor_;
}

const GetNodeSettingsRsps& GetNodeSettingsRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetNodeSettingsRsps* GetNodeSettingsRsps::default_instance_ = NULL;

GetNodeSettingsRsps* GetNodeSettingsRsps::New() const {
  return new GetNodeSettingsRsps;
}

void GetNodeSettingsRsps::Clear() {
  if (has_node_data()) {
    if (node_data_ != NULL) node_data_->::TypeData::Clear();
  }
  sensor_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeSettingsRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetNodeSettingsRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TypeData node_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sensor_data_list;
        break;
      }

      // repeated .SensorTypeData sensor_data_list = 2;
      case 2: {
        if (tag == 18) {
         parse_sensor_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor_data_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sensor_data_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetNodeSettingsRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetNodeSettingsRsps)
  return false;
#undef DO_
}

void GetNodeSettingsRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetNodeSettingsRsps)
  // optional .TypeData node_data = 1;
  if (has_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_data(), output);
  }

  // repeated .SensorTypeData sensor_data_list = 2;
  for (int i = 0; i < this->sensor_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensor_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetNodeSettingsRsps)
}

::google::protobuf::uint8* GetNodeSettingsRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeSettingsRsps)
  // optional .TypeData node_data = 1;
  if (has_node_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_data(), target);
  }

  // repeated .SensorTypeData sensor_data_list = 2;
  for (int i = 0; i < this->sensor_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sensor_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeSettingsRsps)
  return target;
}

int GetNodeSettingsRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TypeData node_data = 1;
    if (has_node_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_data());
    }

  }
  // repeated .SensorTypeData sensor_data_list = 2;
  total_size += 1 * this->sensor_data_list_size();
  for (int i = 0; i < this->sensor_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeSettingsRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeSettingsRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeSettingsRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeSettingsRsps::MergeFrom(const GetNodeSettingsRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensor_data_list_.MergeFrom(from.sensor_data_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_data()) {
      mutable_node_data()->::TypeData::MergeFrom(from.node_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeSettingsRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSettingsRsps::CopyFrom(const GetNodeSettingsRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSettingsRsps::IsInitialized() const {

  if (has_node_data()) {
    if (!this->node_data().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sensor_data_list())) return false;
  return true;
}

void GetNodeSettingsRsps::Swap(GetNodeSettingsRsps* other) {
  if (other != this) {
    std::swap(node_data_, other->node_data_);
    sensor_data_list_.Swap(&other->sensor_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeSettingsRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeSettingsRsps_descriptor_;
  metadata.reflection = GetNodeSettingsRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpDisconCachedAlarmRqst::kBeginTimeFieldNumber;
const int GetUpDisconCachedAlarmRqst::kEndTimeFieldNumber;
const int GetUpDisconCachedAlarmRqst::kCountFieldNumber;
#endif  // !_MSC_VER

GetUpDisconCachedAlarmRqst::GetUpDisconCachedAlarmRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetUpDisconCachedAlarmRqst)
}

void GetUpDisconCachedAlarmRqst::InitAsDefaultInstance() {
}

GetUpDisconCachedAlarmRqst::GetUpDisconCachedAlarmRqst(const GetUpDisconCachedAlarmRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetUpDisconCachedAlarmRqst)
}

void GetUpDisconCachedAlarmRqst::SharedCtor() {
  _cached_size_ = 0;
  begin_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpDisconCachedAlarmRqst::~GetUpDisconCachedAlarmRqst() {
  // @@protoc_insertion_point(destructor:GetUpDisconCachedAlarmRqst)
  SharedDtor();
}

void GetUpDisconCachedAlarmRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUpDisconCachedAlarmRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpDisconCachedAlarmRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUpDisconCachedAlarmRqst_descriptor_;
}

const GetUpDisconCachedAlarmRqst& GetUpDisconCachedAlarmRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetUpDisconCachedAlarmRqst* GetUpDisconCachedAlarmRqst::default_instance_ = NULL;

GetUpDisconCachedAlarmRqst* GetUpDisconCachedAlarmRqst::New() const {
  return new GetUpDisconCachedAlarmRqst;
}

void GetUpDisconCachedAlarmRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUpDisconCachedAlarmRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begin_time_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpDisconCachedAlarmRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetUpDisconCachedAlarmRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 begin_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // required uint64 end_time = 2;
      case 2: {
        if (tag == 16) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetUpDisconCachedAlarmRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetUpDisconCachedAlarmRqst)
  return false;
#undef DO_
}

void GetUpDisconCachedAlarmRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetUpDisconCachedAlarmRqst)
  // required uint64 begin_time = 1;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begin_time(), output);
  }

  // required uint64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetUpDisconCachedAlarmRqst)
}

::google::protobuf::uint8* GetUpDisconCachedAlarmRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUpDisconCachedAlarmRqst)
  // required uint64 begin_time = 1;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begin_time(), target);
  }

  // required uint64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUpDisconCachedAlarmRqst)
  return target;
}

int GetUpDisconCachedAlarmRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 begin_time = 1;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // required uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpDisconCachedAlarmRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUpDisconCachedAlarmRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUpDisconCachedAlarmRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUpDisconCachedAlarmRqst::MergeFrom(const GetUpDisconCachedAlarmRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpDisconCachedAlarmRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpDisconCachedAlarmRqst::CopyFrom(const GetUpDisconCachedAlarmRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpDisconCachedAlarmRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetUpDisconCachedAlarmRqst::Swap(GetUpDisconCachedAlarmRqst* other) {
  if (other != this) {
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUpDisconCachedAlarmRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUpDisconCachedAlarmRqst_descriptor_;
  metadata.reflection = GetUpDisconCachedAlarmRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpDisconCachedAlarmRsps::kDataFieldNumber;
#endif  // !_MSC_VER

GetUpDisconCachedAlarmRsps::GetUpDisconCachedAlarmRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetUpDisconCachedAlarmRsps)
}

void GetUpDisconCachedAlarmRsps::InitAsDefaultInstance() {
}

GetUpDisconCachedAlarmRsps::GetUpDisconCachedAlarmRsps(const GetUpDisconCachedAlarmRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetUpDisconCachedAlarmRsps)
}

void GetUpDisconCachedAlarmRsps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpDisconCachedAlarmRsps::~GetUpDisconCachedAlarmRsps() {
  // @@protoc_insertion_point(destructor:GetUpDisconCachedAlarmRsps)
  SharedDtor();
}

void GetUpDisconCachedAlarmRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUpDisconCachedAlarmRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpDisconCachedAlarmRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUpDisconCachedAlarmRsps_descriptor_;
}

const GetUpDisconCachedAlarmRsps& GetUpDisconCachedAlarmRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetUpDisconCachedAlarmRsps* GetUpDisconCachedAlarmRsps::default_instance_ = NULL;

GetUpDisconCachedAlarmRsps* GetUpDisconCachedAlarmRsps::New() const {
  return new GetUpDisconCachedAlarmRsps;
}

void GetUpDisconCachedAlarmRsps::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpDisconCachedAlarmRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetUpDisconCachedAlarmRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CachedAlarmData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetUpDisconCachedAlarmRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetUpDisconCachedAlarmRsps)
  return false;
#undef DO_
}

void GetUpDisconCachedAlarmRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetUpDisconCachedAlarmRsps)
  // repeated .CachedAlarmData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetUpDisconCachedAlarmRsps)
}

::google::protobuf::uint8* GetUpDisconCachedAlarmRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetUpDisconCachedAlarmRsps)
  // repeated .CachedAlarmData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetUpDisconCachedAlarmRsps)
  return target;
}

int GetUpDisconCachedAlarmRsps::ByteSize() const {
  int total_size = 0;

  // repeated .CachedAlarmData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpDisconCachedAlarmRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUpDisconCachedAlarmRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUpDisconCachedAlarmRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUpDisconCachedAlarmRsps::MergeFrom(const GetUpDisconCachedAlarmRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpDisconCachedAlarmRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpDisconCachedAlarmRsps::CopyFrom(const GetUpDisconCachedAlarmRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpDisconCachedAlarmRsps::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void GetUpDisconCachedAlarmRsps::Swap(GetUpDisconCachedAlarmRsps* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUpDisconCachedAlarmRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUpDisconCachedAlarmRsps_descriptor_;
  metadata.reflection = GetUpDisconCachedAlarmRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedAlarmData::kNodeIdFieldNumber;
const int CachedAlarmData::kSensorNoFieldNumber;
const int CachedAlarmData::kTypeFieldNumber;
const int CachedAlarmData::kDataFieldNumber;
const int CachedAlarmData::kReservedFieldNumber;
const int CachedAlarmData::kTimeFieldNumber;
#endif  // !_MSC_VER

CachedAlarmData::CachedAlarmData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CachedAlarmData)
}

void CachedAlarmData::InitAsDefaultInstance() {
}

CachedAlarmData::CachedAlarmData(const CachedAlarmData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CachedAlarmData)
}

void CachedAlarmData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_no_ = 0u;
  type_ = 0;
  data_ = 0;
  reserved_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedAlarmData::~CachedAlarmData() {
  // @@protoc_insertion_point(destructor:CachedAlarmData)
  SharedDtor();
}

void CachedAlarmData::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void CachedAlarmData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedAlarmData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedAlarmData_descriptor_;
}

const CachedAlarmData& CachedAlarmData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

CachedAlarmData* CachedAlarmData::default_instance_ = NULL;

CachedAlarmData* CachedAlarmData::New() const {
  return new CachedAlarmData;
}

void CachedAlarmData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CachedAlarmData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sensor_no_, time_);
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedAlarmData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CachedAlarmData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sensor_no;
        break;
      }

      // required uint32 sensor_no = 2;
      case 2: {
        if (tag == 16) {
         parse_sensor_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_no_)));
          set_has_sensor_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .DataType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataType_IsValid(value)) {
            set_type(static_cast< ::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_data;
        break;
      }

      // required float data = 4;
      case 4: {
        if (tag == 37) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reserved;
        break;
      }

      // optional uint32 reserved = 5;
      case 5: {
        if (tag == 40) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // required uint64 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CachedAlarmData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CachedAlarmData)
  return false;
#undef DO_
}

void CachedAlarmData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CachedAlarmData)
  // required bytes node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node_id(), output);
  }

  // required uint32 sensor_no = 2;
  if (has_sensor_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sensor_no(), output);
  }

  // required .DataType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required float data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->data(), output);
  }

  // optional uint32 reserved = 5;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reserved(), output);
  }

  // required uint64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CachedAlarmData)
}

::google::protobuf::uint8* CachedAlarmData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CachedAlarmData)
  // required bytes node_id = 1;
  if (has_node_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_id(), target);
  }

  // required uint32 sensor_no = 2;
  if (has_sensor_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sensor_no(), target);
  }

  // required .DataType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required float data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->data(), target);
  }

  // optional uint32 reserved = 5;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reserved(), target);
  }

  // required uint64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CachedAlarmData)
  return target;
}

int CachedAlarmData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // required uint32 sensor_no = 2;
    if (has_sensor_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_no());
    }

    // required .DataType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required float data = 4;
    if (has_data()) {
      total_size += 1 + 4;
    }

    // optional uint32 reserved = 5;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

    // required uint64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedAlarmData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedAlarmData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedAlarmData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedAlarmData::MergeFrom(const CachedAlarmData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_sensor_no()) {
      set_sensor_no(from.sensor_no());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedAlarmData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedAlarmData::CopyFrom(const CachedAlarmData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedAlarmData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void CachedAlarmData::Swap(CachedAlarmData* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(sensor_no_, other->sensor_no_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(reserved_, other->reserved_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedAlarmData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedAlarmData_descriptor_;
  metadata.reflection = CachedAlarmData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeAllNodeDataRqst::kTypeFieldNumber;
#endif  // !_MSC_VER

SubscribeAllNodeDataRqst::SubscribeAllNodeDataRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubscribeAllNodeDataRqst)
}

void SubscribeAllNodeDataRqst::InitAsDefaultInstance() {
}

SubscribeAllNodeDataRqst::SubscribeAllNodeDataRqst(const SubscribeAllNodeDataRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SubscribeAllNodeDataRqst)
}

void SubscribeAllNodeDataRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeAllNodeDataRqst::~SubscribeAllNodeDataRqst() {
  // @@protoc_insertion_point(destructor:SubscribeAllNodeDataRqst)
  SharedDtor();
}

void SubscribeAllNodeDataRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeAllNodeDataRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeAllNodeDataRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeAllNodeDataRqst_descriptor_;
}

const SubscribeAllNodeDataRqst& SubscribeAllNodeDataRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SubscribeAllNodeDataRqst* SubscribeAllNodeDataRqst::default_instance_ = NULL;

SubscribeAllNodeDataRqst* SubscribeAllNodeDataRqst::New() const {
  return new SubscribeAllNodeDataRqst;
}

void SubscribeAllNodeDataRqst::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeAllNodeDataRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubscribeAllNodeDataRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataType_IsValid(value)) {
            set_type(static_cast< ::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubscribeAllNodeDataRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubscribeAllNodeDataRqst)
  return false;
#undef DO_
}

void SubscribeAllNodeDataRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubscribeAllNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubscribeAllNodeDataRqst)
}

::google::protobuf::uint8* SubscribeAllNodeDataRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscribeAllNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscribeAllNodeDataRqst)
  return target;
}

int SubscribeAllNodeDataRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeAllNodeDataRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeAllNodeDataRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeAllNodeDataRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeAllNodeDataRqst::MergeFrom(const SubscribeAllNodeDataRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeAllNodeDataRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAllNodeDataRqst::CopyFrom(const SubscribeAllNodeDataRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAllNodeDataRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubscribeAllNodeDataRqst::Swap(SubscribeAllNodeDataRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeAllNodeDataRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeAllNodeDataRqst_descriptor_;
  metadata.reflection = SubscribeAllNodeDataRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelAllNodeDataRqst::kTypeFieldNumber;
#endif  // !_MSC_VER

CancelAllNodeDataRqst::CancelAllNodeDataRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CancelAllNodeDataRqst)
}

void CancelAllNodeDataRqst::InitAsDefaultInstance() {
}

CancelAllNodeDataRqst::CancelAllNodeDataRqst(const CancelAllNodeDataRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CancelAllNodeDataRqst)
}

void CancelAllNodeDataRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelAllNodeDataRqst::~CancelAllNodeDataRqst() {
  // @@protoc_insertion_point(destructor:CancelAllNodeDataRqst)
  SharedDtor();
}

void CancelAllNodeDataRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelAllNodeDataRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelAllNodeDataRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelAllNodeDataRqst_descriptor_;
}

const CancelAllNodeDataRqst& CancelAllNodeDataRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

CancelAllNodeDataRqst* CancelAllNodeDataRqst::default_instance_ = NULL;

CancelAllNodeDataRqst* CancelAllNodeDataRqst::New() const {
  return new CancelAllNodeDataRqst;
}

void CancelAllNodeDataRqst::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelAllNodeDataRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CancelAllNodeDataRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataType_IsValid(value)) {
            set_type(static_cast< ::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CancelAllNodeDataRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CancelAllNodeDataRqst)
  return false;
#undef DO_
}

void CancelAllNodeDataRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CancelAllNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CancelAllNodeDataRqst)
}

::google::protobuf::uint8* CancelAllNodeDataRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CancelAllNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CancelAllNodeDataRqst)
  return target;
}

int CancelAllNodeDataRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelAllNodeDataRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelAllNodeDataRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelAllNodeDataRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelAllNodeDataRqst::MergeFrom(const CancelAllNodeDataRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelAllNodeDataRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelAllNodeDataRqst::CopyFrom(const CancelAllNodeDataRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelAllNodeDataRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CancelAllNodeDataRqst::Swap(CancelAllNodeDataRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelAllNodeDataRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelAllNodeDataRqst_descriptor_;
  metadata.reflection = CancelAllNodeDataRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatSubscribeNodeDataRqst::kTypeFieldNumber;
const int BatSubscribeNodeDataRqst::kCountFieldNumber;
const int BatSubscribeNodeDataRqst::kNodeIdFieldNumber;
#endif  // !_MSC_VER

BatSubscribeNodeDataRqst::BatSubscribeNodeDataRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BatSubscribeNodeDataRqst)
}

void BatSubscribeNodeDataRqst::InitAsDefaultInstance() {
}

BatSubscribeNodeDataRqst::BatSubscribeNodeDataRqst(const BatSubscribeNodeDataRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BatSubscribeNodeDataRqst)
}

void BatSubscribeNodeDataRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatSubscribeNodeDataRqst::~BatSubscribeNodeDataRqst() {
  // @@protoc_insertion_point(destructor:BatSubscribeNodeDataRqst)
  SharedDtor();
}

void BatSubscribeNodeDataRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatSubscribeNodeDataRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatSubscribeNodeDataRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatSubscribeNodeDataRqst_descriptor_;
}

const BatSubscribeNodeDataRqst& BatSubscribeNodeDataRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

BatSubscribeNodeDataRqst* BatSubscribeNodeDataRqst::default_instance_ = NULL;

BatSubscribeNodeDataRqst* BatSubscribeNodeDataRqst::New() const {
  return new BatSubscribeNodeDataRqst;
}

void BatSubscribeNodeDataRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BatSubscribeNodeDataRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  node_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatSubscribeNodeDataRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BatSubscribeNodeDataRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataType_IsValid(value)) {
            set_type(static_cast< ::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_id;
        break;
      }

      // repeated bytes node_id = 3;
      case 3: {
        if (tag == 26) {
         parse_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_node_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BatSubscribeNodeDataRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BatSubscribeNodeDataRqst)
  return false;
#undef DO_
}

void BatSubscribeNodeDataRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BatSubscribeNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated bytes node_id = 3;
  for (int i = 0; i < this->node_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->node_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BatSubscribeNodeDataRqst)
}

::google::protobuf::uint8* BatSubscribeNodeDataRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BatSubscribeNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated bytes node_id = 3;
  for (int i = 0; i < this->node_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->node_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BatSubscribeNodeDataRqst)
  return target;
}

int BatSubscribeNodeDataRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated bytes node_id = 3;
  total_size += 1 * this->node_id_size();
  for (int i = 0; i < this->node_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->node_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatSubscribeNodeDataRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatSubscribeNodeDataRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatSubscribeNodeDataRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatSubscribeNodeDataRqst::MergeFrom(const BatSubscribeNodeDataRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_.MergeFrom(from.node_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatSubscribeNodeDataRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatSubscribeNodeDataRqst::CopyFrom(const BatSubscribeNodeDataRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatSubscribeNodeDataRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BatSubscribeNodeDataRqst::Swap(BatSubscribeNodeDataRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    node_id_.Swap(&other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatSubscribeNodeDataRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatSubscribeNodeDataRqst_descriptor_;
  metadata.reflection = BatSubscribeNodeDataRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatCancelNodeDataRqst::kTypeFieldNumber;
const int BatCancelNodeDataRqst::kCountFieldNumber;
const int BatCancelNodeDataRqst::kNodeIdFieldNumber;
#endif  // !_MSC_VER

BatCancelNodeDataRqst::BatCancelNodeDataRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BatCancelNodeDataRqst)
}

void BatCancelNodeDataRqst::InitAsDefaultInstance() {
}

BatCancelNodeDataRqst::BatCancelNodeDataRqst(const BatCancelNodeDataRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BatCancelNodeDataRqst)
}

void BatCancelNodeDataRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatCancelNodeDataRqst::~BatCancelNodeDataRqst() {
  // @@protoc_insertion_point(destructor:BatCancelNodeDataRqst)
  SharedDtor();
}

void BatCancelNodeDataRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatCancelNodeDataRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatCancelNodeDataRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatCancelNodeDataRqst_descriptor_;
}

const BatCancelNodeDataRqst& BatCancelNodeDataRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

BatCancelNodeDataRqst* BatCancelNodeDataRqst::default_instance_ = NULL;

BatCancelNodeDataRqst* BatCancelNodeDataRqst::New() const {
  return new BatCancelNodeDataRqst;
}

void BatCancelNodeDataRqst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BatCancelNodeDataRqst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  node_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatCancelNodeDataRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BatCancelNodeDataRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataType_IsValid(value)) {
            set_type(static_cast< ::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_id;
        break;
      }

      // repeated bytes node_id = 3;
      case 3: {
        if (tag == 26) {
         parse_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_node_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BatCancelNodeDataRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BatCancelNodeDataRqst)
  return false;
#undef DO_
}

void BatCancelNodeDataRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BatCancelNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated bytes node_id = 3;
  for (int i = 0; i < this->node_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->node_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BatCancelNodeDataRqst)
}

::google::protobuf::uint8* BatCancelNodeDataRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BatCancelNodeDataRqst)
  // required .DataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated bytes node_id = 3;
  for (int i = 0; i < this->node_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->node_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BatCancelNodeDataRqst)
  return target;
}

int BatCancelNodeDataRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated bytes node_id = 3;
  total_size += 1 * this->node_id_size();
  for (int i = 0; i < this->node_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->node_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatCancelNodeDataRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatCancelNodeDataRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatCancelNodeDataRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatCancelNodeDataRqst::MergeFrom(const BatCancelNodeDataRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_.MergeFrom(from.node_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatCancelNodeDataRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatCancelNodeDataRqst::CopyFrom(const BatCancelNodeDataRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatCancelNodeDataRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BatCancelNodeDataRqst::Swap(BatCancelNodeDataRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    node_id_.Swap(&other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatCancelNodeDataRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatCancelNodeDataRqst_descriptor_;
  metadata.reflection = BatCancelNodeDataRqst_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlackWhiteNodeRqst_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackWhiteNodeRqst_Command_descriptor_;
}
bool BlackWhiteNodeRqst_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlackWhiteNodeRqst_Command BlackWhiteNodeRqst::ADD;
const BlackWhiteNodeRqst_Command BlackWhiteNodeRqst::DEL;
const BlackWhiteNodeRqst_Command BlackWhiteNodeRqst::Command_MIN;
const BlackWhiteNodeRqst_Command BlackWhiteNodeRqst::Command_MAX;
const int BlackWhiteNodeRqst::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlackWhiteNodeRqst::kTypeFieldNumber;
const int BlackWhiteNodeRqst::kCmdFieldNumber;
const int BlackWhiteNodeRqst::kNodeIdFieldNumber;
#endif  // !_MSC_VER

BlackWhiteNodeRqst::BlackWhiteNodeRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlackWhiteNodeRqst)
}

void BlackWhiteNodeRqst::InitAsDefaultInstance() {
}

BlackWhiteNodeRqst::BlackWhiteNodeRqst(const BlackWhiteNodeRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BlackWhiteNodeRqst)
}

void BlackWhiteNodeRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  cmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackWhiteNodeRqst::~BlackWhiteNodeRqst() {
  // @@protoc_insertion_point(destructor:BlackWhiteNodeRqst)
  SharedDtor();
}

void BlackWhiteNodeRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlackWhiteNodeRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackWhiteNodeRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackWhiteNodeRqst_descriptor_;
}

const BlackWhiteNodeRqst& BlackWhiteNodeRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

BlackWhiteNodeRqst* BlackWhiteNodeRqst::default_instance_ = NULL;

BlackWhiteNodeRqst* BlackWhiteNodeRqst::New() const {
  return new BlackWhiteNodeRqst;
}

void BlackWhiteNodeRqst::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    cmd_ = 1;
  }
  node_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackWhiteNodeRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlackWhiteNodeRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeType_IsValid(value)) {
            set_type(static_cast< ::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .BlackWhiteNodeRqst.Command cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BlackWhiteNodeRqst_Command_IsValid(value)) {
            set_cmd(static_cast< ::BlackWhiteNodeRqst_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_id;
        break;
      }

      // repeated string node_id = 3;
      case 3: {
        if (tag == 26) {
         parse_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id(this->node_id_size() - 1).data(),
            this->node_id(this->node_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BlackWhiteNodeRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlackWhiteNodeRqst)
  return false;
#undef DO_
}

void BlackWhiteNodeRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlackWhiteNodeRqst)
  // required .NodeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .BlackWhiteNodeRqst.Command cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // repeated string node_id = 3;
  for (int i = 0; i < this->node_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->node_id(i).data(), this->node_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->node_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BlackWhiteNodeRqst)
}

::google::protobuf::uint8* BlackWhiteNodeRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlackWhiteNodeRqst)
  // required .NodeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .BlackWhiteNodeRqst.Command cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // repeated string node_id = 3;
  for (int i = 0; i < this->node_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id(i).data(), this->node_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->node_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlackWhiteNodeRqst)
  return target;
}

int BlackWhiteNodeRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .BlackWhiteNodeRqst.Command cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

  }
  // repeated string node_id = 3;
  total_size += 1 * this->node_id_size();
  for (int i = 0; i < this->node_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackWhiteNodeRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackWhiteNodeRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackWhiteNodeRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackWhiteNodeRqst::MergeFrom(const BlackWhiteNodeRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_.MergeFrom(from.node_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackWhiteNodeRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackWhiteNodeRqst::CopyFrom(const BlackWhiteNodeRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackWhiteNodeRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BlackWhiteNodeRqst::Swap(BlackWhiteNodeRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cmd_, other->cmd_);
    node_id_.Swap(&other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackWhiteNodeRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackWhiteNodeRqst_descriptor_;
  metadata.reflection = BlackWhiteNodeRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlackWhiteRqst::kTypeFieldNumber;
#endif  // !_MSC_VER

GetBlackWhiteRqst::GetBlackWhiteRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetBlackWhiteRqst)
}

void GetBlackWhiteRqst::InitAsDefaultInstance() {
}

GetBlackWhiteRqst::GetBlackWhiteRqst(const GetBlackWhiteRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetBlackWhiteRqst)
}

void GetBlackWhiteRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlackWhiteRqst::~GetBlackWhiteRqst() {
  // @@protoc_insertion_point(destructor:GetBlackWhiteRqst)
  SharedDtor();
}

void GetBlackWhiteRqst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlackWhiteRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlackWhiteRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlackWhiteRqst_descriptor_;
}

const GetBlackWhiteRqst& GetBlackWhiteRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetBlackWhiteRqst* GetBlackWhiteRqst::default_instance_ = NULL;

GetBlackWhiteRqst* GetBlackWhiteRqst::New() const {
  return new GetBlackWhiteRqst;
}

void GetBlackWhiteRqst::Clear() {
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlackWhiteRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetBlackWhiteRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeType_IsValid(value)) {
            set_type(static_cast< ::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetBlackWhiteRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetBlackWhiteRqst)
  return false;
#undef DO_
}

void GetBlackWhiteRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetBlackWhiteRqst)
  // required .NodeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetBlackWhiteRqst)
}

::google::protobuf::uint8* GetBlackWhiteRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBlackWhiteRqst)
  // required .NodeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBlackWhiteRqst)
  return target;
}

int GetBlackWhiteRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlackWhiteRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlackWhiteRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlackWhiteRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlackWhiteRqst::MergeFrom(const GetBlackWhiteRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlackWhiteRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlackWhiteRqst::CopyFrom(const GetBlackWhiteRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlackWhiteRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetBlackWhiteRqst::Swap(GetBlackWhiteRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlackWhiteRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlackWhiteRqst_descriptor_;
  metadata.reflection = GetBlackWhiteRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlackWhiteRsps::kCountFieldNumber;
const int GetBlackWhiteRsps::kNodeIdFieldNumber;
#endif  // !_MSC_VER

GetBlackWhiteRsps::GetBlackWhiteRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetBlackWhiteRsps)
}

void GetBlackWhiteRsps::InitAsDefaultInstance() {
}

GetBlackWhiteRsps::GetBlackWhiteRsps(const GetBlackWhiteRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetBlackWhiteRsps)
}

void GetBlackWhiteRsps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlackWhiteRsps::~GetBlackWhiteRsps() {
  // @@protoc_insertion_point(destructor:GetBlackWhiteRsps)
  SharedDtor();
}

void GetBlackWhiteRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlackWhiteRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlackWhiteRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlackWhiteRsps_descriptor_;
}

const GetBlackWhiteRsps& GetBlackWhiteRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetBlackWhiteRsps* GetBlackWhiteRsps::default_instance_ = NULL;

GetBlackWhiteRsps* GetBlackWhiteRsps::New() const {
  return new GetBlackWhiteRsps;
}

void GetBlackWhiteRsps::Clear() {
  count_ = 0u;
  node_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlackWhiteRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetBlackWhiteRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_id;
        break;
      }

      // repeated string node_id = 2;
      case 2: {
        if (tag == 18) {
         parse_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id(this->node_id_size() - 1).data(),
            this->node_id(this->node_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetBlackWhiteRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetBlackWhiteRsps)
  return false;
#undef DO_
}

void GetBlackWhiteRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetBlackWhiteRsps)
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated string node_id = 2;
  for (int i = 0; i < this->node_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->node_id(i).data(), this->node_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetBlackWhiteRsps)
}

::google::protobuf::uint8* GetBlackWhiteRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBlackWhiteRsps)
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated string node_id = 2;
  for (int i = 0; i < this->node_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id(i).data(), this->node_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->node_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBlackWhiteRsps)
  return target;
}

int GetBlackWhiteRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated string node_id = 2;
  total_size += 1 * this->node_id_size();
  for (int i = 0; i < this->node_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlackWhiteRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlackWhiteRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlackWhiteRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlackWhiteRsps::MergeFrom(const GetBlackWhiteRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_.MergeFrom(from.node_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlackWhiteRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlackWhiteRsps::CopyFrom(const GetBlackWhiteRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlackWhiteRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetBlackWhiteRsps::Swap(GetBlackWhiteRsps* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    node_id_.Swap(&other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlackWhiteRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlackWhiteRsps_descriptor_;
  metadata.reflection = GetBlackWhiteRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadFirmwareRqst::kNodeIdFieldNumber;
const int DownloadFirmwareRqst::kUrlFieldNumber;
#endif  // !_MSC_VER

DownloadFirmwareRqst::DownloadFirmwareRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DownloadFirmwareRqst)
}

void DownloadFirmwareRqst::InitAsDefaultInstance() {
}

DownloadFirmwareRqst::DownloadFirmwareRqst(const DownloadFirmwareRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DownloadFirmwareRqst)
}

void DownloadFirmwareRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFirmwareRqst::~DownloadFirmwareRqst() {
  // @@protoc_insertion_point(destructor:DownloadFirmwareRqst)
  SharedDtor();
}

void DownloadFirmwareRqst::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void DownloadFirmwareRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFirmwareRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFirmwareRqst_descriptor_;
}

const DownloadFirmwareRqst& DownloadFirmwareRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

DownloadFirmwareRqst* DownloadFirmwareRqst::default_instance_ = NULL;

DownloadFirmwareRqst* DownloadFirmwareRqst::New() const {
  return new DownloadFirmwareRqst;
}

void DownloadFirmwareRqst::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_id_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFirmwareRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DownloadFirmwareRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DownloadFirmwareRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DownloadFirmwareRqst)
  return false;
#undef DO_
}

void DownloadFirmwareRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DownloadFirmwareRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DownloadFirmwareRqst)
}

::google::protobuf::uint8* DownloadFirmwareRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DownloadFirmwareRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DownloadFirmwareRqst)
  return target;
}

int DownloadFirmwareRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFirmwareRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFirmwareRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFirmwareRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFirmwareRqst::MergeFrom(const DownloadFirmwareRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFirmwareRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFirmwareRqst::CopyFrom(const DownloadFirmwareRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFirmwareRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DownloadFirmwareRqst::Swap(DownloadFirmwareRqst* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFirmwareRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFirmwareRqst_descriptor_;
  metadata.reflection = DownloadFirmwareRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadFirmwareRsps::kReceiveStatusFieldNumber;
#endif  // !_MSC_VER

DownloadFirmwareRsps::DownloadFirmwareRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DownloadFirmwareRsps)
}

void DownloadFirmwareRsps::InitAsDefaultInstance() {
}

DownloadFirmwareRsps::DownloadFirmwareRsps(const DownloadFirmwareRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DownloadFirmwareRsps)
}

void DownloadFirmwareRsps::SharedCtor() {
  _cached_size_ = 0;
  receive_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFirmwareRsps::~DownloadFirmwareRsps() {
  // @@protoc_insertion_point(destructor:DownloadFirmwareRsps)
  SharedDtor();
}

void DownloadFirmwareRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadFirmwareRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFirmwareRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFirmwareRsps_descriptor_;
}

const DownloadFirmwareRsps& DownloadFirmwareRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

DownloadFirmwareRsps* DownloadFirmwareRsps::default_instance_ = NULL;

DownloadFirmwareRsps* DownloadFirmwareRsps::New() const {
  return new DownloadFirmwareRsps;
}

void DownloadFirmwareRsps::Clear() {
  receive_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFirmwareRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DownloadFirmwareRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReceiveStatus receive_status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReceiveStatus_IsValid(value)) {
            set_receive_status(static_cast< ::ReceiveStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DownloadFirmwareRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DownloadFirmwareRsps)
  return false;
#undef DO_
}

void DownloadFirmwareRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DownloadFirmwareRsps)
  // required .ReceiveStatus receive_status = 1;
  if (has_receive_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->receive_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DownloadFirmwareRsps)
}

::google::protobuf::uint8* DownloadFirmwareRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DownloadFirmwareRsps)
  // required .ReceiveStatus receive_status = 1;
  if (has_receive_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->receive_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DownloadFirmwareRsps)
  return target;
}

int DownloadFirmwareRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReceiveStatus receive_status = 1;
    if (has_receive_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receive_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFirmwareRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFirmwareRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFirmwareRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFirmwareRsps::MergeFrom(const DownloadFirmwareRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receive_status()) {
      set_receive_status(from.receive_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFirmwareRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFirmwareRsps::CopyFrom(const DownloadFirmwareRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFirmwareRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DownloadFirmwareRsps::Swap(DownloadFirmwareRsps* other) {
  if (other != this) {
    std::swap(receive_status_, other->receive_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFirmwareRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFirmwareRsps_descriptor_;
  metadata.reflection = DownloadFirmwareRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadFirmwareNtf::kSeqFieldNumber;
const int DownloadFirmwareNtf::kExecuteStatusFieldNumber;
#endif  // !_MSC_VER

DownloadFirmwareNtf::DownloadFirmwareNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DownloadFirmwareNtf)
}

void DownloadFirmwareNtf::InitAsDefaultInstance() {
}

DownloadFirmwareNtf::DownloadFirmwareNtf(const DownloadFirmwareNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DownloadFirmwareNtf)
}

void DownloadFirmwareNtf::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  execute_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFirmwareNtf::~DownloadFirmwareNtf() {
  // @@protoc_insertion_point(destructor:DownloadFirmwareNtf)
  SharedDtor();
}

void DownloadFirmwareNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadFirmwareNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFirmwareNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFirmwareNtf_descriptor_;
}

const DownloadFirmwareNtf& DownloadFirmwareNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

DownloadFirmwareNtf* DownloadFirmwareNtf::default_instance_ = NULL;

DownloadFirmwareNtf* DownloadFirmwareNtf::New() const {
  return new DownloadFirmwareNtf;
}

void DownloadFirmwareNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    seq_ = 0u;
    execute_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFirmwareNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DownloadFirmwareNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_execute_status;
        break;
      }

      // required .ExecuteStatus execute_status = 2;
      case 2: {
        if (tag == 16) {
         parse_execute_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExecuteStatus_IsValid(value)) {
            set_execute_status(static_cast< ::ExecuteStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DownloadFirmwareNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DownloadFirmwareNtf)
  return false;
#undef DO_
}

void DownloadFirmwareNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DownloadFirmwareNtf)
  // required uint32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // required .ExecuteStatus execute_status = 2;
  if (has_execute_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->execute_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DownloadFirmwareNtf)
}

::google::protobuf::uint8* DownloadFirmwareNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DownloadFirmwareNtf)
  // required uint32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // required .ExecuteStatus execute_status = 2;
  if (has_execute_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->execute_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DownloadFirmwareNtf)
  return target;
}

int DownloadFirmwareNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // required .ExecuteStatus execute_status = 2;
    if (has_execute_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->execute_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFirmwareNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFirmwareNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFirmwareNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFirmwareNtf::MergeFrom(const DownloadFirmwareNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_execute_status()) {
      set_execute_status(from.execute_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFirmwareNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFirmwareNtf::CopyFrom(const DownloadFirmwareNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFirmwareNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DownloadFirmwareNtf::Swap(DownloadFirmwareNtf* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(execute_status_, other->execute_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFirmwareNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFirmwareNtf_descriptor_;
  metadata.reflection = DownloadFirmwareNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeModuleRqst::kModuleNameFieldNumber;
#endif  // !_MSC_VER

UpgradeModuleRqst::UpgradeModuleRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpgradeModuleRqst)
}

void UpgradeModuleRqst::InitAsDefaultInstance() {
}

UpgradeModuleRqst::UpgradeModuleRqst(const UpgradeModuleRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UpgradeModuleRqst)
}

void UpgradeModuleRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeModuleRqst::~UpgradeModuleRqst() {
  // @@protoc_insertion_point(destructor:UpgradeModuleRqst)
  SharedDtor();
}

void UpgradeModuleRqst::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_name_;
  }
  if (this != default_instance_) {
  }
}

void UpgradeModuleRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeModuleRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeModuleRqst_descriptor_;
}

const UpgradeModuleRqst& UpgradeModuleRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

UpgradeModuleRqst* UpgradeModuleRqst::default_instance_ = NULL;

UpgradeModuleRqst* UpgradeModuleRqst::New() const {
  return new UpgradeModuleRqst;
}

void UpgradeModuleRqst::Clear() {
  if (has_module_name()) {
    if (module_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      module_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeModuleRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpgradeModuleRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string module_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "module_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpgradeModuleRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpgradeModuleRqst)
  return false;
#undef DO_
}

void UpgradeModuleRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpgradeModuleRqst)
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpgradeModuleRqst)
}

::google::protobuf::uint8* UpgradeModuleRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpgradeModuleRqst)
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpgradeModuleRqst)
  return target;
}

int UpgradeModuleRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeModuleRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeModuleRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeModuleRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeModuleRqst::MergeFrom(const UpgradeModuleRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeModuleRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeModuleRqst::CopyFrom(const UpgradeModuleRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeModuleRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpgradeModuleRqst::Swap(UpgradeModuleRqst* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeModuleRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeModuleRqst_descriptor_;
  metadata.reflection = UpgradeModuleRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeModuleRsps::kReceiveStatusFieldNumber;
#endif  // !_MSC_VER

UpgradeModuleRsps::UpgradeModuleRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpgradeModuleRsps)
}

void UpgradeModuleRsps::InitAsDefaultInstance() {
}

UpgradeModuleRsps::UpgradeModuleRsps(const UpgradeModuleRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UpgradeModuleRsps)
}

void UpgradeModuleRsps::SharedCtor() {
  _cached_size_ = 0;
  receive_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeModuleRsps::~UpgradeModuleRsps() {
  // @@protoc_insertion_point(destructor:UpgradeModuleRsps)
  SharedDtor();
}

void UpgradeModuleRsps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeModuleRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeModuleRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeModuleRsps_descriptor_;
}

const UpgradeModuleRsps& UpgradeModuleRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

UpgradeModuleRsps* UpgradeModuleRsps::default_instance_ = NULL;

UpgradeModuleRsps* UpgradeModuleRsps::New() const {
  return new UpgradeModuleRsps;
}

void UpgradeModuleRsps::Clear() {
  receive_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeModuleRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpgradeModuleRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ReceiveStatus receive_status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReceiveStatus_IsValid(value)) {
            set_receive_status(static_cast< ::ReceiveStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpgradeModuleRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpgradeModuleRsps)
  return false;
#undef DO_
}

void UpgradeModuleRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpgradeModuleRsps)
  // required .ReceiveStatus receive_status = 1;
  if (has_receive_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->receive_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpgradeModuleRsps)
}

::google::protobuf::uint8* UpgradeModuleRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpgradeModuleRsps)
  // required .ReceiveStatus receive_status = 1;
  if (has_receive_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->receive_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpgradeModuleRsps)
  return target;
}

int UpgradeModuleRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ReceiveStatus receive_status = 1;
    if (has_receive_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receive_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeModuleRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeModuleRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeModuleRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeModuleRsps::MergeFrom(const UpgradeModuleRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receive_status()) {
      set_receive_status(from.receive_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeModuleRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeModuleRsps::CopyFrom(const UpgradeModuleRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeModuleRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpgradeModuleRsps::Swap(UpgradeModuleRsps* other) {
  if (other != this) {
    std::swap(receive_status_, other->receive_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeModuleRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeModuleRsps_descriptor_;
  metadata.reflection = UpgradeModuleRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeModuleNtf::kSeqFieldNumber;
const int UpgradeModuleNtf::kExecuteStatusFieldNumber;
#endif  // !_MSC_VER

UpgradeModuleNtf::UpgradeModuleNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpgradeModuleNtf)
}

void UpgradeModuleNtf::InitAsDefaultInstance() {
}

UpgradeModuleNtf::UpgradeModuleNtf(const UpgradeModuleNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UpgradeModuleNtf)
}

void UpgradeModuleNtf::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  execute_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeModuleNtf::~UpgradeModuleNtf() {
  // @@protoc_insertion_point(destructor:UpgradeModuleNtf)
  SharedDtor();
}

void UpgradeModuleNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeModuleNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeModuleNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeModuleNtf_descriptor_;
}

const UpgradeModuleNtf& UpgradeModuleNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

UpgradeModuleNtf* UpgradeModuleNtf::default_instance_ = NULL;

UpgradeModuleNtf* UpgradeModuleNtf::New() const {
  return new UpgradeModuleNtf;
}

void UpgradeModuleNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    seq_ = 0u;
    execute_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeModuleNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpgradeModuleNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_execute_status;
        break;
      }

      // required .ExecuteStatus execute_status = 2;
      case 2: {
        if (tag == 16) {
         parse_execute_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExecuteStatus_IsValid(value)) {
            set_execute_status(static_cast< ::ExecuteStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpgradeModuleNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpgradeModuleNtf)
  return false;
#undef DO_
}

void UpgradeModuleNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpgradeModuleNtf)
  // required uint32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // required .ExecuteStatus execute_status = 2;
  if (has_execute_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->execute_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpgradeModuleNtf)
}

::google::protobuf::uint8* UpgradeModuleNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpgradeModuleNtf)
  // required uint32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // required .ExecuteStatus execute_status = 2;
  if (has_execute_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->execute_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpgradeModuleNtf)
  return target;
}

int UpgradeModuleNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // required .ExecuteStatus execute_status = 2;
    if (has_execute_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->execute_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeModuleNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeModuleNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeModuleNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeModuleNtf::MergeFrom(const UpgradeModuleNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_execute_status()) {
      set_execute_status(from.execute_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeModuleNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeModuleNtf::CopyFrom(const UpgradeModuleNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeModuleNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpgradeModuleNtf::Swap(UpgradeModuleNtf* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(execute_status_, other->execute_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeModuleNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeModuleNtf_descriptor_;
  metadata.reflection = UpgradeModuleNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerminalPort::kPortNumFieldNumber;
const int TerminalPort::kCmdTypeFieldNumber;
#endif  // !_MSC_VER

TerminalPort::TerminalPort()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalPort)
}

void TerminalPort::InitAsDefaultInstance() {
}

TerminalPort::TerminalPort(const TerminalPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalPort)
}

void TerminalPort::SharedCtor() {
  _cached_size_ = 0;
  port_num_ = 0u;
  cmd_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminalPort::~TerminalPort() {
  // @@protoc_insertion_point(destructor:TerminalPort)
  SharedDtor();
}

void TerminalPort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TerminalPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminalPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminalPort_descriptor_;
}

const TerminalPort& TerminalPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

TerminalPort* TerminalPort::default_instance_ = NULL;

TerminalPort* TerminalPort::New() const {
  return new TerminalPort;
}

void TerminalPort::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TerminalPort*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(port_num_, cmd_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerminalPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalPort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_num_)));
          set_has_port_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // required uint32 cmd_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalPort)
  return false;
#undef DO_
}

void TerminalPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalPort)
  // required uint32 port_num = 1;
  if (has_port_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_num(), output);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalPort)
}

::google::protobuf::uint8* TerminalPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalPort)
  // required uint32 port_num = 1;
  if (has_port_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_num(), target);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalPort)
  return target;
}

int TerminalPort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port_num = 1;
    if (has_port_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_num());
    }

    // required uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminalPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerminalPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerminalPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerminalPort::MergeFrom(const TerminalPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port_num()) {
      set_port_num(from.port_num());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerminalPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminalPort::CopyFrom(const TerminalPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminalPort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TerminalPort::Swap(TerminalPort* other) {
  if (other != this) {
    std::swap(port_num_, other->port_num_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TerminalPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminalPort_descriptor_;
  metadata.reflection = TerminalPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerminalStatus::kPortNumFieldNumber;
const int TerminalStatus::kCmdTypeFieldNumber;
const int TerminalStatus::kDataFieldNumber;
#endif  // !_MSC_VER

TerminalStatus::TerminalStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalStatus)
}

void TerminalStatus::InitAsDefaultInstance() {
}

TerminalStatus::TerminalStatus(const TerminalStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalStatus)
}

void TerminalStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  port_num_ = 0u;
  cmd_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminalStatus::~TerminalStatus() {
  // @@protoc_insertion_point(destructor:TerminalStatus)
  SharedDtor();
}

void TerminalStatus::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TerminalStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminalStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminalStatus_descriptor_;
}

const TerminalStatus& TerminalStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

TerminalStatus* TerminalStatus::default_instance_ = NULL;

TerminalStatus* TerminalStatus::New() const {
  return new TerminalStatus;
}

void TerminalStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TerminalStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(port_num_, cmd_type_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerminalStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_num_)));
          set_has_port_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // required uint32 cmd_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalStatus)
  return false;
#undef DO_
}

void TerminalStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalStatus)
  // required uint32 port_num = 1;
  if (has_port_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_num(), output);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalStatus)
}

::google::protobuf::uint8* TerminalStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalStatus)
  // required uint32 port_num = 1;
  if (has_port_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_num(), target);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalStatus)
  return target;
}

int TerminalStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port_num = 1;
    if (has_port_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_num());
    }

    // required uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminalStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerminalStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerminalStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerminalStatus::MergeFrom(const TerminalStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port_num()) {
      set_port_num(from.port_num());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerminalStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminalStatus::CopyFrom(const TerminalStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminalStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TerminalStatus::Swap(TerminalStatus* other) {
  if (other != this) {
    std::swap(port_num_, other->port_num_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TerminalStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminalStatus_descriptor_;
  metadata.reflection = TerminalStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTerminalStatusRqst::kNodeIdFieldNumber;
const int GetTerminalStatusRqst::kPortFieldNumber;
#endif  // !_MSC_VER

GetTerminalStatusRqst::GetTerminalStatusRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetTerminalStatusRqst)
}

void GetTerminalStatusRqst::InitAsDefaultInstance() {
}

GetTerminalStatusRqst::GetTerminalStatusRqst(const GetTerminalStatusRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetTerminalStatusRqst)
}

void GetTerminalStatusRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTerminalStatusRqst::~GetTerminalStatusRqst() {
  // @@protoc_insertion_point(destructor:GetTerminalStatusRqst)
  SharedDtor();
}

void GetTerminalStatusRqst::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void GetTerminalStatusRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTerminalStatusRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTerminalStatusRqst_descriptor_;
}

const GetTerminalStatusRqst& GetTerminalStatusRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetTerminalStatusRqst* GetTerminalStatusRqst::default_instance_ = NULL;

GetTerminalStatusRqst* GetTerminalStatusRqst::New() const {
  return new GetTerminalStatusRqst;
}

void GetTerminalStatusRqst::Clear() {
  if (has_node_id()) {
    if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      node_id_->clear();
    }
  }
  port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTerminalStatusRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetTerminalStatusRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // repeated .TerminalPort port = 2;
      case 2: {
        if (tag == 18) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_port()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_port;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetTerminalStatusRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetTerminalStatusRqst)
  return false;
#undef DO_
}

void GetTerminalStatusRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetTerminalStatusRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // repeated .TerminalPort port = 2;
  for (int i = 0; i < this->port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->port(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetTerminalStatusRqst)
}

::google::protobuf::uint8* GetTerminalStatusRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetTerminalStatusRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // repeated .TerminalPort port = 2;
  for (int i = 0; i < this->port_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->port(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetTerminalStatusRqst)
  return target;
}

int GetTerminalStatusRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

  }
  // repeated .TerminalPort port = 2;
  total_size += 1 * this->port_size();
  for (int i = 0; i < this->port_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->port(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTerminalStatusRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTerminalStatusRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTerminalStatusRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTerminalStatusRqst::MergeFrom(const GetTerminalStatusRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  port_.MergeFrom(from.port_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTerminalStatusRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTerminalStatusRqst::CopyFrom(const GetTerminalStatusRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTerminalStatusRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->port())) return false;
  return true;
}

void GetTerminalStatusRqst::Swap(GetTerminalStatusRqst* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    port_.Swap(&other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTerminalStatusRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTerminalStatusRqst_descriptor_;
  metadata.reflection = GetTerminalStatusRqst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTerminalStatusRsps::kNodeIdFieldNumber;
const int GetTerminalStatusRsps::kStatusFieldNumber;
#endif  // !_MSC_VER

GetTerminalStatusRsps::GetTerminalStatusRsps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetTerminalStatusRsps)
}

void GetTerminalStatusRsps::InitAsDefaultInstance() {
}

GetTerminalStatusRsps::GetTerminalStatusRsps(const GetTerminalStatusRsps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetTerminalStatusRsps)
}

void GetTerminalStatusRsps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTerminalStatusRsps::~GetTerminalStatusRsps() {
  // @@protoc_insertion_point(destructor:GetTerminalStatusRsps)
  SharedDtor();
}

void GetTerminalStatusRsps::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void GetTerminalStatusRsps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTerminalStatusRsps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTerminalStatusRsps_descriptor_;
}

const GetTerminalStatusRsps& GetTerminalStatusRsps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

GetTerminalStatusRsps* GetTerminalStatusRsps::default_instance_ = NULL;

GetTerminalStatusRsps* GetTerminalStatusRsps::New() const {
  return new GetTerminalStatusRsps;
}

void GetTerminalStatusRsps::Clear() {
  if (has_node_id()) {
    if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      node_id_->clear();
    }
  }
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTerminalStatusRsps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetTerminalStatusRsps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // repeated .TerminalStatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetTerminalStatusRsps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetTerminalStatusRsps)
  return false;
#undef DO_
}

void GetTerminalStatusRsps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetTerminalStatusRsps)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // repeated .TerminalStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetTerminalStatusRsps)
}

::google::protobuf::uint8* GetTerminalStatusRsps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetTerminalStatusRsps)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // repeated .TerminalStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetTerminalStatusRsps)
  return target;
}

int GetTerminalStatusRsps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

  }
  // repeated .TerminalStatus status = 2;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTerminalStatusRsps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTerminalStatusRsps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTerminalStatusRsps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTerminalStatusRsps::MergeFrom(const GetTerminalStatusRsps& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTerminalStatusRsps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTerminalStatusRsps::CopyFrom(const GetTerminalStatusRsps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTerminalStatusRsps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->status())) return false;
  return true;
}

void GetTerminalStatusRsps::Swap(GetTerminalStatusRsps* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTerminalStatusRsps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTerminalStatusRsps_descriptor_;
  metadata.reflection = GetTerminalStatusRsps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerminalCmd::kPortNumFieldNumber;
const int TerminalCmd::kCmdTypeFieldNumber;
const int TerminalCmd::kDataFieldNumber;
#endif  // !_MSC_VER

TerminalCmd::TerminalCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminalCmd)
}

void TerminalCmd::InitAsDefaultInstance() {
}

TerminalCmd::TerminalCmd(const TerminalCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminalCmd)
}

void TerminalCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  port_num_ = 0u;
  cmd_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminalCmd::~TerminalCmd() {
  // @@protoc_insertion_point(destructor:TerminalCmd)
  SharedDtor();
}

void TerminalCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TerminalCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminalCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminalCmd_descriptor_;
}

const TerminalCmd& TerminalCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

TerminalCmd* TerminalCmd::default_instance_ = NULL;

TerminalCmd* TerminalCmd::New() const {
  return new TerminalCmd;
}

void TerminalCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TerminalCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(port_num_, cmd_type_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerminalCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminalCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_num_)));
          set_has_port_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // required uint32 cmd_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminalCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminalCmd)
  return false;
#undef DO_
}

void TerminalCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminalCmd)
  // required uint32 port_num = 1;
  if (has_port_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_num(), output);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminalCmd)
}

::google::protobuf::uint8* TerminalCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminalCmd)
  // required uint32 port_num = 1;
  if (has_port_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_num(), target);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminalCmd)
  return target;
}

int TerminalCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port_num = 1;
    if (has_port_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_num());
    }

    // required uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminalCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerminalCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerminalCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerminalCmd::MergeFrom(const TerminalCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port_num()) {
      set_port_num(from.port_num());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerminalCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminalCmd::CopyFrom(const TerminalCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminalCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TerminalCmd::Swap(TerminalCmd* other) {
  if (other != this) {
    std::swap(port_num_, other->port_num_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TerminalCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminalCmd_descriptor_;
  metadata.reflection = TerminalCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTerminalCtrlCmdRqst::kNodeIdFieldNumber;
const int SetTerminalCtrlCmdRqst::kCmdDataFieldNumber;
#endif  // !_MSC_VER

SetTerminalCtrlCmdRqst::SetTerminalCtrlCmdRqst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetTerminalCtrlCmdRqst)
}

void SetTerminalCtrlCmdRqst::InitAsDefaultInstance() {
}

SetTerminalCtrlCmdRqst::SetTerminalCtrlCmdRqst(const SetTerminalCtrlCmdRqst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetTerminalCtrlCmdRqst)
}

void SetTerminalCtrlCmdRqst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTerminalCtrlCmdRqst::~SetTerminalCtrlCmdRqst() {
  // @@protoc_insertion_point(destructor:SetTerminalCtrlCmdRqst)
  SharedDtor();
}

void SetTerminalCtrlCmdRqst::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void SetTerminalCtrlCmdRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTerminalCtrlCmdRqst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTerminalCtrlCmdRqst_descriptor_;
}

const SetTerminalCtrlCmdRqst& SetTerminalCtrlCmdRqst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nwpb_2eproto();
  return *default_instance_;
}

SetTerminalCtrlCmdRqst* SetTerminalCtrlCmdRqst::default_instance_ = NULL;

SetTerminalCtrlCmdRqst* SetTerminalCtrlCmdRqst::New() const {
  return new SetTerminalCtrlCmdRqst;
}

void SetTerminalCtrlCmdRqst::Clear() {
  if (has_node_id()) {
    if (node_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      node_id_->clear();
    }
  }
  cmd_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTerminalCtrlCmdRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetTerminalCtrlCmdRqst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd_data;
        break;
      }

      // repeated .TerminalCmd cmd_data = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cmd_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetTerminalCtrlCmdRqst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetTerminalCtrlCmdRqst)
  return false;
#undef DO_
}

void SetTerminalCtrlCmdRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetTerminalCtrlCmdRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // repeated .TerminalCmd cmd_data = 2;
  for (int i = 0; i < this->cmd_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cmd_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetTerminalCtrlCmdRqst)
}

::google::protobuf::uint8* SetTerminalCtrlCmdRqst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetTerminalCtrlCmdRqst)
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // repeated .TerminalCmd cmd_data = 2;
  for (int i = 0; i < this->cmd_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cmd_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetTerminalCtrlCmdRqst)
  return target;
}

int SetTerminalCtrlCmdRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

  }
  // repeated .TerminalCmd cmd_data = 2;
  total_size += 1 * this->cmd_data_size();
  for (int i = 0; i < this->cmd_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cmd_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTerminalCtrlCmdRqst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTerminalCtrlCmdRqst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTerminalCtrlCmdRqst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTerminalCtrlCmdRqst::MergeFrom(const SetTerminalCtrlCmdRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmd_data_.MergeFrom(from.cmd_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTerminalCtrlCmdRqst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTerminalCtrlCmdRqst::CopyFrom(const SetTerminalCtrlCmdRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTerminalCtrlCmdRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cmd_data())) return false;
  return true;
}

void SetTerminalCtrlCmdRqst::Swap(SetTerminalCtrlCmdRqst* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    cmd_data_.Swap(&other->cmd_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTerminalCtrlCmdRqst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTerminalCtrlCmdRqst_descriptor_;
  metadata.reflection = SetTerminalCtrlCmdRqst_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
